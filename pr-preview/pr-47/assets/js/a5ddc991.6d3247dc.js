"use strict";(self.webpackChunkuppy_io=self.webpackChunkuppy_io||[]).push([[7826],{5162:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(7294),o=a(6010);const s="tabItem_Ymn6";function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,o.Z)(s,i),hidden:a},t)}},5488:(e,t,a)=>{a.d(t,{Z:()=>c});var n=a(7462),o=a(7294),s=a(6010),i=a(2389),l=a(7392),r=a(7094),p=a(2466);const d="tabList__CuJ",u="tabItem_LNqP";function m(e){const{lazy:t,block:a,defaultValue:i,values:m,groupId:c,className:h}=e,k=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=m??k.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),f=(0,l.l)(y,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===i?i:i??k.find((e=>e.props.default))?.props.value??k[0].props.value;if(null!==b&&!y.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:N}=(0,r.U)(),[v,w]=(0,o.useState)(b),C=[],{blockElementScrollPositionUntilNextRender:T}=(0,p.o5)();if(null!=c){const e=g[c];null!=e&&e!==v&&y.some((t=>t.value===e))&&w(e)}const A=e=>{const t=e.currentTarget,a=C.indexOf(t),n=y[a].value;n!==v&&(T(t),w(n),null!=c&&N(c,String(n)))},O=e=>{let t=null;switch(e.key){case"Enter":A(e);break;case"ArrowRight":{const a=C.indexOf(e.currentTarget)+1;t=C[a]??C[0];break}case"ArrowLeft":{const a=C.indexOf(e.currentTarget)-1;t=C[a]??C[C.length-1];break}}t?.focus()};return o.createElement("div",{className:(0,s.Z)("tabs-container",d)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":a},h)},y.map((e=>{let{value:t,label:a,attributes:i}=e;return o.createElement("li",(0,n.Z)({role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,key:t,ref:e=>C.push(e),onKeyDown:O,onClick:A},i,{className:(0,s.Z)("tabs__item",u,i?.className,{"tabs__item--active":v===t})}),a??t)}))),t?(0,o.cloneElement)(k.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==v})))))}function c(e){const t=(0,i.Z)();return o.createElement(m,(0,n.Z)({key:String(t)},e))}},3068:(e,t,a)=>{a.d(t,{Z:()=>r});var n=a(7294),o=a(814),s=a(3612);const i=JSON.parse('{"name":"uppy-io","version":"0.0.0","private":true,"scripts":{"build":"docusaurus build","clear":"docusaurus clear","deploy":"docusaurus deploy","dev":"docusaurus start","lint:js":"eslint . --cache","lint:md":"run-s --continue-on-error remark:md remark:mdx","lint":"run-s --continue-on-error lint:js lint:md prettier:check","prepare":"husky install","prettier:check":"prettier -c .","prettier:fix":"prettier -w .","remark:md":"remark . -qf","remark:mdx":"remark . -e mdx -u mdx -qf","serve":"docusaurus serve","swizzle":"docusaurus swizzle","typecheck":"tsc --noEmit","write-heading-ids":"docusaurus write-heading-ids","write-translations":"docusaurus write-translations"},"lint-staged":{"*.{js,jsx,ts,tsx}":["eslint --fix --cache","prettier --write"],"*.md":["remark -qf --","prettier --write"],"*.mdx":["remark -u mdx -qf --","prettier --write"],"*.{css,html,json,yml}":"prettier --write"},"browserslist":{"production":[">0.5%","not dead","not op_mini all"],"development":["last 1 chrome version","last 1 firefox version","last 1 safari version"]},"dependencies":{"@docusaurus/core":"^2.0.1","@docusaurus/preset-classic":"^2.0.1","@mdx-js/react":"^1.6.22","clsx":"^1.1.1","prism-react-renderer":"^1.2.1","react":"^17.0.1","react-dom":"^17.0.1"},"devDependencies":{"@docusaurus/eslint-plugin":"^2.0.1","@docusaurus/module-type-aliases":"^2.0.1","@tsconfig/docusaurus":"^1.0.4","eslint":"^8.19.0","eslint-config-prettier":"^8.5.0","eslint-plugin-markdown":"^3.0.0","eslint-plugin-mdx":"^2.0.4","husky":"^8.0.1","lint-staged":"^13.0.3","mdast-comment-marker":"^2.1.0","npm-run-all":"^4.1.5","prettier":"2.8.1","remark-cli":"^11.0.0","remark-directive":"^2.0.1","remark-frontmatter":"^4.0.0","remark-gfm":"^3.0.1","remark-lint":"^9.0.0","remark-lint-final-newline":"^2.0.0","remark-lint-hard-break-spaces":"^3.0.0","remark-lint-list-item-bullet-indent":"^4.0.0","remark-lint-list-item-indent":"^3.0.0","remark-lint-no-blockquote-without-marker":"^5.0.0","remark-lint-no-duplicate-definitions":"^3.0.0","remark-lint-no-heading-content-indent":"^4.0.0","remark-lint-no-inline-padding":"^4.0.0","remark-lint-no-literal-urls":"^3.0.0","remark-lint-no-shortcut-reference-image":"^3.0.0","remark-lint-no-shortcut-reference-link":"^3.0.0","remark-lint-no-undefined-references":"^4.0.0","remark-lint-no-unused-definitions":"^3.0.0","remark-lint-ordered-list-marker-style":"^3.0.0","remark-mdx":"^2.1.2","remark-preset-lint-consistent":"^5.1.1","remark-preset-lint-markdown-style-guide":"^5.1.2","remark-preset-prettier":"^2.0.1","remark-retext":"^5.0.0","retext-english":"^4.0.0","retext-equality":"^6.2.0","retext-profanities":"^7.1.0","retext-quotes":"^5.0.0","retext-simplify":"^7.0.0","retext-syntax-mentions":"^3.1.0","typescript":"^4.6.2","unified":"^10.0.0","unified-message-control":"^4.0.0"},"packageManager":"yarn@3.3.1+sha224.1c866bd0fca5cf439c5b6a019f1653906d5e7ea807b01a9c7b18adab"}'),{version:l}=i;function r(e){let{children:t,uppyCssName:a="uppy.min.css",uppyJsName:i="uppy.min.js"}=e,r=[];n.Children.toArray(t).forEach((e=>{r=[...r,...String(e).trim().split("\n").map((e=>e.trim()))]}));const p=r.map((e=>`  ${e}`)).join("\n"),d=`https://releases.transloadit.com/uppy/v${l}/${i}`,u=`\x3c!-- 1. Add CSS to \`<head>\` --\x3e\n<link href="https://releases.transloadit.com/uppy/v${l}/${a}" rel="stylesheet">\n\n\x3c!-- 2. Initialize --\x3e\n<div id="uppy"></div>\n\n<script type="module">\n${p.replace(/{{UPPY_JS_URL}}/g,d)}\n<\/script>\n`;return n.createElement(n.Fragment,null,n.createElement(s.Z,{type:"caution"},n.createElement("p",null,"The bundle consists of most Uppy plugins, so this method is not recommended for production, as your users will have to download all plugins when you are likely using only a few.")),n.createElement(o.Z,{language:"html"},u))}},254:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>m});var n=a(7462),o=(a(7294),a(3905)),s=a(5488),i=a(5162),l=a(3068);const r={sidebar_position:1},p="Transloadit",d={unversionedId:"upload-strategies/transloadit",id:"upload-strategies/transloadit",title:"Transloadit",description:"The @uppy/transloadit plugin can be used to upload files directly to Transloadit for all kinds of processing,",source:"@site/docs/upload-strategies/transloadit.mdx",sourceDirName:"upload-strategies",slug:"/upload-strategies/transloadit",permalink:"/uppy.io/pr-preview/pr-47/docs/upload-strategies/transloadit",draft:!1,editUrl:"https://github.com/transloadit/uppy.io/tree/main/docs/upload-strategies/transloadit.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Zoom",permalink:"/uppy.io/pr-preview/pr-47/docs/sources/companion-plugins/zoom"},next:{title:"Tus",permalink:"/uppy.io/pr-preview/pr-47/docs/upload-strategies/tus"}},u={},m=[{value:"When should I use it?",id:"when-should-i-use-it",level:2},{value:"Install",id:"install",level:2},{value:"Use",id:"use",level:2},{value:"Use with Companion",id:"use-with-companion",level:3},{value:"API",id:"api",level:2},{value:"Options",id:"options",level:3},{value:"<code>id</code>",id:"id",level:4},{value:"<code>service</code>",id:"service",level:4},{value:"<code>limit</code>",id:"limit",level:4},{value:"<code>assemblyOptions</code>",id:"assemblyoptions",level:4},{value:"<code>waitForEncoding</code>",id:"waitforencoding",level:4},{value:"<code>waitForMetadata</code>",id:"waitformetadata",level:4},{value:"<code>importFromUploadURLs</code>",id:"importfromuploadurls",level:4},{value:"<code>alwaysRunAssembly</code>",id:"alwaysrunassembly",level:4},{value:"<code>locale</code>",id:"locale",level:4},{value:"<code>getAssemblyOptions</code>",id:"getassemblyoptions",level:4},{value:"<code>params</code>",id:"params",level:4},{value:"<code>signature</code>",id:"signature",level:4},{value:"<code>fields</code>",id:"fields",level:4},{value:"Static exports",id:"static-exports",level:3},{value:"<code>COMPANION_URL</code>",id:"companion_url",level:4},{value:"<code>COMPANION_ALLOWED_HOSTS</code>",id:"companion_allowed_hosts",level:4},{value:"Events",id:"events",level:3},{value:"<code>transloadit:assembly-created</code>",id:"transloaditassembly-created",level:4},{value:"<code>transloadit:upload</code>",id:"transloaditupload",level:4},{value:"<code>transloadit:assembly-executing</code>",id:"transloaditassembly-executing",level:4},{value:"<code>transloadit:result</code>",id:"transloaditresult",level:4},{value:"<code>transloadit:complete</code>",id:"transloaditcomplete",level:4},{value:"Frequently Asked Questions",id:"frequently-asked-questions",level:2},{value:"Accessing the assembly when an error occurred",id:"accessing-the-assembly-when-an-error-occurred",level:3},{value:"Assembly behavior when Uppy is closed",id:"assembly-behavior-when-uppy-is-closed",level:3}],c={toc:m};function h(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"transloadit"},"Transloadit"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"@uppy/transloadit")," plugin can be used to upload files directly to ",(0,o.kt)("a",{parentName:"p",href:"https://transloadit.com/"},"Transloadit")," for all kinds of processing,\nsuch as transcoding video, resizing images, zipping/unzipping, ",(0,o.kt)("a",{parentName:"p",href:"https://transloadit.com/services/"},"and much more"),"."),(0,o.kt)("h2",{id:"when-should-i-use-it"},"When should I use it?"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Not sure which upload strategy is best for you? Read \u201c",(0,o.kt)("a",{parentName:"p",href:"/docs/guides/choosing-upload-strategy"},"Choosing the upload strategy you need"),"\u201d.")),(0,o.kt)("p",null,"Transloadit\u2019s strength is versatility.\nBy doing video, audio, images, documents, and more,\nyou only need one vendor for ",(0,o.kt)("a",{parentName:"p",href:"https://transloadit.com/services/"},"all your file processing needs"),".\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"@uppy/transloadit")," plugin directly uploads to Transloadit\nso you only have to worry about creating a ",(0,o.kt)("a",{parentName:"p",href:"https://transloadit.com/docs/getting-started/concepts/"},"Template"),".\nTransloadit accepts the files, processes according to the instructions in the Template,\nand stores the results in storage of your choosing, such as a self-owned S3 bucket.\nThe Transloadit plugin uses ",(0,o.kt)("a",{parentName:"p",href:"/docs/upload-strategies/tus"},"Tus")," under the hood so you don\u2019t have to sacrifice reliable, resumable uploads."),(0,o.kt)("p",null,"You should use ",(0,o.kt)("inlineCode",{parentName:"p"},"@uppy/transloadit")," if you don\u2019t want to host your own Tus or Companion servers,\n(optionally) need file processing, and store it in the service (such as S3 or GCS) of your liking.\nAll with minimal effort."),(0,o.kt)("h2",{id:"install"},"Install"),(0,o.kt)(s.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"npm",label:"NPM",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm install @uppy/transloadit\n"))),(0,o.kt)(i.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add @uppy/transloadit\n"))),(0,o.kt)(i.Z,{value:"cdn",label:"CDN",mdxType:"TabItem"},(0,o.kt)(l.Z,{mdxType:"UppyCdnExample"},'\n        import { Uppy, Transloadit } from "{{UPPY_JS_URL}}"\n        new Uppy().use(Transloadit, { /* see options */ })\n      '))),(0,o.kt)("h2",{id:"use"},"Use"),(0,o.kt)("p",null,"A quick overview of the complete API."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"{10-17} showLineNumbers","{10-17}":!0,showLineNumbers:!0},"import Uppy from '@uppy/core';\nimport Dashboard from '@uppy/dashboard';\nimport Transloadit from '@uppy/transloadit';\n\nimport '@uppy/core/dist/style.min.css';\nimport '@uppy/dashboard/dist/style.min.css';\n\nconst uppy = new Uppy.use(Dashboard, { inline: true, target: 'body' }).use(\n    Transloadit,\n    {\n        assemblyOptions: {\n            params: {\n                auth: { key: 'your-transloadit-key' },\n                template_id: 'your-template-id',\n            },\n        },\n    },\n);\n// Optionally listen to events\nuppy.on('transloadit:assembly-created', (assembly, fileIDs) => {});\nuppy.on('transloadit:upload', (file, assembly) => {});\nuppy.on('transloadit:assembly-executing', (assembly) => {});\nuppy.on('transloadit:result', (stepName, result, assembly) => {});\nuppy.on('transloadit:complete', (assembly) => {});\n")),(0,o.kt)("h3",{id:"use-with-companion"},"Use with Companion"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"All ",(0,o.kt)("a",{parentName:"p",href:"https://transloadit/pricing/"},"Transloadit plans")," come with a hosted version of Companion.")),(0,o.kt)("p",null,"You can use this plugin together with Transloadit\u2019s hosted Companion service to let your users import files from third party sources across the web.\nTo do so each provider plugin must be configured with Transloadit\u2019s Companion URLs:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { COMPANION_URL, COMPANION_ALLOWED_HOSTS } from '@uppy/transloadit';\nimport Dropbox from '@uppy/dropbox';\n\nuppy.use(Dropbox, {\n    companionUrl: COMPANION_URL,\n    companionAllowedHosts: COMPANION_ALLOWED_HOSTS,\n});\n")),(0,o.kt)("p",null,"This will already work.\nTransloadit\u2019s OAuth applications are used to authenticate your users by default.\nYour users will be asked to provide Transloadit access to their files.\nSince your users are probably not aware of Transloadit, this may be confusing or decrease trust.\nYou may also hit rate limits, because the OAuth application is shared between everyone using Transloadit."),(0,o.kt)("p",null,"To solve that, you can use your own OAuth keys with Transloadit\u2019s hosted Companion servers by using Transloadit Template Credentials.\n",(0,o.kt)("a",{parentName:"p",href:"https://transloadit.com/docs/#how-to-create-template-credentials"},"Create a Template Credential")," on the Transloadit site.\nSelect \u201cCompanion OAuth\u201d for the service, and enter the key and secret for the provider you want to use.\nThen you can pass the name of the new credentials to that provider:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { COMPANION_URL, COMPANION_ALLOWED_HOSTS } from '@uppy/transloadit';\nimport Dropbox from '@uppy/dropbox';\n\nuppy.use(Dropbox, {\n    companionUrl: COMPANION_URL,\n    companionAllowedHosts: COMPANION_ALLOWED_HOSTS,\n    companionKeysParams: {\n        key: 'YOUR_TRANSLOADIT_API_KEY',\n        credentialsName: 'my_companion_dropbox_creds',\n    },\n});\n")),(0,o.kt)("h2",{id:"api"},"API"),(0,o.kt)("h3",{id:"options"},"Options"),(0,o.kt)("h4",{id:"id"},(0,o.kt)("inlineCode",{parentName:"h4"},"id")),(0,o.kt)("p",null,"A unique identifier for this plugin (",(0,o.kt)("inlineCode",{parentName:"p"},"string"),", default: ",(0,o.kt)("inlineCode",{parentName:"p"},"'Transloadit'"),")."),(0,o.kt)("h4",{id:"service"},(0,o.kt)("inlineCode",{parentName:"h4"},"service")),(0,o.kt)("p",null,"The Transloadit API URL to use (",(0,o.kt)("inlineCode",{parentName:"p"},"string"),", default: ",(0,o.kt)("inlineCode",{parentName:"p"},"https://api2.transloadit.com"),")."),(0,o.kt)("p",null,"The default will try to route traffic efficiently based on the location of your users.\nYou could for instance set it to ",(0,o.kt)("inlineCode",{parentName:"p"},"https://api2-us-east-1.transloadit.com")," if you need the traffic to stay inside a particular region."),(0,o.kt)("h4",{id:"limit"},(0,o.kt)("inlineCode",{parentName:"h4"},"limit")),(0,o.kt)("p",null,"Limit the amount of uploads going on at the same time (",(0,o.kt)("inlineCode",{parentName:"p"},"number"),", default: ",(0,o.kt)("inlineCode",{parentName:"p"},"5"),")."),(0,o.kt)("p",null,"Setting this to ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," means no limit on concurrent uploads, but we recommend a value between ",(0,o.kt)("inlineCode",{parentName:"p"},"5")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"20"),".\nThis option is passed through to the ",(0,o.kt)("a",{parentName:"p",href:"/docs/upload-strategies/tus"},(0,o.kt)("inlineCode",{parentName:"a"},"@uppy/tus"))," plugin, which this plugin uses internally."),(0,o.kt)("h4",{id:"assemblyoptions"},(0,o.kt)("inlineCode",{parentName:"h4"},"assemblyOptions")),(0,o.kt)("p",null,"Configure the ",(0,o.kt)("a",{parentName:"p",href:"https://transloadit.com/docs/topics/assembly-instructions/"},"Assembly Instructions"),",\nthe fields to send along to the assembly, and authentication (",(0,o.kt)("inlineCode",{parentName:"p"},"object | function"),", default: ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),")."),(0,o.kt)("p",null,"The object you can pass or return from a function has this structure:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"{\n  params: {\n    auth: { key: 'key-from-transloadit' },\n    template_id: 'id-from-transloadit',\n    steps: {\n      // Overruling Template at runtime\n    },\n    notify_url: 'https://your-domain.com/assembly-status',\n  },\n  signature: 'generated-signature',\n  fields: {\n    // Dynamic or static fields to send along\n  },\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"params")," is used to authenticate with Transloadit and using your desired ",(0,o.kt)("a",{parentName:"li",href:"https://transloadit.com/docs/topics/templates/"},"template"),".",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"auth.key")," ",(0,o.kt)("em",{parentName:"li"},"(required)")," is your authentication key which you can find on the \u201cCredentials\u201d page of your account."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"template_id")," ",(0,o.kt)("em",{parentName:"li"},"(required)")," is the unique identifier to use the right template from your account."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"steps")," ",(0,o.kt)("em",{parentName:"li"},"(optional)")," can be used to ",(0,o.kt)("a",{parentName:"li",href:"https://transloadit.com/docs/topics/templates/#overruling-templates-at-runtime"},"overrule Templates at runtime"),".\nA typical use case might be changing the storage path on the fly based on the session user id.\nFor most use cases, we recommend to let your Templates handle dynamic cases (they can accept ",(0,o.kt)("inlineCode",{parentName:"li"},"fields")," and execute arbitrary JavaScript as well), and not pass in ",(0,o.kt)("inlineCode",{parentName:"li"},"steps")," from a browser.\nThe template editor also has extra validations and context."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"notify_url")," ",(0,o.kt)("em",{parentName:"li"},"(optional)")," is a pingback with the assembly status as JSON.\nFor instance, if you don\u2019t want to block the user experience by letting them wait for your template to complete with ",(0,o.kt)("a",{parentName:"li",href:"#waitForEncoding"},(0,o.kt)("inlineCode",{parentName:"a"},"waitForEncoding")),",\nbut you do want to want to asynchrounously have an update, you can provide an URL which will be \u201cpinged\u201d with the assembly status."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"signature")," ",(0,o.kt)("em",{parentName:"li"},"(optional, but recommended)")," is a cryptographic signature to provide further trust in unstrusted environments.\nRefer to \u201c",(0,o.kt)("a",{parentName:"li",href:"https://transloadit.com/docs/topics/signature-authentication/"},"Signature Authentication\u201d")," for more information."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"fields")," ",(0,o.kt)("em",{parentName:"li"},"(optional)")," can be used to to send along key/value pairs, which can be ",(0,o.kt)("a",{parentName:"li",href:"https://transloadit.com/docs/topics/assembly-instructions/#form-fields-in-instructions"},"used dynamically in your template"),".")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"When you go to production always make sure to set the ",(0,o.kt)("inlineCode",{parentName:"p"},"signature"),".\n",(0,o.kt)("strong",{parentName:"p"},"Not using ",(0,o.kt)("a",{parentName:"strong",href:"https://transloadit.com/docs/topics/signature-authentication/"},"Signature Authentication")," can be a security risk"),".\nSignature Authentication is a security measure that can prevent outsiders from tampering with your Assembly Instructions.\nWhile Signature Authentication is not implemented (yet),\nwe recommend to enable ",(0,o.kt)("inlineCode",{parentName:"p"},"allow_steps_override")," in your Templates to avoid outsiders being able to pass in any Instructions and storage targets on your behalf.")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Examples"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"As a function")),(0,o.kt)("p",null,"A custom ",(0,o.kt)("inlineCode",{parentName:"p"},"assemblyOptions()")," option should return an object or a promise for an object."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"uppy.use(Transloadit, {\n    assemblyOptions(file) {\n        return {\n            params: {\n                auth: { key: 'TRANSLOADIT_AUTH_KEY_HERE' },\n                template_id: 'xyz',\n            },\n            fields: {\n                caption: file.meta.caption,\n            },\n        };\n    },\n});\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"${fields.caption}")," variable will be available in the Assembly spawned from Template ",(0,o.kt)("inlineCode",{parentName:"p"},"xyz"),". You can use this to dynamically watermark images for example."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"assemblyOptions()")," may also return a Promise, so it could retrieve signed Assembly parameters from a server. For example, assuming an endpoint ",(0,o.kt)("inlineCode",{parentName:"p"},"/transloadit-params")," that responds with a JSON object with ",(0,o.kt)("inlineCode",{parentName:"p"},"{ params, signature }")," properties:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"uppy.use(Transloadit, {\n    async assemblyOptions(file) {\n        const res = await fetch('/transloadit-params');\n        return response.json();\n    },\n});\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"As an object")),(0,o.kt)("p",null,"If you don\u2019t need to change anything dynamically, you can also pass an object directly."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"uppy.use(Transloadit, {\n    assemblyOptions: {\n        params: { auth: { key: 'transloadit-key' } },\n    },\n});\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Use with @uppy/form")),(0,o.kt)("p",null,"Combine the ",(0,o.kt)("inlineCode",{parentName:"p"},"assemblyOptions()")," option with the ",(0,o.kt)("a",{parentName:"p",href:"/docs/form"},"Form")," plugin to pass user input from a ",(0,o.kt)("inlineCode",{parentName:"p"},"<form>")," to a Transloadit Assembly:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// This will add form field values to each file's `.meta` object:\nuppy.use(Form, { getMetaFromForm: true });\nuppy.use(Transloadit, {\n    getAssemblyOptions(file) {\n        return {\n            params: {\n                /* ... */\n            },\n            // Pass through the fields you need:\n            fields: {\n                message: file.meta.message,\n            },\n        };\n    },\n});\n"))),(0,o.kt)("h4",{id:"waitforencoding"},(0,o.kt)("inlineCode",{parentName:"h4"},"waitForEncoding")),(0,o.kt)("p",null,"Wait for the template to finish, rather than only the upload, before marking the upload complete (",(0,o.kt)("inlineCode",{parentName:"p"},"boolean"),", default: ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),")."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"When ",(0,o.kt)("inlineCode",{parentName:"li"},"false"),", the Assemblies will complete (or error) in the background but Uppy won\u2019t know or care about it.\nYou may have to let Transloadit ping you via a ",(0,o.kt)("inlineCode",{parentName:"li"},"notify_url")," and asynchronously inform your user (email, in-app notification)."),(0,o.kt)("li",{parentName:"ul"},"When ",(0,o.kt)("inlineCode",{parentName:"li"},"true"),", the Transloadit plugin waits for Assemblies to complete before the files are marked as completed.\nThis means users have to wait for a potentially long time, depending on how complicated your Assembly instructions are.\nBut, you can receive the final status and transcoding results on the client side with less effort.")),(0,o.kt)("p",null,"When this is enabled, you can listen for the ",(0,o.kt)("a",{parentName:"p",href:"#transloaditresult"},(0,o.kt)("inlineCode",{parentName:"a"},"transloadit:result"))," and ",(0,o.kt)("a",{parentName:"p",href:"#transloaditcomplete"},(0,o.kt)("inlineCode",{parentName:"a"},"transloadit:complete"))," events."),(0,o.kt)("h4",{id:"waitformetadata"},(0,o.kt)("inlineCode",{parentName:"h4"},"waitForMetadata")),(0,o.kt)("p",null,"Wait for for Transloadit\u2019s backend to catch early errors, not the entire Assembly to complete. (",(0,o.kt)("inlineCode",{parentName:"p"},"boolean"),", default: ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),")"),(0,o.kt)("p",null,"When set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", the Transloadit plugin waits for Transloadit\u2019s backend to extract metadata from all the uploaded files.\nThis is mostly handy if you want to have a quick user experience (so your users don\u2019t necessarily need to wait for all the encoding to complete),\nbut you do want to let users know about some types of errors that can be caught early on, like file format issues."),(0,o.kt)("p",null,"You you can listen for the ",(0,o.kt)("a",{parentName:"p",href:"#transloaditupload"},(0,o.kt)("inlineCode",{parentName:"a"},"transloadit:upload"))," event when this or ",(0,o.kt)("inlineCode",{parentName:"p"},"waitForEncoding")," is enabled."),(0,o.kt)("h4",{id:"importfromuploadurls"},(0,o.kt)("inlineCode",{parentName:"h4"},"importFromUploadURLs")),(0,o.kt)("p",null,"Allow another plugin to upload files, and then import those files into the Transloadit Assembly (",(0,o.kt)("inlineCode",{parentName:"p"},"boolean"),", default: ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),")."),(0,o.kt)("p",null,"When enabling this option, Transloadit will ",(0,o.kt)("em",{parentName:"p"},"not")," configure the Tus plugin to upload to Transloadit.\nInstead, a separate upload plugin must be used.\nOnce the upload completes, the Transloadit plugin adds the uploaded file to the Assembly."),(0,o.kt)("p",null,"For example, to upload files to an S3 bucket and then transcode them:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"uppy.use(AwsS3, {\n    getUploadParameters(file) {\n        return {\n            /* upload parameters */\n        };\n    },\n});\nuppy.use(Transloadit, {\n    importFromUploadURLs: true,\n    assemblyOptions: {\n        params: {\n            auth: { key: 'YOUR_API_KEY' },\n            template_id: 'YOUR_TEMPLATE_ID',\n        },\n    },\n});\n")),(0,o.kt)("p",null,"Tranloadit will download the files and expose them to your Template as ",(0,o.kt)("inlineCode",{parentName:"p"},":original"),", as if they were directly uploaded from the Uppy client.  "),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"For this to work, the upload plugin must assign a publically accessible ",(0,o.kt)("inlineCode",{parentName:"p"},"uploadURL")," property to the uploaded file object.\nThe Tus and S3 plugins both do this automatically.\nFor the XHRUpload plugin, you may have to specify a custom ",(0,o.kt)("inlineCode",{parentName:"p"},"getResponseData")," function.")),(0,o.kt)("h4",{id:"alwaysrunassembly"},(0,o.kt)("inlineCode",{parentName:"h4"},"alwaysRunAssembly")),(0,o.kt)("p",null,"Always create and run an Assembly when ",(0,o.kt)("inlineCode",{parentName:"p"},"uppy.upload()")," is called, even if no files were selected (",(0,o.kt)("inlineCode",{parentName:"p"},"boolean"),", default: ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),")."),(0,o.kt)("p",null,"This allows running Assemblies that do not receive files,\nbut instead use a robot like ",(0,o.kt)("a",{parentName:"p",href:"https://transloadit.com/docs/transcoding/#s3-import"},(0,o.kt)("inlineCode",{parentName:"a"},"/s3/import"))," to download\nthe files from elsewhere, for example, for a bulk transcoding job."),(0,o.kt)("h4",{id:"locale"},(0,o.kt)("inlineCode",{parentName:"h4"},"locale")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"export default {\n    strings: {\n        // Shown while Assemblies are being created for an upload.\n        creatingAssembly: 'Preparing upload...',\n        // Shown if an Assembly could not be created.\n        creatingAssemblyFailed: 'Transloadit: Could not create Assembly',\n        // Shown after uploads have succeeded, but when the Assembly is still executing.\n        // This only shows if `waitForMetadata` or `waitForEncoding` was enabled.\n        encoding: 'Encoding...',\n    },\n};\n")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Deprecated options"),(0,o.kt)("p",null,"These options have been deprecated in favor of ",(0,o.kt)("a",{parentName:"p",href:"#assemblyoptions"},(0,o.kt)("inlineCode",{parentName:"a"},"assemblyOptions")),",\nwhich we now recommend for all use cases.\nYou can still use these options, but they will be removed in the next major version."),(0,o.kt)("h4",{id:"getassemblyoptions"},(0,o.kt)("inlineCode",{parentName:"h4"},"getAssemblyOptions")),(0,o.kt)("p",null,"This function behaves the same as passing a function to ",(0,o.kt)("a",{parentName:"p",href:"assemblyoptions"},(0,o.kt)("inlineCode",{parentName:"a"},"assemblyOptions")),"."),(0,o.kt)("h4",{id:"params"},(0,o.kt)("inlineCode",{parentName:"h4"},"params")),(0,o.kt)("p",null,"The Assembly parameters to use for the upload (",(0,o.kt)("inlineCode",{parentName:"p"},"object"),", default: ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),")\nSee the Transloadit documentation on ",(0,o.kt)("a",{parentName:"p",href:"https://transloadit.com/docs/#14-assembly-instructions"},"Assembly Instructions")," for further information."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"auth.key")," Assembly parameter is required.\nYou can also use the ",(0,o.kt)("inlineCode",{parentName:"p"},"steps")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"template_id")," options here as described in the Transloadit documentation."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"uppy.use(Transloadit, {\n    params: {\n        auth: { key: 'YOUR_TRANSLOADIT_KEY' },\n        steps: {\n            encode: {\n                robot: '/video/encode',\n                use: {\n                    steps: [':original'],\n                    fields: ['file_input_field2'],\n                },\n                preset: 'iphone',\n            },\n        },\n    },\n});\n")),(0,o.kt)("h4",{id:"signature"},(0,o.kt)("inlineCode",{parentName:"h4"},"signature")),(0,o.kt)("p",null,"An optional signature for the Assembly parameters.\nSee the Transloadit documentation on ",(0,o.kt)("a",{parentName:"p",href:"https://transloadit.com/docs/#26-signature-authentication"},"Signature Authentication")," for further information."),(0,o.kt)("p",null,"If a ",(0,o.kt)("inlineCode",{parentName:"p"},"signature")," is provided, ",(0,o.kt)("inlineCode",{parentName:"p"},"params")," should be a JSON string instead of a JavaScript object,\nas otherwise the generated JSON in the browser may be different from the JSON string that was used to generate the signature."),(0,o.kt)("h4",{id:"fields"},(0,o.kt)("inlineCode",{parentName:"h4"},"fields")),(0,o.kt)("p",null,"An object of form fields to send along to the Assembly.\nKeys are field names, and values are field values.\nSee also the Transloadit documentation on ",(0,o.kt)("a",{parentName:"p",href:"https://transloadit.com/docs/#23-form-fields-in-instructions"},"Form Fields In Instructions"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"uppy.use(Transloadit, {\n    // ...\n    fields: {\n        message: 'This is a form field',\n    },\n});\n")),(0,o.kt)("p",null,"You can also pass an array of field names to send global or file metadata along to the Assembly.\nGlobal metadata is set using the ",(0,o.kt)("a",{parentName:"p",href:"/docs/uppy/#meta"},(0,o.kt)("inlineCode",{parentName:"a"},"meta")," option")," in the Uppy constructor,\nor using the ",(0,o.kt)("a",{parentName:"p",href:"/docs/uppy/#uppy-setMeta-data"},(0,o.kt)("inlineCode",{parentName:"a"},"setMeta")," method"),".\nFile metadata is set using the ",(0,o.kt)("a",{parentName:"p",href:"/docs/uppy/#uppy-setFileMeta-fileID-data"},(0,o.kt)("inlineCode",{parentName:"a"},"setFileMeta"))," method.\nThe ",(0,o.kt)("a",{parentName:"p",href:"/docs/form"},"Form")," plugin also sets global metadata based on the values of ",(0,o.kt)("inlineCode",{parentName:"p"},"<input />"),"s in the form,\nproviding a handy way to use values from HTML form fields:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"uppy.use(Form, { target: 'form#upload-form', getMetaFromForm: true });\nuppy.use(Transloadit, {\n    fields: ['field_name', 'other_field_name'],\n    params: {\n        /* ... */\n    },\n});\n")),(0,o.kt)("p",null,"Form fields can also be computed dynamically using custom logic, by using the ",(0,o.kt)("a",{parentName:"p",href:"/docs/transloadit/#getAssemblyOptions-file"},(0,o.kt)("inlineCode",{parentName:"a"},"getAssemblyOptions(file)"))," option.")),(0,o.kt)("h3",{id:"static-exports"},"Static exports"),(0,o.kt)("h4",{id:"companion_url"},(0,o.kt)("inlineCode",{parentName:"h4"},"COMPANION_URL")),(0,o.kt)("p",null,"The main endpoint for Transloadit\u2019s hosted companions. You can use this constant in remote provider options, like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import Dropbox from '@uppy/dropbox';\nimport { COMPANION_URL } from '@uppy/transloadit';\n\nuppy.use(Dropbox, {\n    companionUrl: COMPANION_URL,\n});\n")),(0,o.kt)("p",null,"When using ",(0,o.kt)("inlineCode",{parentName:"p"},"COMPANION_URL"),", you should also configure ",(0,o.kt)("a",{parentName:"p",href:"#companion_allowed_hosts"},(0,o.kt)("inlineCode",{parentName:"a"},"companionAllowedHosts")),"."),(0,o.kt)("p",null,"The value of this constant is ",(0,o.kt)("inlineCode",{parentName:"p"},"https://api2.transloadit.com/companion"),".\nIf you are using a custom ",(0,o.kt)("a",{parentName:"p",href:"#service"},(0,o.kt)("inlineCode",{parentName:"a"},"service"))," option, you should also set a custom host option in your provider plugins,\nby taking a Transloadit API url and appending ",(0,o.kt)("inlineCode",{parentName:"p"},"/companion"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"uppy.use(Dropbox, {\n    companionUrl: 'https://api2-us-east-1.transloadit.com/companion',\n});\n")),(0,o.kt)("h4",{id:"companion_allowed_hosts"},(0,o.kt)("inlineCode",{parentName:"h4"},"COMPANION_ALLOWED_HOSTS")),(0,o.kt)("p",null,"A RegExp pattern matching Transloadit\u2019s hosted companion endpoints.\nThe pattern is used in remote provider ",(0,o.kt)("inlineCode",{parentName:"p"},"companionAllowedHosts")," options,\nto make sure that third party authentication messages cannot be faked by an attacker\u2019s page\nbut can only originate from Transloadit\u2019s servers."),(0,o.kt)("p",null,"Use it whenever you use ",(0,o.kt)("inlineCode",{parentName:"p"},"companionUrl: COMPANION_URL"),", like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import Dropbox from '@uppy/dropbox';\nimport { COMPANION_ALLOWED_HOSTS } from '@uppy/transloadit';\n\nuppy.use(Dropbox, {\n    companionAllowedHosts: COMPANION_ALLOWED_HOSTS,\n});\n")),(0,o.kt)("p",null,"The value of this constant covers ",(0,o.kt)("em",{parentName:"p"},"all")," Transloadit\u2019s Companion servers,\nso it does not need to be changed if you are using a custom ",(0,o.kt)("a",{parentName:"p",href:"#service"},(0,o.kt)("inlineCode",{parentName:"a"},"service"))," option.\nBut, if you are not using the Transloadit Companion servers at ",(0,o.kt)("inlineCode",{parentName:"p"},"*.transloadit.com"),",\nmake sure to set the ",(0,o.kt)("inlineCode",{parentName:"p"},"companionAllowedHosts")," option to something that matches what you do use."),(0,o.kt)("h3",{id:"events"},"Events"),(0,o.kt)("h4",{id:"transloaditassembly-created"},(0,o.kt)("inlineCode",{parentName:"h4"},"transloadit:assembly-created")),(0,o.kt)("p",null,"Fired when an Assembly is created."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"assembly")," - The initial ",(0,o.kt)("a",{parentName:"li",href:"https://transloadit.com/docs/api/#assembly-status-response"},"Assembly Status"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"fileIDs")," - The IDs of the files that will be uploaded to this Assembly.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"uppy.on('transloadit:assembly-created', (assembly, fileIDs) => {\n    console.group('Created', assembly.assembly_id, 'for files:');\n    for (const id of fileIDs) {\n        console.log(uppy.getFile(id).name);\n    }\n    console.groupEnd();\n});\n")),(0,o.kt)("h4",{id:"transloaditupload"},(0,o.kt)("inlineCode",{parentName:"h4"},"transloadit:upload")),(0,o.kt)("p",null,"Fired when Transloadit has received an upload. Requires ",(0,o.kt)("a",{parentName:"p",href:"#waitformetadata"},(0,o.kt)("inlineCode",{parentName:"a"},"waitForMetadata"))," to be set."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"file")," - The Transloadit file object that was uploaded."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"assembly")," - The ",(0,o.kt)("a",{parentName:"li",href:"https://transloadit.com/docs/api/#assembly-status-response"},"Assembly Status")," of the Assembly to which the file was uploaded.")),(0,o.kt)("h4",{id:"transloaditassembly-executing"},(0,o.kt)("inlineCode",{parentName:"h4"},"transloadit:assembly-executing")),(0,o.kt)("p",null,"Fired when Transloadit has received all uploads, and is executing the Assembly."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"assembly")," - The ",(0,o.kt)("a",{parentName:"li",href:"https://transloadit.com/docs/api/#assembly-status-response"},"Assembly Status")," of the Assembly that is executing.")),(0,o.kt)("h4",{id:"transloaditresult"},(0,o.kt)("inlineCode",{parentName:"h4"},"transloadit:result")),(0,o.kt)("p",null,"Fired when a result came in from an Assembly. Requires ",(0,o.kt)("a",{parentName:"p",href:"#waitforencoding"},(0,o.kt)("inlineCode",{parentName:"a"},"waitForEncoding"))," to be set."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"stepName")," - The name of the Assembly step that generated this result."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"result")," - The result object from Transloadit.\nThis result object has one more property, namely ",(0,o.kt)("inlineCode",{parentName:"li"},"localId"),".\nThis is the ID of the file in Uppy\u2019s local state, and can be used with ",(0,o.kt)("inlineCode",{parentName:"li"},"uppy.getFile(id)"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"assembly")," - The ",(0,o.kt)("a",{parentName:"li",href:"https://transloadit.com/docs/api/#assembly-status-response"},"Assembly Status")," of the Assembly that generated this result.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"uppy.on('transloadit:result', (stepName, result) => {\n    const file = uppy.getFile(result.localId);\n    document.body.appendChild(html`\n        <div>\n            <h2>From ${file.name}</h2>\n            <a href=${result.ssl_url}> View </a>\n        </div>\n    `);\n});\n")),(0,o.kt)("h4",{id:"transloaditcomplete"},(0,o.kt)("inlineCode",{parentName:"h4"},"transloadit:complete")),(0,o.kt)("p",null,"Fired when an Assembly completed. Requires ",(0,o.kt)("a",{parentName:"p",href:"#waitForEncoding"},(0,o.kt)("inlineCode",{parentName:"a"},"waitForEncoding"))," to be set."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"assembly")," - The final ",(0,o.kt)("a",{parentName:"li",href:"https://transloadit.com/docs/api/#assembly-status-response"},"Assembly Status")," of the completed Assembly.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"uppy.on('transloadit:complete', (assembly) => {\n    // Could do something fun with this!\n    console.log(assembly.results);\n});\n")),(0,o.kt)("h2",{id:"frequently-asked-questions"},"Frequently Asked Questions"),(0,o.kt)("h3",{id:"accessing-the-assembly-when-an-error-occurred"},"Accessing the assembly when an error occurred"),(0,o.kt)("p",null,"If an error occurs when an Assembly has already started, you can find the Assembly Status on the error object\u2019s ",(0,o.kt)("inlineCode",{parentName:"p"},"assembly")," property."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"uppy.on('error', (error) => {\n    if (error.assembly) {\n        console.log(`Assembly ID ${error.assembly.assembly_id} failed!`);\n        console.log(error.assembly);\n    }\n});\n")),(0,o.kt)("h3",{id:"assembly-behavior-when-uppy-is-closed"},"Assembly behavior when Uppy is closed"),(0,o.kt)("p",null,"When integrating ",(0,o.kt)("inlineCode",{parentName:"p"},"@uppy/transloadit")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"@uppy/dashboard"),",\nclosing the dashboard will result in continuing assemblies on the server.\nWhen the user manually cancels the upload any running assemblies will be cancelled."))}h.isMDXComponent=!0}}]);