"use strict";(self.webpackChunkuppy_io=self.webpackChunkuppy_io||[]).push([[3554],{5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),l=n(6010);const i="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(i,o),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(7462),l=n(7294),i=n(6010),o=n(2389),r=n(7392),p=n(7094),s=n(2466);const d="tabList__CuJ",u="tabItem_LNqP";function m(e){const{lazy:t,block:n,defaultValue:o,values:m,groupId:c,className:k}=e,h=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=m??h.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),g=(0,r.l)(f,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===o?o:o??h.find((e=>e.props.default))?.props.value??h[0].props.value;if(null!==N&&!f.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:v}=(0,p.U)(),[b,C]=(0,l.useState)(N),w=[],{blockElementScrollPositionUntilNextRender:U}=(0,s.o5)();if(null!=c){const e=y[c];null!=e&&e!==b&&f.some((t=>t.value===e))&&C(e)}const I=e=>{const t=e.currentTarget,n=w.indexOf(t),a=f[n].value;a!==b&&(U(t),C(a),null!=c&&v(c,String(a)))},F=e=>{let t=null;switch(e.key){case"Enter":I(e);break;case"ArrowRight":{const n=w.indexOf(e.currentTarget)+1;t=w[n]??w[0];break}case"ArrowLeft":{const n=w.indexOf(e.currentTarget)-1;t=w[n]??w[w.length-1];break}}t?.focus()};return l.createElement("div",{className:(0,i.Z)("tabs-container",d)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},k)},f.map((e=>{let{value:t,label:n,attributes:o}=e;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:b===t?0:-1,"aria-selected":b===t,key:t,ref:e=>w.push(e),onKeyDown:F,onClick:I},o,{className:(0,i.Z)("tabs__item",u,o?.className,{"tabs__item--active":b===t})}),n??t)}))),t?(0,l.cloneElement)(h.filter((e=>e.props.value===b))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==b})))))}function c(e){const t=(0,o.Z)();return l.createElement(m,(0,a.Z)({key:String(t)},e))}},3068:(e,t,n)=>{n.d(t,{Z:()=>p});var a=n(7294),l=n(814),i=n(3612);const o=JSON.parse('{"name":"uppy-io","version":"0.0.0","private":true,"scripts":{"build":"docusaurus build","clear":"docusaurus clear","deploy":"docusaurus deploy","dev":"docusaurus start","lint:js":"eslint . --cache","lint:md":"run-s --continue-on-error remark:md remark:mdx","lint":"run-s --continue-on-error lint:js lint:md prettier:check","prepare":"husky install","prettier:check":"prettier -c .","prettier:fix":"prettier -w .","remark:md":"remark . -qf","remark:mdx":"remark . -e mdx -u mdx -qf","serve":"docusaurus serve","swizzle":"docusaurus swizzle","typecheck":"tsc --noEmit","write-heading-ids":"docusaurus write-heading-ids","write-translations":"docusaurus write-translations"},"lint-staged":{"*.{js,jsx,ts,tsx}":["eslint --fix --cache","prettier --write"],"*.md":["remark -qf --","prettier --write"],"*.mdx":["remark -u mdx -qf --","prettier --write"],"*.{css,html,json,yml}":"prettier --write"},"browserslist":{"production":[">0.5%","not dead","not op_mini all"],"development":["last 1 chrome version","last 1 firefox version","last 1 safari version"]},"dependencies":{"@docusaurus/core":"^2.0.1","@docusaurus/preset-classic":"^2.0.1","@mdx-js/react":"^1.6.22","clsx":"^1.1.1","prism-react-renderer":"^1.2.1","react":"^17.0.1","react-dom":"^17.0.1"},"devDependencies":{"@docusaurus/eslint-plugin":"^2.0.1","@docusaurus/module-type-aliases":"^2.0.1","@tsconfig/docusaurus":"^1.0.4","eslint":"^8.19.0","eslint-config-prettier":"^8.5.0","eslint-plugin-markdown":"^3.0.0","eslint-plugin-mdx":"^2.0.4","husky":"^8.0.1","lint-staged":"^13.0.3","mdast-comment-marker":"^2.1.0","npm-run-all":"^4.1.5","prettier":"2.8.1","remark-cli":"^11.0.0","remark-directive":"^2.0.1","remark-frontmatter":"^4.0.0","remark-gfm":"^3.0.1","remark-lint":"^9.0.0","remark-lint-final-newline":"^2.0.0","remark-lint-hard-break-spaces":"^3.0.0","remark-lint-list-item-bullet-indent":"^4.0.0","remark-lint-list-item-indent":"^3.0.0","remark-lint-no-blockquote-without-marker":"^5.0.0","remark-lint-no-duplicate-definitions":"^3.0.0","remark-lint-no-heading-content-indent":"^4.0.0","remark-lint-no-inline-padding":"^4.0.0","remark-lint-no-literal-urls":"^3.0.0","remark-lint-no-shortcut-reference-image":"^3.0.0","remark-lint-no-shortcut-reference-link":"^3.0.0","remark-lint-no-undefined-references":"^4.0.0","remark-lint-no-unused-definitions":"^3.0.0","remark-lint-ordered-list-marker-style":"^3.0.0","remark-mdx":"^2.1.2","remark-preset-lint-consistent":"^5.1.1","remark-preset-lint-markdown-style-guide":"^5.1.2","remark-preset-prettier":"^2.0.1","remark-retext":"^5.0.0","retext-english":"^4.0.0","retext-equality":"^6.2.0","retext-profanities":"^7.1.0","retext-quotes":"^5.0.0","retext-simplify":"^7.0.0","retext-syntax-mentions":"^3.1.0","typescript":"^4.6.2","unified":"^10.0.0","unified-message-control":"^4.0.0"},"packageManager":"yarn@3.3.1+sha224.1c866bd0fca5cf439c5b6a019f1653906d5e7ea807b01a9c7b18adab"}'),{version:r}=o;function p(e){let{children:t,uppyCssName:n="uppy.min.css",uppyJsName:o="uppy.min.js"}=e,p=[];a.Children.toArray(t).forEach((e=>{p=[...p,...String(e).trim().split("\n").map((e=>e.trim()))]}));const s=p.map((e=>`  ${e}`)).join("\n"),d=`https://releases.transloadit.com/uppy/v${r}/${o}`,u=`\x3c!-- 1. Add CSS to \`<head>\` --\x3e\n<link href="https://releases.transloadit.com/uppy/v${r}/${n}" rel="stylesheet">\n\n\x3c!-- 2. Initialize --\x3e\n<div id="uppy"></div>\n\n<script type="module">\n${s.replace(/{{UPPY_JS_URL}}/g,d)}\n<\/script>\n`;return a.createElement(a.Fragment,null,a.createElement(i.Z,{type:"caution"},a.createElement("p",null,"The bundle consists of most Uppy plugins, so this method is not recommended for production, as your users will have to download all plugins when you are likely using only a few.")),a.createElement(l.Z,{language:"html"},u))}},9239:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>k,frontMatter:()=>p,metadata:()=>d,toc:()=>m});var a=n(7462),l=(n(7294),n(3905)),i=n(5488),o=n(5162),r=n(3068);const p={sidebar_position:3},s="Uppy core",d={unversionedId:"uppy-core",id:"uppy-core",title:"Uppy core",description:"Uppy can be an uploader and an interface with a lot of features.",source:"@site/docs/uppy-core.mdx",sourceDirName:".",slug:"/uppy-core",permalink:"/uppy.io/pr-preview/pr-47/docs/uppy-core",draft:!1,editUrl:"https://github.com/transloadit/uppy.io/tree/main/docs/uppy-core.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Supporting IE11",permalink:"/uppy.io/pr-preview/pr-47/docs/guides/browser-support"},next:{title:"Companion",permalink:"/uppy.io/pr-preview/pr-47/docs/companion"}},u={},m=[{value:"When should I use it?",id:"when-should-i-use-it",level:2},{value:"Install",id:"install",level:2},{value:"Use",id:"use",level:2},{value:"Working with Uppy files",id:"working-with-uppy-files",level:3},{value:"<code>file.source</code>",id:"filesource",level:4},{value:"<code>file.id</code>",id:"fileid",level:4},{value:"<code>file.name</code>",id:"filename",level:4},{value:"<code>file.meta</code>",id:"filemeta",level:4},{value:"<code>file.type</code>",id:"filetype",level:4},{value:"<code>file.data</code>",id:"filedata",level:4},{value:"<code>file.progress</code>",id:"fileprogress",level:4},{value:"<code>file.size</code>",id:"filesize",level:4},{value:"<code>file.isRemote</code>",id:"fileisremote",level:4},{value:"<code>file.remote</code>",id:"fileremote",level:4},{value:"<code>file.preview</code>",id:"filepreview",level:4},{value:"<code>file.uploadURL</code>",id:"fileuploadurl",level:4},{value:"<code>new Uppy(options?)</code>",id:"new-uppyoptions",level:2},{value:"Options",id:"options",level:3},{value:"<code>id</code>",id:"id",level:4},{value:"<code>autoProceed</code>",id:"autoproceed",level:4},{value:"<code>allowMultipleUploadBatches</code>",id:"allowmultipleuploadbatches",level:4},{value:"<code>debug</code>",id:"debug",level:4},{value:"<code>logger</code>",id:"logger",level:4},{value:"<code>restrictions</code>",id:"restrictions",level:4},{value:"<code>meta</code>",id:"meta",level:4},{value:"<code>onBeforeFileAdded(file, files)</code>",id:"onbeforefileaddedfile-files",level:4},{value:"<code>onBeforeUpload(files)</code>",id:"onbeforeuploadfiles",level:4},{value:"<code>locale</code>",id:"locale",level:4},{value:"<code>store</code>",id:"store",level:4},{value:"<code>infoTimeout</code>",id:"infotimeout",level:4},{value:"Methods",id:"methods",level:3},{value:"<code>use(plugin, opts)</code>",id:"useplugin-opts",level:4},{value:"<code>removePlugin(instance)</code>",id:"removeplugininstance",level:4},{value:"<code>getPlugin(id)</code>",id:"getpluginid",level:4},{value:"<code>getID()</code>",id:"getid",level:4},{value:"<code>addFile(file)</code>",id:"addfilefile",level:4},{value:"<code>removeFile(fileID)</code>",id:"removefilefileid",level:4},{value:"<code>getFile(fileID)</code>",id:"getfilefileid",level:4},{value:"<code>getFiles()</code>",id:"getfiles",level:4},{value:"<code>upload()</code>",id:"upload",level:4},{value:"<code>pauseResume(fileID)</code>",id:"pauseresumefileid",level:4},{value:"<code>pauseAll()</code>",id:"pauseall",level:4},{value:"<code>resumeAll()</code>",id:"resumeall",level:4},{value:"<code>retryUpload(fileID)</code>",id:"retryuploadfileid",level:4},{value:"<code>retryAll()</code>",id:"retryall",level:4},{value:"<code>cancelAll()</code>",id:"cancelall",level:4},{value:"<code>setState(patch)</code>",id:"setstatepatch",level:4},{value:"<code>getState()</code>",id:"getstate",level:4},{value:"<code>setFileState(fileID, state)</code>",id:"setfilestatefileid-state",level:4},{value:"<code>setMeta(data)</code>",id:"setmetadata",level:4},{value:"<code>setFileMeta(fileID, data)</code>",id:"setfilemetafileid-data",level:4},{value:"<code>setOptions(opts)</code>",id:"setoptionsopts",level:4},{value:"<code>reset()</code>",id:"reset",level:4},{value:"<code>close()</code>",id:"close",level:4},{value:"<code>logout()</code>",id:"logout",level:4},{value:"<code>log(message, type)</code>",id:"logmessage-type",level:4},{value:"<code>info(message, type, duration)</code>",id:"infomessage-type-duration",level:4},{value:"<code>addPreProcessor(fn)</code>",id:"addpreprocessorfn",level:4},{value:"<code>addUploader(fn)</code>",id:"adduploaderfn",level:4},{value:"<code>addPostProcessor(fn)</code>",id:"addpostprocessorfn",level:4},{value:"<code>removePreProcessor/removeUploader/removePostProcessor(fn)</code>",id:"removepreprocessorremoveuploaderremovepostprocessorfn",level:4},{value:"<code>on(&#39;event&#39;, action)</code>",id:"onevent-action",level:4},{value:"<code>once(&#39;event&#39;, action)</code>",id:"onceevent-action",level:4},{value:"<code>off(&#39;event&#39;, action)</code>",id:"offevent-action",level:4},{value:"Events",id:"events",level:3},{value:"<code>file-added</code>",id:"file-added",level:4},{value:"<code>files-added</code>",id:"files-added",level:4},{value:"<code>file-removed</code>",id:"file-removed",level:4},{value:"<code>upload</code>",id:"upload-1",level:4},{value:"<code>preprocess-progress</code>",id:"preprocess-progress",level:4},{value:"<code>progress</code>",id:"progress",level:4},{value:"<code>upload-progress</code>",id:"upload-progress",level:4},{value:"<code>postprocess-progress</code>",id:"postprocess-progress",level:4},{value:"<code>upload-success</code>",id:"upload-success",level:4},{value:"<code>complete</code>",id:"complete",level:4},{value:"<code>error</code>",id:"error",level:4},{value:"<code>upload-error</code>",id:"upload-error",level:4},{value:"<code>upload-retry</code>",id:"upload-retry",level:4},{value:"<code>upload-stalled</code>",id:"upload-stalled",level:3},{value:"<code>retry-all</code>",id:"retry-all",level:4},{value:"<code>info-visible</code>",id:"info-visible",level:4},{value:"<code>info-hidden</code>",id:"info-hidden",level:4},{value:"<code>cancel-all</code>",id:"cancel-all",level:4},{value:"<code>restriction-failed</code>",id:"restriction-failed",level:4},{value:"<code>reset-progress</code>",id:"reset-progress",level:4},{value:"<code>new BasePlugin(uppy, options?)</code>",id:"new-basepluginuppy-options",level:2},{value:"Options",id:"options-1",level:3},{value:"Methods",id:"methods-1",level:3},{value:"<code>setOptions(options)</code>",id:"setoptionsoptions",level:4},{value:"<code>getPluginState()</code>",id:"getpluginstate",level:4},{value:"<code>setPluginState()</code>",id:"setpluginstate",level:4},{value:"<code>install()</code>",id:"install-1",level:4},{value:"<code>uninstall()</code>",id:"uninstall",level:4},{value:"<code>i18nInit</code>",id:"i18ninit",level:4},{value:"<code>addTarget</code>",id:"addtarget",level:4},{value:"<code>update</code>",id:"update",level:4},{value:"<code>afterUpdate</code>",id:"afterupdate",level:4},{value:"<code>new UIPlugin(uppy, options?)</code>",id:"new-uipluginuppy-options",level:2},{value:"Options",id:"options-2",level:3},{value:"Methods",id:"methods-2",level:3},{value:"<code>mount(target)</code>",id:"mounttarget",level:4},{value:"<code>onMount()</code>",id:"onmount",level:4},{value:"<code>unmount</code>",id:"unmount",level:4},{value:"<code>onUnmount()</code>",id:"onunmount",level:4},{value:"<code>render()</code>",id:"render",level:4},{value:"<code>update(state)</code>",id:"updatestate",level:4},{value:"<code>debugLogger()</code>",id:"debuglogger",level:2}],c={toc:m};function k(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"uppy-core"},"Uppy core"),(0,l.kt)("p",null,"Uppy can be an uploader and an interface with a lot of features.\nFeatures can be added incrementally with plugins, but Uppy can be as bare bones as you want it to be.\nTherefor we build Uppy\u2019s heart, ",(0,l.kt)("inlineCode",{parentName:"p"},"@uppy/core"),", as a standalone orchestrator.\nIt acts as a state manager, event emitter, and restrictions handler."),(0,l.kt)("h2",{id:"when-should-i-use-it"},"When should I use it?"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"@uppy/core")," is the fundament of the Uppy ecosystem, the orchestrator for all added plugins.\nNo matter the uploading experience you\u2019re looking for, it all starts with installing this plugin."),(0,l.kt)("p",null,"You can use ",(0,l.kt)("inlineCode",{parentName:"p"},"@uppy/core")," and ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/building-your-own-ui-with-uppy"},"build your own UI"),"\nor go for the ",(0,l.kt)("a",{parentName:"p",href:"/docs/interfaces/dashboard"},"Dashboard")," integration.\nFor an uploading plugin, you can refer to ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/choosing-upload-strategy"},"choosing the upload strategy you need"),"."),(0,l.kt)("p",null,"If you want to see how it all comes together, checkout the ",(0,l.kt)("a",{parentName:"p",href:"/examples"},"examples"),"."),(0,l.kt)("h2",{id:"install"},"Install"),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"npm",label:"NPM",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"npm install @uppy/core\n"))),(0,l.kt)(o.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add @uppy/core\n"))),(0,l.kt)(o.Z,{value:"cdn",label:"CDN",mdxType:"TabItem"},(0,l.kt)(r.Z,{mdxType:"UppyCdnExample"},'\n        import { Uppy } from "{{UPPY_JS_URL}}"\n        const uppy = new Uppy()\n      '))),(0,l.kt)("h2",{id:"use"},"Use"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"@uppy/core")," has four exports: ",(0,l.kt)("inlineCode",{parentName:"p"},"Uppy"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"UIPlugin"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"BasePlugin"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"debugLogger"),".\nThe default export is the ",(0,l.kt)("inlineCode",{parentName:"p"},"Uppy")," class."),(0,l.kt)("h3",{id:"working-with-uppy-files"},"Working with Uppy files"),(0,l.kt)("p",null,"Uppy keeps files in state with the ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/File"},(0,l.kt)("inlineCode",{parentName:"a"},"File"))," browser API, but it\u2019s wrapped in an ",(0,l.kt)("inlineCode",{parentName:"p"},"Object"),"\nto be able to add more data to it, which we call an Uppy file.\nAll these properties can be useful for plugins and side-effects (such as ",(0,l.kt)("a",{parentName:"p",href:"#events"},"events"),")."),(0,l.kt)("p",null,"Mutating these properties should be done through ",(0,l.kt)("a",{parentName:"p",href:"#methods"},"methods"),"."),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Uppy file properties"),(0,l.kt)("h4",{id:"filesource"},(0,l.kt)("inlineCode",{parentName:"h4"},"file.source")),(0,l.kt)("p",null,"Name of the plugin that was responsible for adding this file. Typically a remote provider plugin like ",(0,l.kt)("inlineCode",{parentName:"p"},"'GoogleDrive'")," or a UI plugin like ",(0,l.kt)("inlineCode",{parentName:"p"},"'DragDrop'"),"."),(0,l.kt)("h4",{id:"fileid"},(0,l.kt)("inlineCode",{parentName:"h4"},"file.id")),(0,l.kt)("p",null,"Unique ID for the file."),(0,l.kt)("h4",{id:"filename"},(0,l.kt)("inlineCode",{parentName:"h4"},"file.name")),(0,l.kt)("p",null,"The name of the file."),(0,l.kt)("h4",{id:"filemeta"},(0,l.kt)("inlineCode",{parentName:"h4"},"file.meta")),(0,l.kt)("p",null,"Object containing file metadata. Any file metadata should be JSON-serializable."),(0,l.kt)("h4",{id:"filetype"},(0,l.kt)("inlineCode",{parentName:"h4"},"file.type")),(0,l.kt)("p",null,"MIME type of the file. This may actually be guessed if a file type was not provided by the user\u2019s browser, so this is a best-effort value and not guaranteed to be correct."),(0,l.kt)("h4",{id:"filedata"},(0,l.kt)("inlineCode",{parentName:"h4"},"file.data")),(0,l.kt)("p",null,"For local files, this is the actual ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/File"},(0,l.kt)("inlineCode",{parentName:"a"},"File"))," or ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Blob"},(0,l.kt)("inlineCode",{parentName:"a"},"Blob"))," object representing the file contents."),(0,l.kt)("p",null,"For files that are imported from remote providers, the file data is not available in the browser."),(0,l.kt)("h4",{id:"fileprogress"},(0,l.kt)("inlineCode",{parentName:"h4"},"file.progress")),(0,l.kt)("p",null,"An object with upload progress data."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Properties")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bytesUploaded")," - Number of bytes uploaded so far."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bytesTotal")," - Number of bytes that must be uploaded in total."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"uploadStarted")," - Null if the upload has not started yet. Once started, this property stores a UNIX timestamp. Note that this is only set ",(0,l.kt)("em",{parentName:"li"},"after")," preprocessing."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"uploadComplete")," - Boolean indicating if the upload has completed. Note this does ",(0,l.kt)("em",{parentName:"li"},"not")," mean that postprocessing has completed, too."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"percentage")," - Integer percentage between 0 and 100.")),(0,l.kt)("h4",{id:"filesize"},(0,l.kt)("inlineCode",{parentName:"h4"},"file.size")),(0,l.kt)("p",null,"Size in bytes of the file."),(0,l.kt)("h4",{id:"fileisremote"},(0,l.kt)("inlineCode",{parentName:"h4"},"file.isRemote")),(0,l.kt)("p",null,"Boolean: is this file imported from a remote provider?"),(0,l.kt)("h4",{id:"fileremote"},(0,l.kt)("inlineCode",{parentName:"h4"},"file.remote")),(0,l.kt)("p",null,"Grab bag of data for remote providers. Generally not interesting for end users."),(0,l.kt)("h4",{id:"filepreview"},(0,l.kt)("inlineCode",{parentName:"h4"},"file.preview")),(0,l.kt)("p",null,"An optional URL to a visual thumbnail for the file."),(0,l.kt)("h4",{id:"fileuploadurl"},(0,l.kt)("inlineCode",{parentName:"h4"},"file.uploadURL")),(0,l.kt)("p",null,"When an upload is completed, this may contain a URL to the uploaded file.\nDepending on server configuration it may not be accessible or correct.")),(0,l.kt)("h2",{id:"new-uppyoptions"},(0,l.kt)("inlineCode",{parentName:"h2"},"new Uppy(options?)")),(0,l.kt)("h3",{id:"options"},"Options"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import Uppy from '@uppy/core';\n// ...\n\n// Example of setting all the options to their defaults.\n// Not passing anything to `Uppy` is therefor the same as the example below.\nconst uppy = new Uppy({\n    id: 'uppy',\n    autoProceed: false,\n    allowMultipleUploadBatches: true,\n    debug: false,\n    restrictions: {\n        maxFileSize: null,\n        minFileSize: null,\n        maxTotalFileSize: null,\n        maxNumberOfFiles: null,\n        minNumberOfFiles: null,\n        allowedFileTypes: null,\n        requiredMetaFields: [],\n    },\n    meta: {},\n    onBeforeFileAdded: (currentFile, files) => currentFile,\n    onBeforeUpload: (files) => {},\n    locale: {},\n    store: new DefaultStore(),\n    logger: justErrorsLogger,\n    infoTimeout: 5000,\n});\n")),(0,l.kt)("h4",{id:"id"},(0,l.kt)("inlineCode",{parentName:"h4"},"id")),(0,l.kt)("p",null,"A site-wide unique ID for the instance (",(0,l.kt)("inlineCode",{parentName:"p"},"string"),", default: ",(0,l.kt)("inlineCode",{parentName:"p"},"uppy"),")."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"If several Uppy instances are being used, for instance, on two different pages, an ",(0,l.kt)("inlineCode",{parentName:"p"},"id")," should be specified.\nThis allows Uppy to store information in ",(0,l.kt)("inlineCode",{parentName:"p"},"localStorage")," without colliding with other Uppy instances."),(0,l.kt)("p",{parentName:"admonition"},"This ID should be persistent across page reloads and navigation\u2014it shouldn\u2019t be a random number\nthat is different every time Uppy is loaded.")),(0,l.kt)("h4",{id:"autoproceed"},(0,l.kt)("inlineCode",{parentName:"h4"},"autoProceed")),(0,l.kt)("p",null,"Upload as soon as files are added (",(0,l.kt)("inlineCode",{parentName:"p"},"boolean"),", default: ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),")."),(0,l.kt)("p",null,"By default Uppy will wait for an upload button to be pressed in the UI,\nor the ",(0,l.kt)("inlineCode",{parentName:"p"},".upload()")," method to be called before starting an upload.\nSetting this to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," will start uploading automatically after the first file is selected"),(0,l.kt)("h4",{id:"allowmultipleuploadbatches"},(0,l.kt)("inlineCode",{parentName:"h4"},"allowMultipleUploadBatches")),(0,l.kt)("p",null,"Whether to allow several upload batches (",(0,l.kt)("inlineCode",{parentName:"p"},"boolean"),", default: ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),")."),(0,l.kt)("p",null,"This means several calls to ",(0,l.kt)("inlineCode",{parentName:"p"},".upload()"),",\nor a user adding more files after already uploading some.\nAn upload batch is made up of the files that were added since the earlier ",(0,l.kt)("inlineCode",{parentName:"p"},".upload()")," call."),(0,l.kt)("p",null,"With this option set to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),", users can upload some files, and then add ",(0,l.kt)("em",{parentName:"p"},"more")," files and upload those as well.\nA model use case for this is uploading images to a gallery or adding attachments to an email."),(0,l.kt)("p",null,"With this option set to ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),", users can upload some files, and you can listen for the ",(0,l.kt)("a",{parentName:"p",href:"#complete"},(0,l.kt)("inlineCode",{parentName:"a"},"'complete'")),"\nevent to continue to the next step in your app\u2019s upload flow.\nA typical use case for this is uploading a new profile picture.\nIf you are integrating with an existing HTML form, this option gives the closest behaviour to a bare ",(0,l.kt)("inlineCode",{parentName:"p"},'<input type="file">'),"."),(0,l.kt)("h4",{id:"debug"},(0,l.kt)("inlineCode",{parentName:"h4"},"debug")),(0,l.kt)("p",null,"Whether to send debugging and warning logs (",(0,l.kt)("inlineCode",{parentName:"p"},"boolean"),", default: ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),")."),(0,l.kt)("p",null,"Setting this to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," sets the ",(0,l.kt)("a",{parentName:"p",href:"#logger"},(0,l.kt)("inlineCode",{parentName:"a"},"logger"))," to ",(0,l.kt)("a",{parentName:"p",href:"#debuglogger"},(0,l.kt)("inlineCode",{parentName:"a"},"debugLogger")),"."),(0,l.kt)("h4",{id:"logger"},(0,l.kt)("inlineCode",{parentName:"h4"},"logger")),(0,l.kt)("p",null,"Logger used for ",(0,l.kt)("a",{parentName:"p",href:"#logmessage-type"},(0,l.kt)("inlineCode",{parentName:"a"},"uppy.log"))," (",(0,l.kt)("inlineCode",{parentName:"p"},"Object"),", default: ",(0,l.kt)("inlineCode",{parentName:"p"},"justErrorsLogger"),")."),(0,l.kt)("p",null,"By providing your own ",(0,l.kt)("inlineCode",{parentName:"p"},"logger"),", you can send the debug information to a server, choose to log errors only, etc."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Set ",(0,l.kt)("inlineCode",{parentName:"p"},"logger")," to ",(0,l.kt)("a",{parentName:"p",href:"#debuglogger"},(0,l.kt)("inlineCode",{parentName:"a"},"debugLogger"))," to get debug info output to the browser console:")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"You can also provide your own logger object:\nit should expose ",(0,l.kt)("inlineCode",{parentName:"p"},"debug"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"warn")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"error")," methods, as shown in the examples below."),(0,l.kt)("p",{parentName:"admonition"},"Here\u2019s an example of a ",(0,l.kt)("inlineCode",{parentName:"p"},"logger")," that does nothing:"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const nullLogger = {\n    debug: (...args) => {},\n    warn: (...args) => {},\n    error: (...args) => {},\n};\n"))),(0,l.kt)("h4",{id:"restrictions"},(0,l.kt)("inlineCode",{parentName:"h4"},"restrictions")),(0,l.kt)("p",null,"Conditions for restricting an upload (",(0,l.kt)("inlineCode",{parentName:"p"},"Object"),", default: ",(0,l.kt)("inlineCode",{parentName:"p"},"{}"),")."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"maxFileSize")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},"maximum file size in bytes for each individual file")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"minFileSize")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},"minimum file size in bytes for each individual file")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"maxTotalFileSize")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},"maximum file size in bytes for all the files that can be selected for upload")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"maxNumberOfFiles")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},"total number of files that can be selected")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"minNumberOfFiles")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},"minimum number of files that must be selected before the upload")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"allowedFileTypes")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Array")),(0,l.kt)("td",{parentName:"tr",align:null},"wildcards ",(0,l.kt)("inlineCode",{parentName:"td"},"image/*"),", or exact mime types ",(0,l.kt)("inlineCode",{parentName:"td"},"image/jpeg"),", or file extensions ",(0,l.kt)("inlineCode",{parentName:"td"},".jpg"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"['image/*', '.jpg', '.jpeg', '.png', '.gif']"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"requiredMetaFields")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Array<string>")),(0,l.kt)("td",{parentName:"tr",align:null},"make keys from the ",(0,l.kt)("inlineCode",{parentName:"td"},"meta")," object in every file required before uploading")))),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("inlineCode",{parentName:"p"},"maxNumberOfFiles")," also affects the number of files a user is able to select via the system file dialog\nin UI plugins like ",(0,l.kt)("inlineCode",{parentName:"p"},"DragDrop"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"FileInput")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Dashboard"),".\nWhen set to ",(0,l.kt)("inlineCode",{parentName:"p"},"1"),", they will only be able to select a single file.\nWhen ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," or another number is provided, they will be able to select several files.")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("inlineCode",{parentName:"p"},"allowedFileTypes")," gets passed to the file system dialog via\nthe ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#Limiting_accepted_file_types"},(0,l.kt)("inlineCode",{parentName:"a"},"<input>"))," accept attribute,\nso only types supported by the browser will work.")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"If you\u2019d like to force a certain meta field data to be entered before the upload,\nyou can ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/transloadit/uppy/issues/1703#issuecomment-507202561"},"do so using ",(0,l.kt)("inlineCode",{parentName:"a"},"onBeforeUpload")),".")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"If you need to restrict ",(0,l.kt)("inlineCode",{parentName:"p"},"allowedFileTypes")," to a file extension with double dots,\nlike ",(0,l.kt)("inlineCode",{parentName:"p"},".nii.gz"),", you can do so by ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/transloadit/uppy/issues/1822#issuecomment-526801208"},"setting ",(0,l.kt)("inlineCode",{parentName:"a"},"allowedFileTypes")," to the last part of the extension,\n",(0,l.kt)("inlineCode",{parentName:"a"},"allowedFileTypes: ['.gz']"),", and then using ",(0,l.kt)("inlineCode",{parentName:"a"},"onBeforeFileAdded")," to filter for ",(0,l.kt)("inlineCode",{parentName:"a"},".nii.gz")),".")),(0,l.kt)("h4",{id:"meta"},(0,l.kt)("inlineCode",{parentName:"h4"},"meta")),(0,l.kt)("p",null,"Key/value pairs to add to each file\u2019s ",(0,l.kt)("inlineCode",{parentName:"p"},"metadata")," (",(0,l.kt)("inlineCode",{parentName:"p"},"Object"),", default: ",(0,l.kt)("inlineCode",{parentName:"p"},"{}"),")."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Metadata from each file is then attached to uploads in the ",(0,l.kt)("a",{parentName:"p",href:"/docs/uploaders/tus"},"Tus")," and ",(0,l.kt)("a",{parentName:"p",href:"/docs/uploaders/xhr"},"XHR")," plugins.")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Two methods also exist for updating ",(0,l.kt)("inlineCode",{parentName:"p"},"metadata"),": ",(0,l.kt)("a",{parentName:"p",href:"#setmetadata"},(0,l.kt)("inlineCode",{parentName:"a"},"setMeta"))," and ",(0,l.kt)("a",{parentName:"p",href:"#setfilemetafileid-data"},(0,l.kt)("inlineCode",{parentName:"a"},"setFileMeta")),".")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Metadata can also be added from a ",(0,l.kt)("inlineCode",{parentName:"p"},"<form>")," element on your page,\nthrough the ",(0,l.kt)("a",{parentName:"p",href:"#"},"Form")," plugin or through the UI if you are using Dashboard with the ",(0,l.kt)("a",{parentName:"p",href:"/docs/user-interfaces/dashboard#metafields"},(0,l.kt)("inlineCode",{parentName:"a"},"metaFields"))," option.")),(0,l.kt)("a",{id:"onBeforeFileAdded"}),(0,l.kt)("h4",{id:"onbeforefileaddedfile-files"},(0,l.kt)("inlineCode",{parentName:"h4"},"onBeforeFileAdded(file, files)")),(0,l.kt)("p",null,"A function called before a file is added to Uppy (",(0,l.kt)("inlineCode",{parentName:"p"},"Function"),", default: ",(0,l.kt)("inlineCode",{parentName:"p"},"(file) => file"),")."),(0,l.kt)("p",null,"Use this function to run any number of custom checks on the selected file,\nor manipulate it, for instance, by optimizing a file name."),(0,l.kt)("p",null,"You can return ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," to keep the file as is, ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," to remove the file, or return a modified file."),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"This method is intended for quick synchronous checks and modifications only.\nIf you need to do an async API call, or heavy work on a file (like compression or encryption),\nyou should use a ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/building-plugins"},"custom plugin")," instead.")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"No notification will be shown to the user about a file not passing validation by default.\nWe recommend showing a message using ",(0,l.kt)("a",{parentName:"p",href:"#infomessage-type-duration"},(0,l.kt)("inlineCode",{parentName:"a"},"uppy.info()"))," and logging to console\nfor debugging purposes via ",(0,l.kt)("a",{parentName:"p",href:"#logmessage-type"},(0,l.kt)("inlineCode",{parentName:"a"},"uppy.log()")),".")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Filter, change, and abort example"),(0,l.kt)("p",null,"Keep only files under a condition:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const uppy = new Uppy({\n  // ...\n  onBeforeFileAdded: (currentFile, files) => {\n    if (currentFile.name === 'forest-IMG_0616.jpg') {\n      return true\n    }\n    return false\n  },\n")),(0,l.kt)("p",null,"Change all file names:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const uppy = new Uppy({\n  // ...\n  onBeforeFileAdded: (currentFile, files) => {\n    const modifiedFile = {\n      ...currentFile,\n      name: `${currentFile.name}__${Date.now()}`,\n    }\n    return modifiedFile\n  },\n")),(0,l.kt)("p",null,"Abort a file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const uppy = new Uppy({\n    // ...\n    onBeforeFileAdded: (currentFile, files) => {\n        if (!currentFile.type) {\n            // log to console\n            uppy.log(`Skipping file because it has no type`);\n            // show error message to the user\n            uppy.info(`Skipping file because it has no type`, 'error', 500);\n            return false;\n        }\n    },\n});\n"))),(0,l.kt)("h4",{id:"onbeforeuploadfiles"},(0,l.kt)("inlineCode",{parentName:"h4"},"onBeforeUpload(files)")),(0,l.kt)("p",null,"A function called before when upload is initiated (",(0,l.kt)("inlineCode",{parentName:"p"},"Function"),", default: ",(0,l.kt)("inlineCode",{parentName:"p"},"(files) => files"),")."),(0,l.kt)("p",null,"Use this to check if all files or their total number match your requirements,\nor manipulate all the files at once before upload."),(0,l.kt)("p",null,"You can return ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," to continue the upload, ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," to cancel it, or return modified files."),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"This method is intended for quick synchronous checks and modifications only.\nIf you need to do an async API call, or heavy work on a file (like compression or encryption),\nyou should use a ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/building-plugins"},"custom plugin")," instead.")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"No notification will be shown to the user about a file not passing validation by default.\nWe recommend showing a message using ",(0,l.kt)("a",{parentName:"p",href:"#infomessage-type-duration"},(0,l.kt)("inlineCode",{parentName:"a"},"uppy.info()"))," and logging to console\nfor debugging purposes via ",(0,l.kt)("a",{parentName:"p",href:"#logmessage-type"},(0,l.kt)("inlineCode",{parentName:"a"},"uppy.log()")),".")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Change and abort example"),(0,l.kt)("p",null,"Change all file names:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const uppy = new Uppy({\n    // ...\n    onBeforeUpload: (files) => {\n        // We\u2019ll be careful to return a new object, not mutating the original `files`\n        const updatedFiles = {};\n        Object.keys(files).forEach((fileID) => {\n            updatedFiles[fileID] = {\n                ...files[fileID],\n                name: `${myCustomPrefix}__${files[fileID].name}`,\n            };\n        });\n        return updatedFiles;\n    },\n});\n")),(0,l.kt)("p",null,"Abort an upload:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const uppy = new Uppy({\n    // ...\n    onBeforeUpload: (files) => {\n        if (Object.keys(files).length < 2) {\n            // log to console\n            uppy.log(\n                `Aborting upload because only ${\n                    Object.keys(files).length\n                } files were selected`,\n            );\n            // show error message to the user\n            uppy.info(`You have to select at least 2 files`, 'error', 500);\n            return false;\n        }\n        return true;\n    },\n});\n"))),(0,l.kt)("h4",{id:"locale"},(0,l.kt)("inlineCode",{parentName:"h4"},"locale")),(0,l.kt)("p",null,"You can override locale strings by passing the ",(0,l.kt)("inlineCode",{parentName:"p"},"strings")," object\nwith the keys you want to override."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Array indexed objects are used for pluralisation.")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"If you want a different language it\u2019s better to use ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/using-locales"},"locales"),".")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"module.exports = {\n    strings: {\n        addBulkFilesFailed: {\n            0: 'Failed to add %{smart_count} file due to an internal error',\n            1: 'Failed to add %{smart_count} files due to internal errors',\n        },\n        youCanOnlyUploadX: {\n            0: 'You can only upload %{smart_count} file',\n            1: 'You can only upload %{smart_count} files',\n        },\n        youHaveToAtLeastSelectX: {\n            0: 'You have to select at least %{smart_count} file',\n            1: 'You have to select at least %{smart_count} files',\n        },\n        exceedsSize: '%{file} exceeds maximum allowed size of %{size}',\n        missingRequiredMetaField: 'Missing required meta fields',\n        missingRequiredMetaFieldOnFile:\n            'Missing required meta fields in %{fileName}',\n        inferiorSize: 'This file is smaller than the allowed size of %{size}',\n        youCanOnlyUploadFileTypes: 'You can only upload: %{types}',\n        noMoreFilesAllowed: 'Cannot add more files',\n        noDuplicates:\n            \"Cannot add the duplicate file '%{fileName}', it already exists\",\n        companionError: 'Connection with Companion failed',\n        authAborted: 'Authentication aborted',\n        companionUnauthorizeHint:\n            'To unauthorize to your %{provider} account, please go to %{url}',\n        failedToUpload: 'Failed to upload %{file}',\n        noInternetConnection: 'No Internet connection',\n        connectedToInternet: 'Connected to the Internet',\n        // Strings for remote providers\n        noFilesFound: 'You have no files or folders here',\n        selectX: {\n            0: 'Select %{smart_count}',\n            1: 'Select %{smart_count}',\n        },\n        allFilesFromFolderNamed: 'All files from folder %{name}',\n        openFolderNamed: 'Open folder %{name}',\n        cancel: 'Cancel',\n        logOut: 'Log out',\n        filter: 'Filter',\n        resetFilter: 'Reset filter',\n        loading: 'Loading...',\n        authenticateWithTitle:\n            'Please authenticate with %{pluginName} to select files',\n        authenticateWith: 'Connect to %{pluginName}',\n        signInWithGoogle: 'Sign in with Google',\n        searchImages: 'Search for images',\n        enterTextToSearch: 'Enter text to search for images',\n        search: 'Search',\n        emptyFolderAdded: 'No files were added from empty folder',\n        folderAlreadyAdded: 'The folder \"%{folder}\" was already added',\n        folderAdded: {\n            0: 'Added %{smart_count} file from %{folder}',\n            1: 'Added %{smart_count} files from %{folder}',\n        },\n    },\n};\n")),(0,l.kt)("h4",{id:"store"},(0,l.kt)("inlineCode",{parentName:"h4"},"store")),(0,l.kt)("p",null,"The store that is used to keep track of internal state (",(0,l.kt)("inlineCode",{parentName:"p"},"Object"),", default: ",(0,l.kt)("a",{parentName:"p",href:"/docs/custom-stores/default-store"},(0,l.kt)("inlineCode",{parentName:"a"},"DefaultStore")),")."),(0,l.kt)("p",null,"This option can be used to plug Uppy state into an external state management library, such as ",(0,l.kt)("a",{parentName:"p",href:"/docs/custom-stores/redux-store"},"Redux"),"."),(0,l.kt)("p",null,"{/",(0,l.kt)("em",{parentName:"p"}," TODO document store API "),"/}"),(0,l.kt)("h4",{id:"infotimeout"},(0,l.kt)("inlineCode",{parentName:"h4"},"infoTimeout")),(0,l.kt)("p",null,"How long an ",(0,l.kt)("a",{parentName:"p",href:"/docs/user-interfaces/elements/informer"},"Informer")," notification will be visible (",(0,l.kt)("inlineCode",{parentName:"p"},"number"),", default: ",(0,l.kt)("inlineCode",{parentName:"p"},"5000"),")."),(0,l.kt)("h3",{id:"methods"},"Methods"),(0,l.kt)("h4",{id:"useplugin-opts"},(0,l.kt)("inlineCode",{parentName:"h4"},"use(plugin, opts)")),(0,l.kt)("p",null,"Add a plugin to Uppy, with an optional plugin options object."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import Uppy from '@uppy/core';\nimport DragDrop from '@uppy/drag-drop';\n\nconst uppy = new Uppy();\nuppy.use(DragDrop, { target: 'body' });\n")),(0,l.kt)("h4",{id:"removeplugininstance"},(0,l.kt)("inlineCode",{parentName:"h4"},"removePlugin(instance)")),(0,l.kt)("p",null,"Uninstall and remove a plugin."),(0,l.kt)("h4",{id:"getpluginid"},(0,l.kt)("inlineCode",{parentName:"h4"},"getPlugin(id)")),(0,l.kt)("p",null,"Get a plugin by its ",(0,l.kt)("inlineCode",{parentName:"p"},"id")," to access its methods."),(0,l.kt)("h4",{id:"getid"},(0,l.kt)("inlineCode",{parentName:"h4"},"getID()")),(0,l.kt)("p",null,"Get the Uppy instance ID, see the ",(0,l.kt)("a",{parentName:"p",href:"#id"},(0,l.kt)("inlineCode",{parentName:"a"},"id"))," option."),(0,l.kt)("h4",{id:"addfilefile"},(0,l.kt)("inlineCode",{parentName:"h4"},"addFile(file)")),(0,l.kt)("p",null,"Add a new file to Uppy\u2019s internal state. ",(0,l.kt)("inlineCode",{parentName:"p"},"addFile")," will return the generated id for the file that was added."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"addFile")," gives an error if the file cannot be added, either because ",(0,l.kt)("inlineCode",{parentName:"p"},"onBeforeFileAdded(file)")," gave an error,\nor because ",(0,l.kt)("inlineCode",{parentName:"p"},"uppy.opts.restrictions")," checks failed."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uppy.addFile({\n    name: 'my-file.jpg', // file name\n    type: 'image/jpeg', // file type\n    data: blob, // file blob\n    meta: {\n        // optional, store the directory path of a file so Uppy can tell identical files in different directories apart.\n        relativePath: webkitFileSystemEntry.relativePath,\n    },\n    source: 'Local', // optional, determines the source of the file, for example, Instagram.\n    isRemote: false, // optional, set to true if actual file is not in the browser, but on some remote server, for example,\n    // when using companion in combination with Instagram.\n});\n")),(0,l.kt)("p",null,":::::note\nIf you try to add a file that already exists, ",(0,l.kt)("inlineCode",{parentName:"p"},"addFile")," will throw an error.\nUnless that duplicate file was dropped with a folder \u2014 duplicate files from different folders are allowed,\nwhen selected with that folder. This is because we add ",(0,l.kt)("inlineCode",{parentName:"p"},"file.meta.relativePath")," to the ",(0,l.kt)("inlineCode",{parentName:"p"},"file.id"),"."),(0,l.kt)("p",null,"::::note"),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Checkout ",(0,l.kt)("a",{parentName:"p",href:"#working-with-uppy-files"},"working with Uppy files"),".")),(0,l.kt)("p",null,"::::\n:::::"),(0,l.kt)("p",null,":::::info\nIf ",(0,l.kt)("inlineCode",{parentName:"p"},"uppy.opts.autoProceed === true"),", Uppy will begin uploading automatically when files are added."),(0,l.kt)("p",null,"::::info"),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Sometimes you might need to add a remote file to Uppy.\nThis can be achieved by ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/transloadit/uppy/issues/1006#issuecomment-413495493"},"fetching the file, then creating a Blob object, or using the Url plugin with Companion"),".")),(0,l.kt)("p",null,"::::\n:::::"),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Sometimes you might need to mark some files as \u201calready uploaded\u201d,\nso that the user sees them, but they won\u2019t actually be uploaded by Uppy.\nThis can be achieved by ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/transloadit/uppy/issues/1112#issuecomment-432339569"},"looping through files and setting ",(0,l.kt)("inlineCode",{parentName:"a"},"uploadComplete: true, uploadStarted: true")," on them"))),(0,l.kt)("h4",{id:"removefilefileid"},(0,l.kt)("inlineCode",{parentName:"h4"},"removeFile(fileID)")),(0,l.kt)("p",null,"Remove a file from Uppy.\nRemoving a file that is already being uploaded cancels that upload."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uppy.removeFile('uppyteamkongjpg1501851828779');\n")),(0,l.kt)("h4",{id:"getfilefileid"},(0,l.kt)("inlineCode",{parentName:"h4"},"getFile(fileID)")),(0,l.kt)("p",null,"Get a specific ",(0,l.kt)("a",{parentName:"p",href:"#working-with-uppy-files"},"Uppy file")," by its ID."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const file = uppy.getFile('uppyteamkongjpg1501851828779');\n")),(0,l.kt)("h4",{id:"getfiles"},(0,l.kt)("inlineCode",{parentName:"h4"},"getFiles()")),(0,l.kt)("p",null,"Get an array of all added ",(0,l.kt)("a",{parentName:"p",href:"#working-with-uppy-files"},"Uppy files"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const files = uppy.getFiles();\n")),(0,l.kt)("h4",{id:"upload"},(0,l.kt)("inlineCode",{parentName:"h4"},"upload()")),(0,l.kt)("p",null,"Start uploading added files."),(0,l.kt)("p",null,"Returns a Promise ",(0,l.kt)("inlineCode",{parentName:"p"},"result")," that resolves with an object containing two arrays of uploaded files:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"result.successful")," - Files that were uploaded successfully."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"result.failed")," - Files that did not upload successfully. These files will have a ",(0,l.kt)("inlineCode",{parentName:"li"},".error")," property describing what went wrong.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uppy.upload().then((result) => {\n    console.info('Successful uploads:', result.successful);\n\n    if (result.failed.length > 0) {\n        console.error('Errors:');\n        result.failed.forEach((file) => {\n            console.error(file.error);\n        });\n    }\n});\n")),(0,l.kt)("h4",{id:"pauseresumefileid"},(0,l.kt)("inlineCode",{parentName:"h4"},"pauseResume(fileID)")),(0,l.kt)("p",null,"Toggle pause/resume on an upload. Will only work if resumable upload plugin, such as ",(0,l.kt)("a",{parentName:"p",href:"/docs/uploaders/tus/"},"Tus"),", is used."),(0,l.kt)("h4",{id:"pauseall"},(0,l.kt)("inlineCode",{parentName:"h4"},"pauseAll()")),(0,l.kt)("p",null,"Pause all uploads. Will only work if a resumable upload plugin, such as ",(0,l.kt)("a",{parentName:"p",href:"/docs/uploaders/tus/"},"Tus"),", is used."),(0,l.kt)("h4",{id:"resumeall"},(0,l.kt)("inlineCode",{parentName:"h4"},"resumeAll()")),(0,l.kt)("p",null,"Resume all uploads. Will only work if resumable upload plugin, such as ",(0,l.kt)("a",{parentName:"p",href:"/docs/uploaders/tus/"},"Tus"),", is used."),(0,l.kt)("h4",{id:"retryuploadfileid"},(0,l.kt)("inlineCode",{parentName:"h4"},"retryUpload(fileID)")),(0,l.kt)("p",null,"Retry an upload (after an error, for example)."),(0,l.kt)("h4",{id:"retryall"},(0,l.kt)("inlineCode",{parentName:"h4"},"retryAll()")),(0,l.kt)("p",null,"Retry all uploads (after an error, for example)."),(0,l.kt)("h4",{id:"cancelall"},(0,l.kt)("inlineCode",{parentName:"h4"},"cancelAll()")),(0,l.kt)("p",null,"Cancel all uploads, reset progress and remove all files."),(0,l.kt)("h4",{id:"setstatepatch"},(0,l.kt)("inlineCode",{parentName:"h4"},"setState(patch)")),(0,l.kt)("p",null,"Update Uppy\u2019s internal state. Usually, this method is called internally,\nbut in some cases it might be useful to alter something directly, especially when implementing your own plugins."),(0,l.kt)("p",null,"Uppy\u2019s default state on initialization:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const state = {\n    plugins: {},\n    files: {},\n    currentUploads: {},\n    capabilities: {\n        resumableUploads: false,\n    },\n    totalProgress: 0,\n    meta: { ...this.opts.meta },\n    info: {\n        isHidden: true,\n        type: 'info',\n        message: '',\n    },\n};\n")),(0,l.kt)("p",null,"Updating state:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uppy.setState({ smth: true });\n")),(0,l.kt)("p",null,":::::note\nState in Uppy is considered to be immutable.\nWhen updating values, make sure not mutate them, but instead create copies.\nSee ",(0,l.kt)("a",{parentName:"p",href:"http://redux.js.org/docs/recipes/UsingObjectSpreadOperator.html"},"Redux docs")," for more info on this."),(0,l.kt)("p",null,"::::note"),(0,l.kt)("h4",{id:"getstate"},(0,l.kt)("inlineCode",{parentName:"h4"},"getState()")),(0,l.kt)("p",null,"Returns the current state from the ",(0,l.kt)("a",{parentName:"p",href:"#store"},"Store"),"."),(0,l.kt)("h4",{id:"setfilestatefileid-state"},(0,l.kt)("inlineCode",{parentName:"h4"},"setFileState(fileID, state)")),(0,l.kt)("p",null,"Update the state for a single file. This is mostly useful for plugins that may want to store data on ",(0,l.kt)("a",{parentName:"p",href:"#working-with-uppy-files"},"Uppy files"),",\nor need to pass file-specific configurations to other plugins that support it."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"fileID")," is the string file ID. ",(0,l.kt)("inlineCode",{parentName:"p"},"state")," is an object that will be merged into the file\u2019s state object."),(0,l.kt)("h4",{id:"setmetadata"},(0,l.kt)("inlineCode",{parentName:"h4"},"setMeta(data)")),(0,l.kt)("p",null,"Alters global ",(0,l.kt)("inlineCode",{parentName:"p"},"meta")," object in state, the one that can be set in Uppy options and gets merged with all newly added files.\nCalling ",(0,l.kt)("inlineCode",{parentName:"p"},"setMeta")," will also merge newly added meta data with files that had been selected before."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uppy.setMeta({ resize: 1500, token: 'ab5kjfg' });\n")),(0,l.kt)("h4",{id:"setfilemetafileid-data"},(0,l.kt)("inlineCode",{parentName:"h4"},"setFileMeta(fileID, data)")),(0,l.kt)("p",null,"Update metadata for a specific file."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uppy.setFileMeta('myfileID', { resize: 1500 });\n")),(0,l.kt)("h4",{id:"setoptionsopts"},(0,l.kt)("inlineCode",{parentName:"h4"},"setOptions(opts)")),(0,l.kt)("p",null,"Change the options Uppy initialized with."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const uppy = new Uppy();\n\nuppy.setOptions({\n    restrictions: { maxNumberOfFiles: 3 },\n    autoProceed: true,\n});\n\nuppy.setOptions({\n    locale: {\n        strings: {\n            cancel: '\u041e\u0442\u043c\u0435\u043d\u0430',\n        },\n    },\n});\n")),(0,l.kt)("p",null,"You can also change options for plugin:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// Change width of the Dashboard drag-and-drop aread on the fly\nuppy.getPlugin('Dashboard').setOptions({\n    width: 300,\n});\n")),(0,l.kt)("h4",{id:"reset"},(0,l.kt)("inlineCode",{parentName:"h4"},"reset()")),(0,l.kt)("p",null,"Stop all uploads in progress and clear file selection, set progress to 0.\nMore or less, it returns things to the way they were before any user input."),(0,l.kt)("h4",{id:"close"},(0,l.kt)("inlineCode",{parentName:"h4"},"close()")),(0,l.kt)("p",null,"Uninstall all plugins and close down this Uppy instance. Also runs ",(0,l.kt)("inlineCode",{parentName:"p"},"uppy.reset()")," before uninstalling."),(0,l.kt)("h4",{id:"logout"},(0,l.kt)("inlineCode",{parentName:"h4"},"logout()")),(0,l.kt)("p",null,"Calls ",(0,l.kt)("inlineCode",{parentName:"p"},"provider.logout()")," on each remote provider plugin (Google Drive, Instagram, etc).\nUseful, for example, after your users log out of their account in your app\n\u2014 this will clean things up with Uppy cloud providers as well, for extra security."),(0,l.kt)("h4",{id:"logmessage-type"},(0,l.kt)("inlineCode",{parentName:"h4"},"log(message, type)")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Argument"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"message")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"message to log")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string?")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"debug"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"warn"),", or ",(0,l.kt)("inlineCode",{parentName:"td"},"error"))))),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#logger"},(0,l.kt)("inlineCode",{parentName:"a"},"logger"))," docs for details."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uppy.log('[Dashboard] adding files...');\n")),(0,l.kt)("h4",{id:"infomessage-type-duration"},(0,l.kt)("inlineCode",{parentName:"h4"},"info(message, type, duration)")),(0,l.kt)("p",null,"Sets a message in state, with optional details, that can be shown by notification UI plugins.\nIt\u2019s using the ",(0,l.kt)("a",{parentName:"p",href:"/docs/interfaces/elements/informer/"},"Informer")," plugin, included by default in Dashboard."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Argument"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"message")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"Object")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"'info message'")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"{ message: 'Oh no!', details: 'File couldn\u2019t be uploaded' }"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string?")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"'info'"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"'warning'"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"'success'")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"'error'"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"duration")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"number?")),(0,l.kt)("td",{parentName:"tr",align:null},"in milliseconds")))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"info-visible")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"info-hidden")," events are emitted when this info message should be visible or hidden."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"this.info('Oh my, something good happened!', 'success', 3000);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"this.info(\n    {\n        message: 'Oh no, something bad happened!',\n        details:\n            'File couldn\u2019t be uploaded because there is no internet connection',\n    },\n    'error',\n    5000,\n);\n")),(0,l.kt)("h4",{id:"addpreprocessorfn"},(0,l.kt)("inlineCode",{parentName:"h4"},"addPreProcessor(fn)")),(0,l.kt)("p",null,"Add a preprocessing function.\n",(0,l.kt)("inlineCode",{parentName:"p"},"fn")," gets called with a list of file IDs before an upload starts.\n",(0,l.kt)("inlineCode",{parentName:"p"},"fn")," should return a Promise. Its resolution value is ignored."),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"To change file data and such, use Uppy state updates, for example using ",(0,l.kt)("a",{parentName:"p",href:"#setfilestatefileid-state"},(0,l.kt)("inlineCode",{parentName:"a"},"setFileState")),".")),(0,l.kt)("p",null,"::::\n:::::"),(0,l.kt)("h4",{id:"adduploaderfn"},(0,l.kt)("inlineCode",{parentName:"h4"},"addUploader(fn)")),(0,l.kt)("p",null,"Add an uploader function.\n",(0,l.kt)("inlineCode",{parentName:"p"},"fn")," gets called with a list of file IDs when an upload should start.\nUploader functions should do the actual uploading work,\nsuch as creating and sending an XMLHttpRequest or calling into some upload service SDK.\n",(0,l.kt)("inlineCode",{parentName:"p"},"fn")," should return a Promise that resolves once all files have been uploaded."),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"You may choose to still resolve the Promise if some file uploads fail.\nThis way, any postprocessing will still run on the files that were uploaded successfully,\nwhile uploads that failed will be retried when ",(0,l.kt)("a",{parentName:"p",href:"#retryall"},(0,l.kt)("inlineCode",{parentName:"a"},"retryAll"))," is called.")),(0,l.kt)("h4",{id:"addpostprocessorfn"},(0,l.kt)("inlineCode",{parentName:"h4"},"addPostProcessor(fn)")),(0,l.kt)("p",null,"Add a postprocessing function.\n",(0,l.kt)("inlineCode",{parentName:"p"},"fn")," is called with a list of file IDs when an upload has finished.\n",(0,l.kt)("inlineCode",{parentName:"p"},"fn")," should return a Promise that resolves when the processing work is complete.\nThe value of the Promise is ignored."),(0,l.kt)("p",null,"For example, you could wait for file encoding or CDN propagation to complete,\nor you could do an HTTP API call to create an album containing all images that were uploaded."),(0,l.kt)("h4",{id:"removepreprocessorremoveuploaderremovepostprocessorfn"},(0,l.kt)("inlineCode",{parentName:"h4"},"removePreProcessor/removeUploader/removePostProcessor(fn)")),(0,l.kt)("p",null,"Remove a processor or uploader function that was added before.\nNormally, this should be done in the ",(0,l.kt)("a",{parentName:"p",href:"#uninstall"},(0,l.kt)("inlineCode",{parentName:"a"},"uninstall()"))," method."),(0,l.kt)("h4",{id:"onevent-action"},(0,l.kt)("inlineCode",{parentName:"h4"},"on('event', action)")),(0,l.kt)("p",null,"Subscribe to an uppy-event. See below for the full list of events."),(0,l.kt)("h4",{id:"onceevent-action"},(0,l.kt)("inlineCode",{parentName:"h4"},"once('event', action)")),(0,l.kt)("p",null,"Create an event listener that fires once. See below for the full list of events."),(0,l.kt)("h4",{id:"offevent-action"},(0,l.kt)("inlineCode",{parentName:"h4"},"off('event', action)")),(0,l.kt)("p",null,"Unsubscribe to an uppy-event. See below for the full list of events."),(0,l.kt)("h3",{id:"events"},"Events"),(0,l.kt)("p",null,"Uppy exposes events that you can subscribe to for side-effects."),(0,l.kt)("h4",{id:"file-added"},(0,l.kt)("inlineCode",{parentName:"h4"},"file-added")),(0,l.kt)("p",null,"Fired each time a file is added."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file")," - The ",(0,l.kt)("a",{parentName:"li",href:"#working-with-uppy-files"},"Uppy file")," that was added.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uppy.on('file-added', (file) => {\n    console.log('Added file', file);\n});\n")),(0,l.kt)("h4",{id:"files-added"},(0,l.kt)("inlineCode",{parentName:"h4"},"files-added")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"files")," - Array of ",(0,l.kt)("a",{parentName:"li",href:"#working-with-uppy-files"},"Uppy files")," which were added at once, in a batch.")),(0,l.kt)("p",null,"Fired each time when one or more files are added \u2014 one event, for all files"),(0,l.kt)("h4",{id:"file-removed"},(0,l.kt)("inlineCode",{parentName:"h4"},"file-removed")),(0,l.kt)("p",null,"Fired each time a file is removed."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file")," - The ",(0,l.kt)("a",{parentName:"li",href:"#working-with-uppy-files"},"Uppy file")," that was removed."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"reason")," - A string explaining why the file was removed.\nSee ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/transloadit/uppy/issues/2301#issue-628931176"},"#2301")," for details.\nCurrent reasons are: ",(0,l.kt)("inlineCode",{parentName:"li"},"removed-by-user")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"cancel-all"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uppy.on('file-removed', (file, reason) => {\n    console.log('Removed file', file);\n});\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uppy.on('file-removed', (file, reason) => {\n    removeFileFromUploadingCounterUI(file);\n\n    if (reason === 'removed-by-user') {\n        sendDeleteRequestForFile(file);\n    }\n});\n")),(0,l.kt)("h4",{id:"upload-1"},(0,l.kt)("inlineCode",{parentName:"h4"},"upload")),(0,l.kt)("p",null,"Fired when the upload starts."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uppy.on('upload', (data) => {\n    // data object consists of `id` with upload ID and `fileIDs` array\n    // with file IDs in current upload\n    // data: { id, fileIDs }\n    console.log(`Starting upload ${id} for files ${fileIDs}`);\n});\n")),(0,l.kt)("h4",{id:"preprocess-progress"},(0,l.kt)("inlineCode",{parentName:"h4"},"preprocess-progress")),(0,l.kt)("p",null,"Progress of the pre-processors."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"progress")," is an object with properties:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mode")," - Either ",(0,l.kt)("inlineCode",{parentName:"li"},"'determinate'")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"'indeterminate'"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"message")," - A message to show to the user. Something like ",(0,l.kt)("inlineCode",{parentName:"li"},"'Preparing upload...'"),", but be more specific if possible.")),(0,l.kt)("p",null,"When ",(0,l.kt)("inlineCode",{parentName:"p"},"mode")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"'determinate'"),", also add the ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," property:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"value")," - A progress value between 0 and 1.")),(0,l.kt)("h4",{id:"progress"},(0,l.kt)("inlineCode",{parentName:"h4"},"progress")),(0,l.kt)("p",null,"Fired each time the total upload progress is updated:"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"progress")," - An integer (0-100) representing the total upload progress.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uppy.on('progress', (progress) => {\n    // progress: integer (total progress percentage)\n    console.log(progress);\n});\n")),(0,l.kt)("h4",{id:"upload-progress"},(0,l.kt)("inlineCode",{parentName:"h4"},"upload-progress")),(0,l.kt)("p",null,"Fired each time an individual file upload progress is available:"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file")," - The ",(0,l.kt)("a",{parentName:"li",href:"#working-with-uppy-files"},"Uppy file")," that has progressed."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"progress")," - The same object as in ",(0,l.kt)("inlineCode",{parentName:"li"},"file.progress"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uppy.on('upload-progress', (file, progress) => {\n    // file: { id, name, type, ... }\n    // progress: { uploader, bytesUploaded, bytesTotal }\n    console.log(file.id, progress.bytesUploaded, progress.bytesTotal);\n});\n")),(0,l.kt)("h4",{id:"postprocess-progress"},(0,l.kt)("inlineCode",{parentName:"h4"},"postprocess-progress")),(0,l.kt)("p",null,"Progress of the post-processors."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"progress")," is an object with properties:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mode")," - Either ",(0,l.kt)("inlineCode",{parentName:"li"},"'determinate'")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"'indeterminate'"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"message")," - A message to show to the user. Something like ",(0,l.kt)("inlineCode",{parentName:"li"},"'Preparing upload...'"),", but be more specific if possible.")),(0,l.kt)("p",null,"When ",(0,l.kt)("inlineCode",{parentName:"p"},"mode")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"'determinate'"),", also add the ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," property:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"value")," - A progress value between 0 and 1.")),(0,l.kt)("h4",{id:"upload-success"},(0,l.kt)("inlineCode",{parentName:"h4"},"upload-success")),(0,l.kt)("p",null,"Fired each time a single upload is completed."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file")," - The ",(0,l.kt)("a",{parentName:"li",href:"#working-with-uppy-files"},"Uppy file")," that was uploaded."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"response")," - An object with response data from the remote endpoint.\nThe actual contents depend on the upload plugin that is used.")),(0,l.kt)("p",null,"For ",(0,l.kt)("inlineCode",{parentName:"p"},"@uppy/xhr-upload"),", the shape is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": 200, // HTTP status code (0, 200, 300)\n    "body": "\u2026", // response body\n    "uploadURL": "\u2026" // the file url, if it was returned\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uppy.on('upload-success', (file, response) => {\n    console.log(file.name, response.uploadURL);\n    const img = new Image();\n    img.width = 300;\n    img.alt = file.id;\n    img.src = response.uploadURL;\n    document.body.appendChild(img);\n});\n")),(0,l.kt)("h4",{id:"complete"},(0,l.kt)("inlineCode",{parentName:"h4"},"complete")),(0,l.kt)("p",null,"Fired when all uploads are complete."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"result")," parameter is an object with arrays of ",(0,l.kt)("inlineCode",{parentName:"p"},"successful")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"failed")," files,\nas in ",(0,l.kt)("a",{parentName:"p",href:"#upload"},(0,l.kt)("inlineCode",{parentName:"a"},"uppy.upload()")),"\u2019s return value."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uppy.on('complete', (result) => {\n    console.log('successful files:', result.successful);\n    console.log('failed files:', result.failed);\n});\n")),(0,l.kt)("h4",{id:"error"},(0,l.kt)("inlineCode",{parentName:"h4"},"error")),(0,l.kt)("p",null,"Fired when Uppy fails to upload/encode the entire upload."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"error")," - The error object.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uppy.on('error', (error) => {\n    console.error(error.stack);\n});\n")),(0,l.kt)("h4",{id:"upload-error"},(0,l.kt)("inlineCode",{parentName:"h4"},"upload-error")),(0,l.kt)("p",null,"Fired each time a single upload failed."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file")," - The ",(0,l.kt)("a",{parentName:"li",href:"#working-with-uppy-files"},"Uppy file")," which didn\u2019t upload."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"error")," - The error object."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"response")," - an optional parameter with response data from the upload endpoint.")),(0,l.kt)("p",null,"It may be undefined or contain different data depending on the upload plugin in use."),(0,l.kt)("p",null,"For ",(0,l.kt)("inlineCode",{parentName:"p"},"@uppy/xhr-upload"),", the shape is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": 200, // HTTP status code (0, 200, 300)\n    "body": "\u2026" // response body\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uppy.on('upload-error', (file, error, response) => {\n    console.log('error with file:', file.id);\n    console.log('error message:', error);\n});\n")),(0,l.kt)("p",null,"If the error is related to network conditions \u2014 endpoint unreachable due to firewall or ISP blockage,\nfor instance \u2014 the error will have ",(0,l.kt)("inlineCode",{parentName:"p"},"error.isNetworkError")," property set to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),".\nHere\u2019s how you can check for network errors:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uppy.on('upload-error', (file, error, response) => {\n    if (error.isNetworkError) {\n        // Let your users know that file upload could have failed\n        // due to firewall or ISP issues\n        alertUserAboutPossibleFirewallOrISPIssues(error);\n    }\n});\n")),(0,l.kt)("h4",{id:"upload-retry"},(0,l.kt)("inlineCode",{parentName:"h4"},"upload-retry")),(0,l.kt)("p",null,"Fired when an upload has been retried (after an error, for example)."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"This event is not triggered when the user retries all uploads, it will trigger the ",(0,l.kt)("inlineCode",{parentName:"p"},"retry-all")," event instead.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fileID")," - ID of the file that is being retried.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uppy.on('upload-retry', (fileID) => {\n    console.log('upload retried:', fileID);\n});\n")),(0,l.kt)("h3",{id:"upload-stalled"},(0,l.kt)("inlineCode",{parentName:"h3"},"upload-stalled")),(0,l.kt)("p",null,"Fired when an upload has not received any progress in some time (in ",(0,l.kt)("inlineCode",{parentName:"p"},"@uppy/xhr-upload"),", the delay is defined by the ",(0,l.kt)("inlineCode",{parentName:"p"},"timeout")," option). Use this event to display a message on the UI to tell the user they might want to retry the upload."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uppy.on('upload-stalled', (error, files) => {\n    console.log('upload seems stalled', error, files);\n    const noLongerStalledEventHandler = (file) => {\n        if (files.includes(file)) {\n            console.log('upload is no longer stalled');\n            uppy.off('upload-progress', noLongerStalledEventHandler);\n        }\n    };\n    uppy.on('upload-progress', noLongerStalledEventHandler);\n});\n")),(0,l.kt)("h4",{id:"retry-all"},(0,l.kt)("inlineCode",{parentName:"h4"},"retry-all")),(0,l.kt)("p",null,"Fired when all failed uploads are retried"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fileIDs")," - Arrays of IDs of the files being retried.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uppy.on('upload-retry', (fileIDs) => {\n    console.log('upload retried:', fileIDs);\n});\n")),(0,l.kt)("h4",{id:"info-visible"},(0,l.kt)("inlineCode",{parentName:"h4"},"info-visible")),(0,l.kt)("p",null,"Fired when \u201cinfo\u201d message should be visible in the UI. By default, ",(0,l.kt)("inlineCode",{parentName:"p"},"Informer")," plugin is displaying these messages (enabled by default in ",(0,l.kt)("inlineCode",{parentName:"p"},"Dashboard")," plugin). You can use this event to show messages in your custom UI:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uppy.on('info-visible', () => {\n    const { info } = uppy.getState();\n    // info: {\n    //  isHidden: false,\n    //  type: 'error',\n    //  message: 'Failed to upload',\n    //  details: 'Error description'\n    // }\n    console.log(`${info.message} ${info.details}`);\n});\n")),(0,l.kt)("h4",{id:"info-hidden"},(0,l.kt)("inlineCode",{parentName:"h4"},"info-hidden")),(0,l.kt)("p",null,"Fired when \u201cinfo\u201d message should be hidden in the UI. See ",(0,l.kt)("a",{parentName:"p",href:"#info-visible"},(0,l.kt)("inlineCode",{parentName:"a"},"info-visible")),"."),(0,l.kt)("h4",{id:"cancel-all"},(0,l.kt)("inlineCode",{parentName:"h4"},"cancel-all")),(0,l.kt)("p",null,"Fired when ",(0,l.kt)("inlineCode",{parentName:"p"},"cancelAll()")," is called, all uploads are canceled, files removed and progress is reset."),(0,l.kt)("h4",{id:"restriction-failed"},(0,l.kt)("inlineCode",{parentName:"h4"},"restriction-failed")),(0,l.kt)("p",null,"Fired when a file violates certain restrictions when added.\nThis event is providing another choice for those who want to customize the behavior of file upload restrictions."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uppy.on('restriction-failed', (file, error) => {\n    // do some customized logic like showing system notice to users\n});\n")),(0,l.kt)("h4",{id:"reset-progress"},(0,l.kt)("inlineCode",{parentName:"h4"},"reset-progress")),(0,l.kt)("p",null,"Fired when ",(0,l.kt)("inlineCode",{parentName:"p"},"resetProgress()")," is called, each file has its upload progress reset to zero."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uppy.on('reset-progress', () => {\n    // progress was reset\n});\n")),(0,l.kt)("h2",{id:"new-basepluginuppy-options"},(0,l.kt)("inlineCode",{parentName:"h2"},"new BasePlugin(uppy, options?)")),(0,l.kt)("p",null,"The initial building block for a plugin."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"BasePlugin")," does not contain DOM rendering so it can be used for plugins\nwithout an user interface."),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"See ",(0,l.kt)("a",{parentName:"p",href:"#new-uipluginuppy-options"},(0,l.kt)("inlineCode",{parentName:"a"},"UIPlugin"))," for the extended version with Preact rendering for interfaces.")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Checkout the ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/building-plugins"},"building plugins")," guide.")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"If you don\u2019t use any UI plugins and want to make sure Preact isn\u2019t bundled into your app,\nimport ",(0,l.kt)("inlineCode",{parentName:"p"},"BasePlugin")," like this: ",(0,l.kt)("inlineCode",{parentName:"p"},"import BasePlugin from '@uppy/core/lib/BasePlugin"),".")),(0,l.kt)("h3",{id:"options-1"},"Options"),(0,l.kt)("p",null,"The options passed to ",(0,l.kt)("inlineCode",{parentName:"p"},"BasePlugin")," are all you options you wish to support in your plugin."),(0,l.kt)("p",null,"You should pass the options to ",(0,l.kt)("inlineCode",{parentName:"p"},"super")," in your plugin class:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"class MyPlugin extends BasePlugin {\n    constructor(uppy, opts) {\n        super(uppy, opts);\n    }\n}\n")),(0,l.kt)("h3",{id:"methods-1"},"Methods"),(0,l.kt)("h4",{id:"setoptionsoptions"},(0,l.kt)("inlineCode",{parentName:"h4"},"setOptions(options)")),(0,l.kt)("p",null,"Options passed during initialization can also be altered dynamically with ",(0,l.kt)("inlineCode",{parentName:"p"},"setOptions"),"."),(0,l.kt)("h4",{id:"getpluginstate"},(0,l.kt)("inlineCode",{parentName:"h4"},"getPluginState()")),(0,l.kt)("p",null,"Retrieves the plugin state from the ",(0,l.kt)("inlineCode",{parentName:"p"},"Uppy")," class.\nUppy keeps a ",(0,l.kt)("inlineCode",{parentName:"p"},"plugins")," object in state in which each key is the plugin\u2019s ",(0,l.kt)("inlineCode",{parentName:"p"},"id"),",\nand the value its state."),(0,l.kt)("h4",{id:"setpluginstate"},(0,l.kt)("inlineCode",{parentName:"h4"},"setPluginState()")),(0,l.kt)("p",null,"Set the plugin state in the ",(0,l.kt)("inlineCode",{parentName:"p"},"Uppy")," class.\nUppy keeps a ",(0,l.kt)("inlineCode",{parentName:"p"},"plugins")," object in state in which each key is the plugin\u2019s ",(0,l.kt)("inlineCode",{parentName:"p"},"id"),",\nand the value its state."),(0,l.kt)("h4",{id:"install-1"},(0,l.kt)("inlineCode",{parentName:"h4"},"install()")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"install")," method is ran once, when the plugin is added to Uppy with ",(0,l.kt)("inlineCode",{parentName:"p"},".use()"),".\nUse this to initialize the plugin."),(0,l.kt)("p",null,"For example, if you are creating a pre-processor (such as ",(0,l.kt)("a",{parentName:"p",href:"/docs/compressor"},"@uppy/compressor"),")\nyou must add it:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"install () {\n  this.uppy.addPreProcessor(this.prepareUpload)\n}\n")),(0,l.kt)("p",null,"Another common thing to do when creating a ",(0,l.kt)("a",{parentName:"p",href:"#new-uipluginuppy-options"},"UI plugin"),"\nis to ",(0,l.kt)("a",{parentName:"p",href:"#mounttarget"},(0,l.kt)("inlineCode",{parentName:"a"},"mount"))," it to the DOM:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"install () {\n  const { target } = this.opts\n  if (target) {\n    this.mount(target, this)\n  }\n}\n")),(0,l.kt)("h4",{id:"uninstall"},(0,l.kt)("inlineCode",{parentName:"h4"},"uninstall()")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"uninstall")," method is ran once, when the plugin is removed from Uppy.\nThis happens when ",(0,l.kt)("inlineCode",{parentName:"p"},".close()")," is called or when the plugin is destroyed in\na framework integration."),(0,l.kt)("p",null,"Use this to clean things up."),(0,l.kt)("p",null,"For instance when creating a pre-processor, uploader, or post-processor to remove it:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uninstall () {\n  this.uppy.removePreProcessor(this.prepareUpload)\n}\n")),(0,l.kt)("p",null,"When creating a ",(0,l.kt)("a",{parentName:"p",href:"#new-uipluginuppy-options"},"UI plugin")," you should ",(0,l.kt)("a",{parentName:"p",href:"#unmount"},(0,l.kt)("inlineCode",{parentName:"a"},"unmount"))," it from the DOM:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"uninstall () {\n  this.unmount()\n}\n")),(0,l.kt)("h4",{id:"i18ninit"},(0,l.kt)("inlineCode",{parentName:"h4"},"i18nInit")),(0,l.kt)("p",null,"Call ",(0,l.kt)("inlineCode",{parentName:"p"},"this.i18nInit()")," once in the constructor of your plugin class to\ninitialize ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/using-locales"},"internationalisation"),"."),(0,l.kt)("h4",{id:"addtarget"},(0,l.kt)("inlineCode",{parentName:"h4"},"addTarget")),(0,l.kt)("p",null,"You can use this method to make your plugin a ",(0,l.kt)("inlineCode",{parentName:"p"},"target")," for other plugins.\nThis is what ",(0,l.kt)("inlineCode",{parentName:"p"},"@uppy/dashboard")," uses to add other plugins to its UI."),(0,l.kt)("h4",{id:"update"},(0,l.kt)("inlineCode",{parentName:"h4"},"update")),(0,l.kt)("p",null,"Called on each state update. You will rarely need to use this,\nunless if you want to build a UI plugin using something other than Preact."),(0,l.kt)("h4",{id:"afterupdate"},(0,l.kt)("inlineCode",{parentName:"h4"},"afterUpdate")),(0,l.kt)("p",null,"Called after every state update with a debounce, after everything has mounted."),(0,l.kt)("h2",{id:"new-uipluginuppy-options"},(0,l.kt)("inlineCode",{parentName:"h2"},"new UIPlugin(uppy, options?)")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"UIPlugin")," extends ",(0,l.kt)("a",{parentName:"p",href:"#new-basepluginuppy-options"},(0,l.kt)("inlineCode",{parentName:"a"},"BasePlugin"))," to add rendering with ",(0,l.kt)("a",{parentName:"p",href:"https://preactjs.com/"},"Preact"),".\nUse this when you want to create an user interface or an addition to one, such as ",(0,l.kt)("a",{parentName:"p",href:"/docs/user-interfaces/dashboard"},"Dashboard"),"."),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"See ",(0,l.kt)("a",{parentName:"p",href:"#new-basepluginuppy-options"},(0,l.kt)("inlineCode",{parentName:"a"},"BasePlugin"))," for the initial building block for all plugins.")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Checkout the ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/building-plugins"},"building plugins")," guide.")),(0,l.kt)("h3",{id:"options-2"},"Options"),(0,l.kt)("p",null,"The options passed to ",(0,l.kt)("inlineCode",{parentName:"p"},"UIPlugin")," are all you options you wish to support in your plugin."),(0,l.kt)("p",null,"You should pass the options to ",(0,l.kt)("inlineCode",{parentName:"p"},"super")," in your plugin class:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"class MyPlugin extends UIPlugin {\n    constructor(uppy, opts) {\n        super(uppy, opts);\n    }\n}\n")),(0,l.kt)("p",null,"In turn these are also passed to the underlying ",(0,l.kt)("inlineCode",{parentName:"p"},"BasePlugin"),"."),(0,l.kt)("h3",{id:"methods-2"},"Methods"),(0,l.kt)("p",null,"All the methods from ",(0,l.kt)("a",{parentName:"p",href:"#new-basepluginuppy-options"},(0,l.kt)("inlineCode",{parentName:"a"},"BasePlugin"))," are also inherited into ",(0,l.kt)("inlineCode",{parentName:"p"},"UIPlugin"),"."),(0,l.kt)("h4",{id:"mounttarget"},(0,l.kt)("inlineCode",{parentName:"h4"},"mount(target)")),(0,l.kt)("p",null,"Mount this plugin to the ",(0,l.kt)("inlineCode",{parentName:"p"},"target")," element. ",(0,l.kt)("inlineCode",{parentName:"p"},"target")," can be a CSS query selector,\na DOM element, or another Plugin. If ",(0,l.kt)("inlineCode",{parentName:"p"},"target")," is a Plugin, the source (current) plugin\nwill register with the target plugin, and the latter can decide how and where to render the source plugin."),(0,l.kt)("h4",{id:"onmount"},(0,l.kt)("inlineCode",{parentName:"h4"},"onMount()")),(0,l.kt)("p",null,"Called after Preact has rendered the components of the plugin."),(0,l.kt)("h4",{id:"unmount"},(0,l.kt)("inlineCode",{parentName:"h4"},"unmount")),(0,l.kt)("p",null,"Removing the plugin from the DOM.\nYou generally don\u2019t need to override it but you should call it from ",(0,l.kt)("a",{parentName:"p",href:"#uninstall"},(0,l.kt)("inlineCode",{parentName:"a"},"uninstall")),"."),(0,l.kt)("p",null,"The default is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"unmount () {\n  if (this.isTargetDOMEl) {\n    this.el?.remove()\n  }\n  this.onUnmount()\n}\n")),(0,l.kt)("h4",{id:"onunmount"},(0,l.kt)("inlineCode",{parentName:"h4"},"onUnmount()")),(0,l.kt)("p",null,"Called after the elements have been removed from the DOM. Can be used to do some clean up or other side-effects."),(0,l.kt)("h4",{id:"render"},(0,l.kt)("inlineCode",{parentName:"h4"},"render()")),(0,l.kt)("p",null,"Render the UI of the plugin. Uppy uses ",(0,l.kt)("a",{parentName:"p",href:"https://preactjs.com"},"Preact")," as its view engine,\nso ",(0,l.kt)("inlineCode",{parentName:"p"},"render()")," should return a Preact element. ",(0,l.kt)("inlineCode",{parentName:"p"},"render")," is automatically called by Uppy on each state change."),(0,l.kt)("h4",{id:"updatestate"},(0,l.kt)("inlineCode",{parentName:"h4"},"update(state)")),(0,l.kt)("p",null,"Called on each state update. You will rarely need to use this,\nunless if you want to build a UI plugin using something other than Preact."),(0,l.kt)("h2",{id:"debuglogger"},(0,l.kt)("inlineCode",{parentName:"h2"},"debugLogger()")),(0,l.kt)("p",null,"Logger with extra debug and warning logs for during development."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { Uppy, debugLogger } from '@uppy/core';\n\nnew Uppy({ logger: debugLogger });\n")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"You can also enable this logger by setting ",(0,l.kt)("a",{parentName:"p",href:"#debug"},(0,l.kt)("inlineCode",{parentName:"a"},"debug"))," to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),".")),(0,l.kt)("p",null,"The default value of ",(0,l.kt)("a",{parentName:"p",href:"#logger"},(0,l.kt)("inlineCode",{parentName:"a"},"logger"))," is ",(0,l.kt)("inlineCode",{parentName:"p"},"justErrorsLogger"),", which looks like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// Swallow all logs, except errors.\n// default if logger is not set or debug: false\nconst justErrorsLogger = {\n    debug: () => {},\n    warn: () => {},\n    error: (...args) => console.error(`[Uppy] [${getTimeStamp()}]`, ...args),\n};\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"debugLogger")," sends extra debugging and warning logs which could be helpful\nduring development:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// Print logs to console with namespace + timestamp,\n// set by logger: Uppy.debugLogger or debug: true\nconst debugLogger = {\n    debug: (...args) => console.debug(`[Uppy] [${getTimeStamp()}]`, ...args),\n    warn: (...args) => console.warn(`[Uppy] [${getTimeStamp()}]`, ...args),\n    error: (...args) => console.error(`[Uppy] [${getTimeStamp()}]`, ...args),\n};\n")))}k.isMDXComponent=!0}}]);