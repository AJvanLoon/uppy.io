"use strict";(self.webpackChunkuppy_io=self.webpackChunkuppy_io||[]).push([[5857],{1355:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>y,frontMatter:()=>i,metadata:()=>u,toc:()=>m});var a=t(7462),o=(t(7294),t(3905)),p=t(5488),r=t(5162),s=t(3068);const i={},l="React",u={unversionedId:"framework-integrations/react",id:"framework-integrations/react",title:"React",description:"React components for the Uppy UI plugins.",source:"@site/docs/framework-integrations/react.mdx",sourceDirName:"framework-integrations",slug:"/framework-integrations/react",permalink:"/uppy.io/pr-preview/pr-71/docs/framework-integrations/react",draft:!1,editUrl:"https://github.com/transloadit/uppy.io/tree/main/docs/framework-integrations/react.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Angular",permalink:"/uppy.io/pr-preview/pr-71/docs/framework-integrations/angular"},next:{title:"Svelte",permalink:"/uppy.io/pr-preview/pr-71/docs/framework-integrations/svelte"}},d={},m=[{value:"Install",id:"install",level:2},{value:"Use",id:"use",level:2},{value:"Frequently asked questions",id:"frequently-asked-questions",level:2},{value:"How do I update @uppy/core and plugins options dynamically?",id:"how-do-i-update-uppycore-and-plugins-options-dynamically",level:3},{value:"How do I render X amount of Uppy UI components?",id:"how-do-i-render-x-amount-of-uppy-ui-components",level:3}],c={toc:m};function y(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"react"},"React"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://facebook.github.io/react"},"React")," components for the Uppy UI plugins."),(0,o.kt)("h2",{id:"install"},"Install"),(0,o.kt)(p.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"npm",label:"NPM",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm install @uppy/react\n"))),(0,o.kt)(r.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add @uppy/react\n"))),(0,o.kt)(r.Z,{value:"cdn",label:"CDN",mdxType:"TabItem"},(0,o.kt)(s.Z,{mdxType:"UppyCdnExample"},'\n        import { Uppy, Box } from "{{UPPY_JS_URL}}"\n        const uppy = new Uppy()\n        uppy.use(Box, {\n          // Options\n        })\n      '))),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"You also need to install the UI plugin you want to use. For instance,\n",(0,o.kt)("inlineCode",{parentName:"p"},"@uppy/dashboard"),".")),(0,o.kt)("h2",{id:"use"},"Use"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@uppy/react")," exposes component wrappers for ",(0,o.kt)("inlineCode",{parentName:"p"},"Dashboard"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"DragDrop"),", and all\nother UI elements. The components can be used with either ",(0,o.kt)("a",{parentName:"p",href:"https://facebook.github.io/react"},"React")," or\nAPI-compatible alternatives such as ",(0,o.kt)("a",{parentName:"p",href:"https://preactjs.com/"},"Preact"),"."),(0,o.kt)("p",null,"The following plugins are available as React component wrappers:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"<Dashboard />")," renders ",(0,o.kt)("a",{parentName:"li",href:"/docs/user-interfaces/dashboard"},(0,o.kt)("inlineCode",{parentName:"a"},"@uppy/dashboard"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"<DragDrop />")," renders ",(0,o.kt)("a",{parentName:"li",href:"/docs/user-interfaces/drag-drop"},(0,o.kt)("inlineCode",{parentName:"a"},"@uppy/drag-drop"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"<ProgressBar />")," renders\n",(0,o.kt)("a",{parentName:"li",href:"/docs/user-interfaces/progress-bar"},(0,o.kt)("inlineCode",{parentName:"a"},"@uppy/progress-bar"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"<StatusBar />")," renders ",(0,o.kt)("a",{parentName:"li",href:"/docs/user-interfaces/status-bar"},(0,o.kt)("inlineCode",{parentName:"a"},"@uppy/status-bar")))),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"A couple things to keep in mind when using Uppy with React:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"Instead of adding a UI plugin to an Uppy instance with ",(0,o.kt)("inlineCode",{parentName:"li"},".use()"),", the Uppy\ninstance can be passed into components as an ",(0,o.kt)("inlineCode",{parentName:"li"},"uppy")," prop."),(0,o.kt)("li",{parentName:"ul"},"All other props are passed as options to the plugin."),(0,o.kt)("li",{parentName:"ul"},"The Uppy instance ",(0,o.kt)("strong",{parentName:"li"},"should not live inside the component")," but outside of it\n(for class components, it should not be instantiated inside the ",(0,o.kt)("inlineCode",{parentName:"li"},"render()"),"\nmethod)."),(0,o.kt)("li",{parentName:"ul"},"You have to pass the IDs of your ",(0,o.kt)("inlineCode",{parentName:"li"},"use"),"d plugins to the ",(0,o.kt)("inlineCode",{parentName:"li"},"plugins")," array prop so\nDashboard knows it needs to render them."),(0,o.kt)("li",{parentName:"ul"},"An Uppy instance can\u2019t be used by more than one component. Make sure you are\nusing a unique Uppy instance per component."))),(0,o.kt)("p",null,"Here is a basic example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import React, { useEffect } from 'react';\nimport Uppy from '@uppy/core';\nimport Webcam from '@uppy/webcam';\nimport { Dashboard } from '@uppy/react';\n\n// Don't forget the CSS: core and the UI components + plugins you are using.\nimport '@uppy/core/dist/style.min.css';\nimport '@uppy/dashboard/dist/style.min.css';\nimport '@uppy/webcam/dist/style.min.css';\n\n// Don\u2019t forget to keep the Uppy instance outside of your component.\nconst uppy = new Uppy().use(Webcam);\n\nfunction Component() {\n    return <Dashboard uppy={uppy} plugins={['Webcam']} />;\n}\n")),(0,o.kt)("h2",{id:"frequently-asked-questions"},"Frequently asked questions"),(0,o.kt)("h3",{id:"how-do-i-update-uppycore-and-plugins-options-dynamically"},"How do I update @uppy/core and plugins options dynamically?"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// ...\n\n// Don\u2019t forget to keep the Uppy instance outside of your component.\nconst uppy = new Uppy().use(Webcam);\n\nfunction Component(props) {\n    useEffect(() => {\n        uppy.setOptions({ restrictions: props.restrictions });\n    }, [props.restrictions]);\n\n    useEffect(() => {\n        uppy.getPlugin('Webcam').setOptions({ modes: props.webcamModes });\n    }, [props.webcamModes]);\n\n    return <Dashboard uppy={uppy} plugins={['Webcam']} />;\n}\n")),(0,o.kt)("h3",{id:"how-do-i-render-x-amount-of-uppy-ui-components"},"How do I render X amount of Uppy UI components?"),(0,o.kt)("p",null,"You can dynamically render many Uppy UI\u2019s, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"@uppy/drag-drop"),", and let\nevery UI upload under different conditions."),(0,o.kt)("p",null,"For example, a platform where you can upload pictures for a house per room, but\nthe number of rooms is dynamic and you want to handle every room differently in\nyour Transloadit template."),(0,o.kt)("p",null,"Here is what that could look like."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"This is the only exception for having Uppy inside the component.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { useState, useEffect } from 'react';\nimport { Uppy } from '@uppy/core';\nimport { DragDrop, StatusBar } from '@uppy/react';\nimport Transloadit from '@uppy/transloadit';\n\nimport '@uppy/core/dist/style.min.css';\nimport '@uppy/drag-drop/dist/style.min.css';\nimport '@uppy/status-bar/dist/style.min.css';\n\nfunction createUppy(houseId, roomId) {\n    // Adding to global `meta` will add it to every file.\n    // Every Uppy instance needs a unique ID.\n    return new Uppy({ id: roomId, meta: { houseId, roomId } }).use(Transloadit, {\n        assemblyOptions(file) {\n            return {\n                params: {\n                    auth: { key: 'TRANSLOADIT_AUTH_KEY_HERE' },\n                    template_id: 'xyz',\n                    // Send the results of the assembly to your backend.\n                    notify_url: 'https://your-domain.com/assembly-status',\n                },\n                // You can use these inside your template\n                // https://transloadit.com/docs/topics/assembly-instructions/#form-fields-in-instructions\n                fields: { roomId: file.meta.roomId, houseId: file.meta.houseId },\n            };\n        },\n    });\n}\n\nexport default function Room(props) {\n    const { houseId, roomId } = props;\n    // important: passing a initializer function to prevent the state from recreating.\n    const [uppy] = useState(() => createUppy(houseId, roomId));\n\n    useEffect(() => {\n        if (houseId && roomId) {\n            uppy.setOptions({ meta: { houseId, roomId } });\n        }\n    }, [uppy, houseId, roomId]);\n\n    return (\n        <>\n            <DragDrop uppy={uppy} />\n            <StatusBar uppy={uppy} />\n        </>\n    );\n}\n")))}y.isMDXComponent=!0}}]);