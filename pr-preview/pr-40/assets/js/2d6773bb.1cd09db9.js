"use strict";(self.webpackChunkuppy_io=self.webpackChunkuppy_io||[]).push([[5221],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>g});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),l=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(r),m=n,g=d["".concat(p,".").concat(m)]||d[m]||c[m]||o;return r?a.createElement(g,s(s({ref:t},u),{},{components:r})):a.createElement(g,s({ref:t},u))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:n,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2882:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=r(7462),n=(r(7294),r(3905));const o={title:"Uppy 0.29: separate Core and Plugin styles, React Native in tus-js-client",date:new Date("2018-12-11T00:00:00.000Z"),author:"arturi",image:"https://uppy.io/img/blog/0.29/uppy-core-plugins-separate-styles.jpg",published:!0,slug:"2018/12/0.29"},s=void 0,i={permalink:"/uppy.io/pr-preview/pr-40/blog/2018/12/0.29",editUrl:"https://github.com/transloadit/uppy.io/tree/main/blog/2018-12-0.29.md",source:"@site/blog/2018-12-0.29.md",title:"Uppy 0.29: separate Core and Plugin styles, React Native in tus-js-client",description:"0.29 brings bug fixes and improvements, while we are busy working on Uppy React Native support (which first had to land in the js client for our resumable file upload protocol separating Core and Plugin styles, more accurate progress reporting by factoring in sizes across files, adding a responseType option for XHR Upload, and fixing visual Webcam bugs.",date:"2018-12-11T00:00:00.000Z",formattedDate:"December 11, 2018",tags:[],readingTime:3.73,hasTruncateMarker:!0,authors:[{name:"arturi"}],frontMatter:{title:"Uppy 0.29: separate Core and Plugin styles, React Native in tus-js-client",date:"2018-12-11T00:00:00.000Z",author:"arturi",image:"https://uppy.io/img/blog/0.29/uppy-core-plugins-separate-styles.jpg",published:!0,slug:"2018/12/0.29"},prevItem:{title:"Uppy 0.30: Introducing Robodog",permalink:"/uppy.io/pr-preview/pr-40/blog/2019/03/0.30"},nextItem:{title:"Uppy 0.28: A look behind the scenes",permalink:"/uppy.io/pr-preview/pr-40/blog/2018/10/0.28"}},p={authorsImageUrls:[void 0]},l=[{value:"Separate Core and Plugin styles",id:"separate-core-and-plugin-styles",level:2},{value:"Using File Sizes For Progress Calculation",id:"using-file-sizes-for-progress-calculation",level:2},{value:"<code>responseType</code> For XHR Upload",id:"responsetype-for-xhr-upload",level:2},{value:"Misc Changes",id:"misc-changes",level:2}],u={toc:l};function d(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("img",{src:"/img/blog/0.29/uppy-core-plugins-separate-styles.jpg"}),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"0.29")," brings bug fixes and improvements, while we are busy working on Uppy React Native support (which first had to ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/tus/tus-js-client#react-native-support"},"land in the js client for our resumable file upload protocol: tus.io"),") and a Preset (still debating the name) which will make it easier to leverage Transloadit's encoding platform, and offer a smooth migration path for users not yet on Uppy. The highlights of this release are: separating Core and Plugin styles, more accurate progress reporting by factoring in sizes across files, adding a ",(0,n.kt)("inlineCode",{parentName:"p"},"responseType")," option for XHR Upload, and fixing visual Webcam bugs."),(0,n.kt)("h2",{id:"separate-core-and-plugin-styles"},"Separate Core and Plugin styles"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u26a0\ufe0f breaking")),(0,n.kt)("p",null,"When installing ",(0,n.kt)("inlineCode",{parentName:"p"},"uppy")," and Plugins from npm, you had to include their styles. Prior to this release, you only had to include the Plugin\u2019s CSS, say, for ",(0,n.kt)("inlineCode",{parentName:"p"},"@uppy/webcam"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import Uppy from '@uppy/core'\nimport Webcam from '@uppy/webcam'\nimport '@uppy/webcam/dist/style.css'\n")),(0,n.kt)("p",null,"Each plugin's file contained the Core styles. If you added multiple plugins, the core styles ended up being duplicated. This bloated file sizes and could even break styles entirely because of CSS's precedence rules."),(0,n.kt)("p",null,"Now, you have to include \u201cgeneral\u201d styles from ",(0,n.kt)("inlineCode",{parentName:"p"},"@uppy/core")," as well:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import Uppy from '@uppy/core'\nimport Webcam from '@uppy/webcam'\nimport '@uppy/core/dist/style.css' // <-- add this separately and one time only\nimport '@uppy/webcam/dist/style.css'\n")),(0,n.kt)("p",null,"Thus, the Core styles are only included once. ",(0,n.kt)("inlineCode",{parentName:"p"},"@uppy/core")," styles must be included before Plugin styles."),(0,n.kt)("p",null,"Please see the ",(0,n.kt)("a",{parentName:"p",href:"https://uppy.io/docs/plugins/"},"documentation")," for the Plugin you are using to find out whether it requires a CSS file to work. Generally speaking, UI plugins, such as the Dashboard, Webcam and Status Bar, need a CSS file, while utility plugins, such as Tus or XHR Upload, don\u2019t."),(0,n.kt)("p",null,"\u26a0\ufe0f Important things to remember:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Dashboard is a universal UI that comes with the Status Bar and Informer Plugins built in, and as such, Dashboard styles already come with the Informer and Status Bar styles."),(0,n.kt)("li",{parentName:"ol"},"Dashboard also ships with \u201cRemote Provider\u201d styles \u2014 you don\u2019t need to include anything besides ",(0,n.kt)("inlineCode",{parentName:"li"},"@uppy/dashboard/dist/style.css")," for Google Drive, Instagram and Dropbox to work. However, the Url and Webcam plugins still have to be included manually. Here\u2019s an example:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import Uppy from '@uppy/core'\nimport Dashboard from '@uppy/webcam'\nimport GoogleDrive from '@uppy/google-drive'\nimport Webcam from '@uppy/webcam'\nimport Url from '@uppy/url'\n\n// Core and Dashboard styles, then Webcam and Url, but not for GoogleDrive \u2014\n// those come with Dashboard\nimport '@uppy/core/dist/style.css'\nimport '@uppy/dashboard/dist/style.css'\nimport '@uppy/webcam/dist/style.css'\nimport '@uppy/url/dist/style.css'\n")),(0,n.kt)("h2",{id:"using-file-sizes-for-progress-calculation"},"Using File Sizes For Progress Calculation"),(0,n.kt)("p",null,"When possible, file sizes are now used for calculating the total progress. Before, we\u2019ve used uploaded percentage for each file. Meaning that if you were uploading four files \u2014 and three small were already uploaded, while one very large file was still in progress \u2014 Uppy might still display progress as being 90%. Long story short, Uppy now has a more accurate progress bar \ud83d\ude80"),(0,n.kt)("p",null,"Some internal details, if you are interested:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"If there are files without sizes, the average size of all other files is assumed for the unsized files."),(0,n.kt)("li",{parentName:"ol"},"If there are no files with sizes, the percentage is just based on the percentages of the unsized files.")),(0,n.kt)("img",{src:"/img/blog/0.29/progress-size-calculation.jpg"}),(0,n.kt)("h2",{id:"responsetype-for-xhr-upload"},(0,n.kt)("inlineCode",{parentName:"h2"},"responseType")," For XHR Upload"),(0,n.kt)("p",null,"When using XHR Upload, you can now configure the XMLHttpRequest ",(0,n.kt)("inlineCode",{parentName:"p"},".responseType")," value. This allows the S3 Plugin to tell Firefox not to log XML errors when getting empty responses, so it finally fixes the spurious warnings that were caused by this, see ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/transloadit/uppy/issues/518"},"#518"),"."),(0,n.kt)("p",null,"Because AwsS3 now sets ",(0,n.kt)("inlineCode",{parentName:"p"},"responseType"),": ",(0,n.kt)("inlineCode",{parentName:"p"},"'text'"),", we can no longer use the ",(0,n.kt)("inlineCode",{parentName:"p"},"responseXML")," property. We already did text based parsing for successful responses, and will now do the same for error responses."),(0,n.kt)("h2",{id:"misc-changes"},"Misc Changes"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"@uppy/core: Don't pass removed file IDs to next upload step, fixes (#1148 / @goto-bus-stop)"),(0,n.kt)("li",{parentName:"ul"},"@uppy/core: Fixed getFileType() when passed a file with an uppercase extension (#1169 / @jderrough)"),(0,n.kt)("li",{parentName:"ul"},"@uppy/companion: Use ",(0,n.kt)("inlineCode",{parentName:"li"},"createCipheriv")," instead of deprecated ",(0,n.kt)("inlineCode",{parentName:"li"},"createCipher")," (#1149 / @goto-bus-stop)"),(0,n.kt)("li",{parentName:"ul"},"@uppy/companion: Store Provider instances on ",(0,n.kt)("inlineCode",{parentName:"li"},"this.provider")," instead of ",(0,n.kt)("inlineCode",{parentName:"li"},"this[this.id]")," (@goto-bus-stop / #1174)"),(0,n.kt)("li",{parentName:"ul"},"@uppy/companion: Pin grant to known stable version (@ifedapoolarewaju / #1165)"),(0,n.kt)("li",{parentName:"ul"},"@uppy/companion: Fix \u2014 socket does not handle server.path option (#1142 / @tranvansang)"),(0,n.kt)("li",{parentName:"ul"},"@uppy/webcam: Fix a bug with Webcam video overflowing its container (68730f8a1bf731898d46883e00fed937d3ab54ab / @arturi)"),(0,n.kt)("li",{parentName:"ul"},"docs: Add ",(0,n.kt)("inlineCode",{parentName:"li"},"triggerUploadOnSubmit")," to Form docs, add docs about options of hiding upload/pause/resume/cancel buttons; talk about bundler-less polyfill use (@goto-bus-stop, @arturi)"),(0,n.kt)("li",{parentName:"ul"},"@uppy/react: Allow Dashboard props width and height to accept a string for 100% (#1129 / craigcbrunner)")),(0,n.kt)("p",null,"See the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/transloadit/uppy/blob/master/CHANGELOG.md#0290"},"full changelog (0.29)")," for more details."))}d.isMDXComponent=!0}}]);