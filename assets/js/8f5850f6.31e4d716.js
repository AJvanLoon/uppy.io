"use strict";(self.webpackChunkuppy_io=self.webpackChunkuppy_io||[]).push([[6681],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,h=d["".concat(i,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(h,s(s({ref:t},u),{},{components:n})):r.createElement(h,s({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[d]="string"==typeof e?e:a,s[1]=p;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},94083:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={},s="Custom stores",p={unversionedId:"guides/custom-stores",id:"guides/custom-stores",title:"Custom stores",description:"If your app uses a state management library such as",source:"@site/docs/guides/custom-stores.md",sourceDirName:"guides",slug:"/guides/custom-stores",permalink:"/docs/guides/custom-stores",draft:!1,editUrl:"https://github.com/transloadit/uppy.io/tree/main/docs/guides/custom-stores.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Supporting IE11",permalink:"/docs/guides/browser-support"},next:{title:"Migration guides",permalink:"/docs/guides/migration-guides"}},i={},l=[{value:"Using stores",id:"using-stores",level:2},{value:"<code>DefaultStore</code>",id:"defaultstore",level:3},{value:"<code>ReduxStore</code>",id:"reduxstore",level:3},{value:"<code>opts.store</code>",id:"optsstore",level:4},{value:"<code>opts.id</code>",id:"optsid",level:4},{value:"<code>opts.selector</code>",id:"optsselector",level:4},{value:"Implementing Stores",id:"implementing-stores",level:2}],u={toc:l},d="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"custom-stores"},"Custom stores"),(0,a.kt)("p",null,"If your app uses a state management library such as\n",(0,a.kt)("a",{parentName:"p",href:"https://redux.js.org"},"Redux"),", it can be useful to have Uppy store its state\nthere instead\u2014that way, you could write custom uploader UI components in the\nsame way as the other components in the application."),(0,a.kt)("p",null,"Uppy comes with two state management solutions (stores):"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"@uppy/store-default"),", a basic object-based store."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"@uppy/store-redux"),", a store that uses a key in a Redux store.")),(0,a.kt)("p",null,"You can also use a third-party store:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/rimlin/uppy-store-ngrx/"},"uppy-store-ngrx"),", keeping Uppy\nstate in a key in an ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/ngrx/platform"},"Ngrx")," store for use\nwith Angular.")),(0,a.kt)("h2",{id:"using-stores"},"Using stores"),(0,a.kt)("p",null,"To use a store, pass an instance to the\n",(0,a.kt)("a",{parentName:"p",href:"/docs/uppy#store-defaultstore"},(0,a.kt)("inlineCode",{parentName:"a"},"store")," option")," in the Uppy constructor:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import DefaultStore from '@uppy/store-default';\n\nconst uppy = new Uppy({\n    store: new DefaultStore(),\n});\n")),(0,a.kt)("h3",{id:"defaultstore"},(0,a.kt)("inlineCode",{parentName:"h3"},"DefaultStore")),(0,a.kt)("p",null,"Uppy uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"DefaultStore")," by default! You do not need to do anything to use\nit. It does not take any options."),(0,a.kt)("h3",{id:"reduxstore"},(0,a.kt)("inlineCode",{parentName:"h3"},"ReduxStore")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ReduxStore")," stores Uppy state on a key in an existing Redux store. The\n",(0,a.kt)("inlineCode",{parentName:"p"},"ReduxStore")," dispatches ",(0,a.kt)("inlineCode",{parentName:"p"},"uppy/STATE_UPDATE")," actions to update state. When the\nstate in Redux changes, it notifies Uppy. This way, you get most of the benefits\nof Redux, including support for the Redux Devtools and time traveling!"),(0,a.kt)("p",null,"Checkout our\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/transloadit/uppy/tree/main/examples/redux"},"Redux example"),"\nfor a working demo."),(0,a.kt)("h4",{id:"optsstore"},(0,a.kt)("inlineCode",{parentName:"h4"},"opts.store")),(0,a.kt)("p",null,"Pass a Redux store instance, from ",(0,a.kt)("inlineCode",{parentName:"p"},"Redux.createStore"),". This instance should have\nthe Uppy reducer mounted somewhere already."),(0,a.kt)("h4",{id:"optsid"},(0,a.kt)("inlineCode",{parentName:"h4"},"opts.id")),(0,a.kt)("p",null,"By default, the ",(0,a.kt)("inlineCode",{parentName:"p"},"ReduxStore")," assumes Uppy state is stored on a ",(0,a.kt)("inlineCode",{parentName:"p"},"state.uppy[id]"),"\nkey. ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," is randomly generated by the store constructor, but can be specified\nby passing an ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," option if it should be predictable."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"ReduxStore({\n    store,\n    id: 'avatarUpload',\n});\n")),(0,a.kt)("h4",{id:"optsselector"},(0,a.kt)("inlineCode",{parentName:"h4"},"opts.selector")),(0,a.kt)("p",null,"If you\u2019d rather not store the Uppy state under the ",(0,a.kt)("inlineCode",{parentName:"p"},"state.uppy")," key at all, use\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"selector")," option to the ",(0,a.kt)("inlineCode",{parentName:"p"},"ReduxStore")," constructor to tell it where to find\nstate instead:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const uppy = new Uppy({\n    store: ReduxStore({\n        store,\n        id: 'avatarUpload',\n        selector: (state) => state.pages.profile.uppy.avatarUpload,\n    }),\n});\n")),(0,a.kt)("p",null,"Note that when specifying a custom selector, you ",(0,a.kt)("strong",{parentName:"p"},"must")," also specify a custom\nstore ID. The store ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," tells the reducer in which property it should put\nUppy\u2019s state. The selector must then take the state from that property. In the\nexample, we set the ID to ",(0,a.kt)("inlineCode",{parentName:"p"},"avatarUpload")," and take the state from the\n",(0,a.kt)("inlineCode",{parentName:"p"},"[reducer mount path].avatarUpload"),"."),(0,a.kt)("p",null,"If your app uses ",(0,a.kt)("a",{parentName:"p",href:"https://npmjs.com/package/reselect"},(0,a.kt)("inlineCode",{parentName:"a"},"reselect")),", its selectors\nwork well with this!"),(0,a.kt)("h2",{id:"implementing-stores"},"Implementing Stores"),(0,a.kt)("p",null,"An Uppy store is an object with three methods."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"getState()")," - Return the current state object.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"setState(patch)")," - Merge the object ",(0,a.kt)("inlineCode",{parentName:"p"},"patch")," into the current state.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"subscribe(listener)")," - Call ",(0,a.kt)("inlineCode",{parentName:"p"},"listener")," whenever the state changes. ",(0,a.kt)("inlineCode",{parentName:"p"},"listener"),"\nis a function that should receive three parameters:\n",(0,a.kt)("inlineCode",{parentName:"p"},"(prevState, nextState, patch)")),(0,a.kt)("p",{parentName:"li"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"subscribe()")," method should return a function that \u201cunsubscribes\u201d\n(removes) the ",(0,a.kt)("inlineCode",{parentName:"p"},"listener"),"."))),(0,a.kt)("p",null,"The default store implementation, for example, looks a bit like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"function createDefaultStore() {\n    let state = {};\n    const listeners = new Set();\n\n    return {\n        getState: () => state,\n        setState: (patch) => {\n            const prevState = state;\n            const nextState = { ...prevState, ...patch };\n\n            state = nextState;\n\n            listeners.forEach((listener) => {\n                listener(prevState, nextState, patch);\n            });\n        },\n        subscribe: (listener) => {\n            listeners.add(listener);\n            return () => listeners.remove(listener);\n        },\n    };\n}\n")),(0,a.kt)("p",null,"A pattern like this, where users can pass options via a function call if\nnecessary, is recommended."),(0,a.kt)("p",null,"See the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/transloadit/uppy/tree/main/packages/%40uppy/store-default"},"@uppy/store-default"),"\npackage for more inspiration."))}c.isMDXComponent=!0}}]);