"use strict";(self.webpackChunkuppy_io=self.webpackChunkuppy_io||[]).push([[2112],{21201:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>a,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var o=n(74848),s=n(28453);const r={title:"Adding Custom Providers: Step by Step Tutorial to add Custom Providers",date:new Date("2020-06-08T00:00:00.000Z"),author:"ife",published:!1,slug:"2020/03/custom-providers"},i=void 0,l={permalink:"/blog/2020/03/custom-providers",editUrl:"https://github.com/transloadit/uppy.io/tree/main/blog/2020-03-custom-providers.md",source:"@site/blog/2020-03-custom-providers.md",title:"Adding Custom Providers: Step by Step Tutorial to add Custom Providers",description:"In this post we will be going through a step by step tutorial on how to develop,",date:"2020-06-08T00:00:00.000Z",tags:[],readingTime:8.94,hasTruncateMarker:!0,authors:[{name:"ife"}],frontMatter:{title:"Adding Custom Providers: Step by Step Tutorial to add Custom Providers",date:"2020-06-08T00:00:00.000Z",author:"ife",published:!1,slug:"2020/03/custom-providers"},unlisted:!1,prevItem:{title:"Image Editor \ud83c\udf08",permalink:"/blog/2020/07/1.18-image-editor"},nextItem:{title:"Uppy 1.11 \u2014 1.13: Dark Mode, custom meta fields and Google Docs in Companion",permalink:"/blog/2020/04/1.13"}},a={authorsImageUrls:[void 0]},d=[{value:"What are Provider Plugins?",id:"what-are-provider-plugins",level:2},{value:"Creating a Custom Companion Provider",id:"creating-a-custom-companion-provider",level:2},{value:"Setting up Companion",id:"setting-up-companion",level:3},{value:"Setting up Unsplash API",id:"setting-up-unsplash-api",level:3},{value:"Writing the custom provider",id:"writing-the-custom-provider",level:3},{value:"Creating a Custom Uppy Plugin",id:"creating-a-custom-uppy-plugin",level:2}];function p(t){const e={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:["In this post we will be going through a step by step tutorial on how to develop,\nand add custom providers to Uppy and Companion. For the purpose of this tutorial\nwe will be building a custom provider for ",(0,o.jsx)(e.a,{href:"https://unsplash.com/",children:"Unsplash"}),"."]}),"\n",(0,o.jsx)(e.h2,{id:"what-are-provider-plugins",children:"What are Provider Plugins?"}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsx)(e.p,{children:"Provider Plugins help you connect to your accounts with remote file storage\nproviders such as Dropbox, Google Drive, Instagram and remote URLs."}),"\n",(0,o.jsxs)(e.p,{children:["They work tightly with\n",(0,o.jsx)(e.a,{href:"https://www.npmjs.com/package/@uppy/companion",children:"Companion"})," \u2014 Uppy's\nserver-to-server communication handler between your server and file storage\nproviders."]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["Creating a custom provider composes of two parts; ",(0,o.jsx)(e.strong,{children:"Custom Companion Provider"}),"\nand ",(0,o.jsx)(e.strong,{children:"Custom Uppy Plugin"})]}),"\n",(0,o.jsx)(e.h2,{id:"creating-a-custom-companion-provider",children:"Creating a Custom Companion Provider"}),"\n",(0,o.jsx)(e.p,{children:"On the Companion side, we need to create a Provider that receives the provider\nrelated requests that would come from Uppy."}),"\n",(0,o.jsx)(e.h3,{id:"setting-up-companion",children:"Setting up Companion"}),"\n",(0,o.jsx)(e.p,{children:"We'll start off by setting up a minimal express server."}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsx)(e.li,{children:'Create a folder named "custom-provider" and navigate into it'}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-sh",children:"mkdir custom-provider\ncd custom-provider\n"})}),"\n",(0,o.jsxs)(e.ol,{start:"2",children:["\n",(0,o.jsxs)(e.li,{children:["Run ",(0,o.jsx)(e.code,{children:"npm init"})," to setup your ",(0,o.jsx)(e.code,{children:"package.json"})," file"]}),"\n",(0,o.jsx)(e.li,{children:"install express, express-session, body-parser, request, uppy and\n@uppy/companion"}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-sh",children:"npm i -S express express-session body-parser request @uppy/companion uppy\n"})}),"\n",(0,o.jsx)(e.p,{children:"with all that done, my package.json file looks something like this:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-json",children:'{\n\t"name": "custom-provider",\n\t"dependencies": {\n\t\t"body-parser": "^1.18.2",\n\t\t"express": "^4.16.2",\n\t\t"express-session": "^1.15.6",\n\t\t"request": "^2.88.0",\n\t\t"uppy": "^1.16.1",\n\t\t"@uppy/companion": "^2.0.0"\n\t},\n\t"private": true,\n\t"scripts": {}\n}\n'})}),"\n",(0,o.jsxs)(e.ol,{start:"4",children:["\n",(0,o.jsxs)(e.li,{children:["Create a ",(0,o.jsx)(e.code,{children:"server/index.js"})," file within the project and add initiate your\nexpress server"]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"const express = require('express');\nconst companion = require('@uppy/companion');\nconst bodyParser = require('body-parser');\nconst session = require('express-session');\n\nconst app = express();\n\napp.use(bodyParser.json());\napp.use(\n\tsession({\n\t\tsecret: 'some-secret',\n\t\tresave: true,\n\t\tsaveUninitialized: true,\n\t}),\n);\n\napp.use((req, res, next) => {\n\tres.setHeader('Access-Control-Allow-Origin', req.headers.origin || '*');\n\tres.setHeader(\n\t\t'Access-Control-Allow-Methods',\n\t\t'GET, POST, OPTIONS, PUT, PATCH, DELETE',\n\t);\n\tres.setHeader(\n\t\t'Access-Control-Allow-Headers',\n\t\t'Authorization, Origin, Content-Type, Accept',\n\t);\n\tnext();\n});\n\n// initialize uppy\nconst companionOptions = {\n\tproviderOptions: {\n\t\tdropbox: {\n\t\t\tkey: 'your Dropbox key',\n\t\t\tsecret: 'your Dropbox secret',\n\t\t},\n\t},\n\tserver: {\n\t\thost: 'localhost:3020',\n\t\tprotocol: 'http',\n\t},\n\tfilePath: './output',\n\tsecret: 'some-secret',\n\tdebug: true,\n};\n\napp.use(companion.app(companionOptions));\n\n// handle 404\napp.use((req, res, next) => {\n\treturn res.status(404).json({ message: 'Not Found' });\n});\n\ncompanion.socket(app.listen(3020));\n\nconsole.log('Welcome to Companion!');\nconsole.log(`Listening on http://0.0.0.0:3020`);\n"})}),"\n",(0,o.jsx)(e.p,{children:"The code snippet above sets up an express server and plugs Companion into it.\nHowever, the Companion setup doesn't include a custom provider yet. It only\nincludes the Dropbox provider."}),"\n",(0,o.jsx)(e.p,{children:"To be sure everything is working correctly so far, you can start the server by\nrunning:"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.code,{children:"node server/index.js"})}),"\n",(0,o.jsx)(e.p,{children:"It should log the following message in the console:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-sh",children:"Welcome to Companion!\nListening on http://0.0.0.0:3020\n"})}),"\n",(0,o.jsx)(e.p,{children:"Now we need to proceed to add our custom provider."}),"\n",(0,o.jsx)(e.h3,{id:"setting-up-unsplash-api",children:"Setting up Unsplash API"}),"\n",(0,o.jsxs)(e.p,{children:["Head to Unsplash's ",(0,o.jsx)(e.a,{href:"https://unsplash.com/oauth/applications",children:"developer platform"}),"\n(you'd need to create an account if you don't already have one)."]}),"\n",(0,o.jsx)(e.p,{children:'Click "New Application" to create a new application. For the sake of this\ntutorial, I am naming my application "companion-provider". Once it is created,\nyour page should look something like this:'}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{src:n(6775).A+"",width:"2740",height:"1364"})}),"\n",(0,o.jsx)(e.h3,{id:"writing-the-custom-provider",children:"Writing the custom provider"}),"\n",(0,o.jsxs)(e.p,{children:["Back to our project directory, we are going to create a\n",(0,o.jsx)(e.code,{children:"server/customprovider.js"})," file. This will contain the code that implements the\nUnsplash provider."]}),"\n",(0,o.jsxs)(e.p,{children:["According to\n",(0,o.jsx)(e.a,{href:"https://uppy.io/docs/companion/#Adding-custom-providers",children:"the docs"}),", we need to\ncreate a class that implements the methods ",(0,o.jsx)(e.code,{children:"list"}),", ",(0,o.jsx)(e.code,{children:"download"}),", and ",(0,o.jsx)(e.code,{children:"size"}),"."]}),"\n",(0,o.jsx)(e.p,{children:"The constructor of our class will look something like this:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"class MyCustomProvider {\n\tstatic authProvider = 'google'; // the name of the OAuth provider to use (lowercased)\n\t// ...\n}\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Our ",(0,o.jsx)(e.code,{children:"list"})," method would look something like this"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"list ({ token, directory }, done) {\n  const path = directory ? `/${directory}/photos` : ''\n  const options = {\n    url: `${BASE_URL}/collections${path}`,\n    method: 'GET',\n    json: true,\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  }\n\n  request(options, (err, resp, body) => {\n    if (err) {\n      console.log(err)\n      done(err)\n      return\n    }\n\n    done(null, this._adaptData(body))\n  })\n}\n\n_adaptData (res) {\n  const data = {\n    username: null,\n    items: [],\n    nextPagePath: null\n  }\n\n  const items = res\n  items.forEach((item) => {\n    const isFolder = !!item.published_at\n    data.items.push({\n      isFolder: isFolder,\n      icon: isFolder ? item.cover_photo.urls.thumb : item.urls.thumb,\n      name: item.title || item.description,\n      mimeType: isFolder ? null : 'image/jpeg',\n      id: item.id,\n      thumbnail: isFolder ? item.cover_photo.urls.thumb : item.urls.thumb,\n      requestPath: item.id,\n      modifiedDate: item.updated_at,\n      size: null\n    })\n  })\n\n  return data\n}\n"})}),"\n",(0,o.jsxs)(e.p,{children:["the method makes an http request to the unsplash API based on the documentation\nto ",(0,o.jsx)(e.a,{href:"https://unsplash.com/documentation#list-collections",children:"list collections"})," and\n",(0,o.jsx)(e.a,{href:"https://unsplash.com/documentation#get-a-collections-photos",children:"list collection's photos"}),".\nThe ",(0,o.jsx)(e.code,{children:"_adaptData"})," method exists to help us conform to\n",(0,o.jsx)(e.a,{href:"https://uppy.io/docs/companion/#list-data",children:"the list data"})]}),"\n",(0,o.jsxs)(e.p,{children:["Our ",(0,o.jsx)(e.code,{children:"size"})," method will look something like this:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"size ({ id, token }, done) {\n  const options = {\n    url: `${BASE_URL}/photos/${id}`,\n    method: 'GET',\n    json: true,\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  }\n\n  request(options, (err, resp, body) => {\n    if (err) {\n      console.log(err)\n      done(err)\n      return\n    }\n\n    done(null, body.width * body.height)\n  })\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"Unsplash's API doesn't provide the file size, so we are estimating it by\nmultiplying the width and height of the image."}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"download"})," method will look like this:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"download ({ id, token }, onData) {\n  const options = {\n    url: `${BASE_URL}/photos/${id}`,\n    method: 'GET',\n    json: true,\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  }\n\n  request(options, (err, resp, body) => {\n    if (err) {\n      console.log(err)\n      return\n    }\n\n    const url = body.links.download\n    request.get(url)\n      .on('data', (chunk) => onData(null, chunk))\n      .on('end', () => onData(null, null))\n      .on('error', (err) => console.log(err))\n  })\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"With all of this put together the entire file would look something like this:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"const request = require('request');\n\nconst BASE_URL = 'https://api.unsplash.com';\n\nclass MyCustomProvider {\n\tstatic authProvider = 'unsplash'; // the name of the OAuth provider to use (lowercased)\n\n\tlist({ token, directory }, done) {\n\t\tconst path = directory ? `/${directory}/photos` : '';\n\t\tconst options = {\n\t\t\turl: `${BASE_URL}/collections${path}`,\n\t\t\tmethod: 'GET',\n\t\t\tjson: true,\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t},\n\t\t};\n\n\t\trequest(options, (err, resp, body) => {\n\t\t\tif (err) {\n\t\t\t\tconsole.log(err);\n\t\t\t\tdone(err);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdone(null, this._adaptData(body));\n\t\t});\n\t}\n\n\tdownload({ id, token }, onData) {\n\t\tconst options = {\n\t\t\turl: `${BASE_URL}/photos/${id}`,\n\t\t\tmethod: 'GET',\n\t\t\tjson: true,\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t},\n\t\t};\n\n\t\trequest(options, (err, resp, body) => {\n\t\t\tif (err) {\n\t\t\t\tconsole.log(err);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst url = body.links.download;\n\t\t\trequest\n\t\t\t\t.get(url)\n\t\t\t\t.on('data', (chunk) => onData(null, chunk))\n\t\t\t\t.on('end', () => onData(null, null))\n\t\t\t\t.on('error', (err) => console.log(err));\n\t\t});\n\t}\n\n\tsize({ id, token }, done) {\n\t\tconst options = {\n\t\t\turl: `${BASE_URL}/photos/${id}`,\n\t\t\tmethod: 'GET',\n\t\t\tjson: true,\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t},\n\t\t};\n\n\t\trequest(options, (err, resp, body) => {\n\t\t\tif (err) {\n\t\t\t\tconsole.log(err);\n\t\t\t\tdone(err);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdone(null, body.width * body.height);\n\t\t});\n\t}\n\n\t_adaptData(res) {\n\t\tconst data = {\n\t\t\tusername: null,\n\t\t\titems: [],\n\t\t\tnextPagePath: null,\n\t\t};\n\n\t\tconst items = res;\n\t\titems.forEach((item) => {\n\t\t\tconst isFolder = !!item.published_at;\n\t\t\tdata.items.push({\n\t\t\t\tisFolder,\n\t\t\t\ticon: isFolder ? item.cover_photo.urls.thumb : item.urls.thumb,\n\t\t\t\tname: item.title || item.description,\n\t\t\t\tmimeType: isFolder ? null : 'image/jpeg',\n\t\t\t\tid: item.id,\n\t\t\t\tthumbnail: isFolder ? item.cover_photo.urls.thumb : item.urls.thumb,\n\t\t\t\trequestPath: item.id,\n\t\t\t\tmodifiedDate: item.updated_at,\n\t\t\t\tsize: null,\n\t\t\t});\n\t\t});\n\n\t\treturn data;\n\t}\n}\n\nmodule.exports = MyCustomProvider;\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Now we can go back to ",(0,o.jsx)(e.code,{children:"server/index.js"})," to enable our custom provider:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"// initialize uppy\nconst uppyOptions = {\n\tproviderOptions: {\n\t\tdropbox: {\n\t\t\tkey: 'your Dropbox key',\n\t\t\tsecret: 'your Dropbox secret',\n\t\t},\n\t},\n\tcustomProviders: {\n\t\tmyunsplash: {\n\t\t\tconfig: {\n\t\t\t\t// source https://unsplash.com/documentation#user-authentication\n\t\t\t\tauthorize_url: 'https://unsplash.com/oauth/authorize',\n\t\t\t\taccess_url: 'https://unsplash.com/oauth/token',\n\t\t\t\toauth: 2,\n\t\t\t\tkey: 'YOUR UNSPLASH API KEY',\n\t\t\t\tsecret: 'YOUR UNSPLASH API SECRET',\n\t\t\t},\n\t\t\t// you provider module\n\t\t\tmodule: require('./customprovider'),\n\t\t},\n\t},\n\tserver: {\n\t\thost: 'localhost:3020',\n\t\tprotocol: 'http',\n\t},\n\tfilePath: './output',\n\tsecret: 'some-secret',\n\tdebug: true,\n};\n"})}),"\n",(0,o.jsxs)(e.p,{children:["You can find your unsplash API key on your Unsplash\n",(0,o.jsx)(e.a,{href:"https://unsplash.com/oauth/applications",children:"app dashboard"})]}),"\n",(0,o.jsx)(e.h2,{id:"creating-a-custom-uppy-plugin",children:"Creating a Custom Uppy Plugin"}),"\n",(0,o.jsx)(e.p,{children:"Now we need to implement the client part of this. To do this we need to\nimplement an Uppy Plugin."}),"\n",(0,o.jsxs)(e.p,{children:["First, we'll create a ",(0,o.jsx)(e.code,{children:"client/MyCustomProvider.js"})," file. Following the\ninstructions ",(0,o.jsx)(e.a,{href:"https://uppy.io/docs/writing-plugins/",children:"here"}),", our Uppy Plugin (aka\n",(0,o.jsx)(e.code,{children:"client/MyCustomProvider.js"})," file) could look something like this:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"const { UIPlugin } = require('@uppy/core');\nconst { Provider } = require('@uppy/companion-client');\nconst { ProviderViews } = require('@uppy/provider-views');\nconst { h } = require('preact');\n\nmodule.exports = class MyCustomProvider extends UIPlugin {\n\tconstructor(uppy, opts) {\n\t\tsuper(uppy, opts);\n\t\tthis.type = 'acquirer';\n\t\tthis.id = this.opts.id || 'MyCustomProvider';\n\t\tProvider.initPlugin(this, opts);\n\n\t\tthis.title = 'MyUnsplash';\n\t\tthis.icon = () => (\n\t\t\t<svg width=\"32\" height=\"32\" xmlns=\"http://www.w3.org/2000/svg\">\n\t\t\t\t<path\n\t\t\t\t\td=\"M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z\"\n\t\t\t\t\tfill=\"#000000\"\n\t\t\t\t\tfill-rule=\"nonzero\"\n\t\t\t\t/>\n\t\t\t</svg>\n\t\t);\n\n\t\tthis.provider = new Provider(uppy, {\n\t\t\tcompanionUrl: this.opts.companionUrl,\n\t\t\tcompanionHeaders: this.opts.companionHeaders,\n\t\t\tprovider: 'myunsplash',\n\t\t\tpluginId: this.id,\n\t\t});\n\n\t\tthis.files = [];\n\t\tthis.onFirstRender = this.onFirstRender.bind(this);\n\t\tthis.render = this.render.bind(this);\n\n\t\t// merge default options with the ones set by user\n\t\tthis.opts = { ...opts };\n\t}\n\n\tinstall() {\n\t\tthis.view = new ProviderViews(this, {\n\t\t\tprovider: this.provider,\n\t\t});\n\n\t\tconst { target } = this.opts;\n\t\tif (target) {\n\t\t\tthis.mount(target, this);\n\t\t}\n\t}\n\n\tuninstall() {\n\t\tthis.view.tearDown();\n\t\tthis.unmount();\n\t}\n\n\tonFirstRender() {\n\t\treturn this.view.getFolder();\n\t}\n\n\trender(state) {\n\t\treturn this.view.render(state);\n\t}\n};\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Asides from implementing the methods required by the Uppy Plugin, we are also\nimplmeneting the method ",(0,o.jsx)(e.code,{children:"onFirstRender"}),". This is because we are using the\n",(0,o.jsx)(e.a,{href:"https://www.npmjs.com/package/@uppy/provider-views",children:"@uppy/provider-views"}),"\npackage to reuse its UI componenets. The\n",(0,o.jsx)(e.a,{href:"https://www.npmjs.com/package/@uppy/provider-views",children:"@uppy/provider-views"}),"\npackage requires that our plugin implements an ",(0,o.jsx)(e.code,{children:"onFirstRender"})," method."]}),"\n",(0,o.jsxs)(e.p,{children:["We are also pre-setting a default plugin with a default object structure which\nis used by the ",(0,o.jsx)(e.code,{children:"@uppy/provider-views"})," package."]}),"\n",(0,o.jsxs)(e.p,{children:["With that done, we can now use our new plugin with Uppy. Create a file\n",(0,o.jsx)(e.code,{children:"client/main.js"})," and initiate Uppy in there like so:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"const Uppy = require('@uppy/core');\nconst Dropbox = require('@uppy/dropbox');\nconst Tus = require('@uppy/tus');\nconst Dashboard = require('@uppy/dashboard');\nconst MyCustomProvider = require('./MyCustomProvider');\n\nconst uppy = Uppy({\n\tdebug: true,\n});\n\nuppy.use(Dropbox, {\n\tcompanionUrl: 'http://localhost:3020',\n});\n\nuppy.use(MyCustomProvider, {\n\tcompanionUrl: 'http://localhost:3020',\n});\n\nuppy.use(Dashboard, {\n\tinline: true,\n\ttarget: 'body',\n\tplugins: ['Dropbox', 'MyCustomProvider'],\n});\n\nuppy.use(Tus, { endpoint: 'https://master.tus.io/files/' });\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Now we need to bundle the file so it can be loaded on the browser. To do this,\nwe'd install ",(0,o.jsx)(e.a,{href:"https://www.npmjs.com/package/budo",children:"budo"}),":"]}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:["In the root project directory, run ",(0,o.jsx)(e.code,{children:"npm install budo -g"}),"."]}),"\n",(0,o.jsxs)(e.li,{children:["Create a ",(0,o.jsx)(e.code,{children:"babel.config.js"})," file looking like so:"]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"module.exports = (api) => {\n\tapi.env('test');\n\treturn {\n\t\tpresets: [\n\t\t\t[\n\t\t\t\t'@babel/preset-env',\n\t\t\t\t{\n\t\t\t\t\tmodules: false,\n\t\t\t\t\tloose: true,\n\t\t\t\t},\n\t\t\t],\n\t\t],\n\t\tplugins: [['@babel/plugin-transform-react-jsx', { pragma: 'h' }]].filter(\n\t\t\tBoolean,\n\t\t),\n\t};\n};\n"})}),"\n",(0,o.jsxs)(e.ol,{start:"3",children:["\n",(0,o.jsxs)(e.li,{children:["Add an ",(0,o.jsx)(e.code,{children:"index.html"})," file (in the root of the project) that uses a bundle file\nlike so:"]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-html",children:'<!doctype html>\n<html>\n\t<head>\n\t\t<meta charset="utf-8" />\n\t\t<meta name="viewport" content="width=device-width, initial-scale=1" />\n\t\t<title>Uppy Custom provider Example</title>\n\t\t<link\n\t\t\thref="https://releases.transloadit.com/uppy/v1.15.0/uppy.min.css"\n\t\t\trel="stylesheet"\n\t\t/>\n\t</head>\n\t<body>\n\t\t<script src="bundle.js"><\/script>\n\t</body>\n</html>\n'})}),"\n",(0,o.jsxs)(e.ol,{start:"4",children:["\n",(0,o.jsxs)(e.li,{children:["Create the bundle file by running\n",(0,o.jsx)(e.code,{children:"budo client/main.js:bundle.js -- -t babelify"}),". This will bundle your\n",(0,o.jsx)(e.code,{children:"client"})," side work and have it running on a local server. Please check the\nconsole log to see on what port the server is running. As at the time of this\nwriting, it defaults to ",(0,o.jsx)(e.code,{children:"9966"})," (URL will be ",(0,o.jsx)(e.a,{href:"http://localhost:9966/",children:"http://localhost:9966/"}),")."]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"You can now load the URL of your client on your browser to see it running. When\nI run mine, it looks something like this:"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{src:n(85584).A+"",width:"1518",height:"1130"})}),"\n",(0,o.jsxs)(e.p,{children:["In order to use this with our Companion implementation, we need to also start\nour Companion server by running ",(0,o.jsx)(e.code,{children:"node server/index.js"}),"."]}),"\n",(0,o.jsxs)(e.p,{children:["Congrats! \ud83c\udf89We have completed our custom plugin at this point. For an example\nsource code on this tutorial, please see the\n",(0,o.jsx)(e.a,{href:"https://github.com/transloadit/uppy/tree/master/examples/custom-provider",children:"custom provider example"}),"."]})]})}function c(t={}){const{wrapper:e}={...(0,s.R)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(p,{...t})}):p(t)}},85584:(t,e,n)=>{n.d(e,{A:()=>o});const o=n.p+"assets/images/dashboard-preview-e73c4320ea02d4ef307f55d5f852aaca.png"},6775:(t,e,n)=>{n.d(e,{A:()=>o});const o=n.p+"assets/images/unsplash-api-dashboard-f7e25bbc843dda7e930e425d1ffcac5b.png"},28453:(t,e,n)=>{n.d(e,{R:()=>i,x:()=>l});var o=n(96540);const s={},r=o.createContext(s);function i(t){const e=o.useContext(r);return o.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function l(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:i(t.components),o.createElement(r.Provider,{value:e},t.children)}}}]);