"use strict";(self.webpackChunkuppy_io=self.webpackChunkuppy_io||[]).push([[747],{59828:(e,n,t)=>{t.d(n,{Z:()=>d});var s=t(67294),o=t(84316),i=t(38555),a=t(56482),r=t(85893);const{version:l}=a;function d(e){let{children:n,uppyCssName:t="uppy.min.css",uppyJsName:a="uppy.min.mjs"}=e,d=[];s.Children.toArray(n).forEach((e=>{d=[...d,...String(e).trim().split("\n").map((e=>e.trim()))]}));const c=d.map((e=>`  ${e}`)).join("\n"),h=`https://releases.transloadit.com/uppy/v${l}/${a}`,p=`\x3c!-- 1. Add CSS to \`<head>\` --\x3e\n<link href="https://releases.transloadit.com/uppy/v${l}/${t}" rel="stylesheet">\n\n\x3c!-- 2. Initialize --\x3e\n<div id="uppy"></div>\n\n<script type="module">\n${c.replace(/{{UPPY_JS_URL}}/g,h)}\n<\/script>\n`;return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(i.Z,{type:"caution",children:[(0,r.jsx)("p",{children:"The bundle consists of most Uppy plugins, so this method is not recommended for production, as your users will have to download all plugins when you are likely using only a few."}),(0,r.jsx)("p",{children:"It can be useful to speed up your development environment, so don't hesitate to use it to get you started."})]}),(0,r.jsx)(o.Z,{language:"html",children:p})]})}},58802:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>d,default:()=>x,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var s=t(85893),o=t(11151),i=t(22808),a=t(30433),r=t(59828);const l={sidebar_position:3,slug:"/aws-s3"},d="AWS S3 (legacy)",c={id:"uploader/aws-s3",title:"AWS S3 (legacy)",description:"The @uppy/aws-s3 plugin can be used to upload files directly to a S3 bucket or",source:"@site/docs/uploader/aws-s3.mdx",sourceDirName:"uploader",slug:"/aws-s3",permalink:"/docs/aws-s3",draft:!1,unlisted:!1,editUrl:"https://github.com/transloadit/uppy.io/tree/main/docs/uploader/aws-s3.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,slug:"/aws-s3"},sidebar:"tutorialSidebar",previous:{title:"Tus",permalink:"/docs/tus"},next:{title:"AWS S3",permalink:"/docs/aws-s3-multipart"}},h={},p=[{value:"When should I use it?",id:"when-should-i-use-it",level:2},{value:"Install",id:"install",level:2},{value:"Use",id:"use",level:2},{value:"With a AWS S3 bucket",id:"with-a-aws-s3-bucket",level:3},{value:"With a DigitalOcean Spaces bucket",id:"with-a-digitalocean-spaces-bucket",level:3},{value:"With a Google Cloud Storage bucket",id:"with-a-google-cloud-storage-bucket",level:3},{value:"Use with your own server",id:"use-with-your-own-server",level:3},{value:"Use with Companion",id:"use-with-companion",level:3},{value:"Options",id:"options",level:2},{value:"<code>id</code>",id:"id",level:4},{value:"<code>companionUrl</code>",id:"companionurl",level:4},{value:"<code>companionHeaders</code>",id:"companionheaders",level:4},{value:"<code>allowedMetaFields</code>",id:"allowedmetafields",level:4},{value:"<code>getUploadParameters(file)</code>",id:"getuploadparametersfile",level:4},{value:"<code>timeout</code>",id:"timeout",level:4},{value:"<code>limit</code>",id:"limit",level:4},{value:"<code>getResponseData(responseText, response)</code>",id:"getresponsedataresponsetext-response",level:4},{value:"<code>locale: {}</code>",id:"locale-",level:4},{value:"Frequently Asked Questions",id:"frequently-asked-questions",level:2},{value:"How can I generate a presigned URL server-side?",id:"how-can-i-generate-a-presigned-url-server-side",level:3},{value:"How can I retrieve the presigned parameters of the uploaded file?",id:"how-can-i-retrieve-the-presigned-parameters-of-the-uploaded-file",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"aws-s3-legacy",children:"AWS S3 (legacy)"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"@uppy/aws-s3"})," plugin can be used to upload files directly to a S3 bucket or\na S3-compatible provider, such as Google Cloud Storage or DigitalOcean Spaces.\nUploads can be signed using either ",(0,s.jsx)(n.a,{href:"/docs/companion",children:"Companion"})," or a custom\nsigning function."]}),"\n",(0,s.jsx)(n.p,{children:"This documents the legacy version of this plugin that we plan to remove on the\nnext version."}),"\n",(0,s.jsx)(n.h2,{id:"when-should-i-use-it",children:"When should I use it?"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Not sure which uploader is best for you? Read\n\u201c",(0,s.jsx)(n.a,{href:"/docs/guides/choosing-uploader",children:"Choosing the uploader you need"}),"\u201d."]})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["This plugin is deprecated, you should switch to using the\n",(0,s.jsx)(n.a,{href:"/docs/aws-s3-multipart",children:"modern version of this plugin"}),"."]})}),"\n",(0,s.jsxs)(n.p,{children:["You can use this plugin when you prefer a ",(0,s.jsx)(n.em,{children:"client-to-storage"})," over a\n",(0,s.jsx)(n.em,{children:"client-to-server-to-storage"})," (such as ",(0,s.jsx)(n.a,{href:"/docs/transloadit",children:"Transloadit"})," or\n",(0,s.jsx)(n.a,{href:"/docs/tus",children:"Tus"}),") setup. This may in some cases be preferable, for instance, to\nreduce costs or the complexity of running a server and load balancer with\n",(0,s.jsx)(n.a,{href:"/docs/tus",children:"Tus"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"This plugin can be used with AWS S3, DigitalOcean Spaces, Google Cloud Storage,\nor any S3-compatible provider. Although all S3-compatible providers are\nsupported, we don\u2019t test against them, this plugin was developed against S3 so a\nsmall risk is involved in using the others."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"@uppy/aws-s3"})," is best suited for small files and/or lots of files. If you are\nplanning to upload mostly large files (100\xa0MB+), consider using\n",(0,s.jsx)(n.a,{href:"/docs/aws-s3-multipart",children:(0,s.jsx)(n.code,{children:"@uppy/aws-s3-multipart"})}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"install",children:"Install"}),"\n",(0,s.jsxs)(i.Z,{children:[(0,s.jsx)(a.Z,{value:"npm",label:"NPM",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"npm install @uppy/aws-s3\n"})})}),(0,s.jsx)(a.Z,{value:"yarn",label:"Yarn",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"yarn add @uppy/aws-s3\n"})})}),(0,s.jsx)(a.Z,{value:"cdn",label:"CDN",children:(0,s.jsx)(r.Z,{children:'\n        import { Uppy, AwsS3 } from "{{UPPY_JS_URL}}"\n        new Uppy().use(AwsS3, { /* see options */ })\n      '})})]}),"\n",(0,s.jsx)(n.h2,{id:"use",children:"Use"}),"\n",(0,s.jsx)(n.p,{children:"A quick overview of the complete API."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"{10} showLineNumbers",children:"import Uppy from '@uppy/core';\nimport Dashboard from '@uppy/dashboard';\nimport AwsS3 from '@uppy/aws-s3';\n\nimport '@uppy/core/dist/style.min.css';\nimport '@uppy/dashboard/dist/style.min.css';\n\nconst uppy = new Uppy()\n\t.use(Dashboard, { inline: true, target: 'body' })\n\t.use(AwsS3, { companionUrl: 'http://companion.uppy.io' });\n"})}),"\n",(0,s.jsx)(n.h3,{id:"with-a-aws-s3-bucket",children:"With a AWS S3 bucket"}),"\n",(0,s.jsx)(n.p,{children:"To use this plugin with S3 we need to setup a bucket with the right permissions\nand CORS settings."}),"\n",(0,s.jsx)(n.p,{children:"S3 buckets do not allow public uploads for security reasons. To allow Uppy and\nthe browser to upload directly to a bucket, its CORS permissions need to be\nconfigured."}),"\n",(0,s.jsxs)(n.p,{children:["CORS permissions can be found in the\n",(0,s.jsx)(n.a,{href:"https://console.aws.amazon.com/s3/home",children:"S3 Management Console"}),". Click the\nbucket that will receive the uploads, then go into the ",(0,s.jsx)(n.code,{children:"Permissions"})," tab and\nselect the ",(0,s.jsx)(n.code,{children:"CORS configuration"})," button. A JSON document will be shown that\ndefines the CORS configuration. (AWS used to use XML but now only allow JSON).\nMore information about the\n",(0,s.jsx)(n.a,{href:"https://docs.amazonaws.cn/en_us/AmazonS3/latest/userguide/ManageCorsUsing.html",children:"S3 CORS format here"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The configuration required for Uppy and Companion is this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\n\t{\n\t\t"AllowedOrigins": ["https://my-app.com"],\n\t\t"AllowedMethods": ["GET", "POST"],\n\t\t"MaxAgeSeconds": 3000,\n\t\t"AllowedHeaders": [\n\t\t\t"Authorization",\n\t\t\t"x-amz-date",\n\t\t\t"x-amz-content-sha256",\n\t\t\t"content-type"\n\t\t]\n\t},\n\t{\n\t\t"AllowedOrigins": ["*"],\n\t\t"AllowedMethods": ["GET"],\n\t\t"MaxAgeSeconds": 3000\n\t}\n]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["A good practice is to use two CORS rules: one for viewing the uploaded files,\nand one for uploading files. This is done above where the first object in the\narray defines the rules for uploading, and the second for viewing. The example\nabove ",(0,s.jsx)(n.strong,{children:"makes files publicly viewable"}),". You can change it according to your\nneeds."]}),"\n",(0,s.jsxs)(n.p,{children:["If you are using an IAM policy to allow access to the S3 bucket, the policy must\nhave at least the ",(0,s.jsx)(n.code,{children:"s3:PutObject"})," and ",(0,s.jsx)(n.code,{children:"s3:PutObjectAcl"})," permissions scoped to the\nbucket in question. In-depth documentation about CORS rules is available on the\n",(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html",children:"AWS documentation site"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"with-a-digitalocean-spaces-bucket",children:"With a DigitalOcean Spaces bucket"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Checkout the\n",(0,s.jsx)(n.a,{href:"https://github.com/transloadit/uppy/tree/main/examples/digitalocean-spaces",children:"DigitalOcean Spaces example"}),"\nin the Uppy repository for a complete, runnable example."]})}),"\n",(0,s.jsxs)(n.p,{children:["DigitalOcean Spaces is S3-compatible so you only need to change the endpoint and\nbucket. Make sure you have a ",(0,s.jsx)(n.code,{children:"key"})," and ",(0,s.jsx)(n.code,{children:"secret"}),". If not, refer to\n\u201c",(0,s.jsx)(n.a,{href:"https://www.digitalocean.com/community/tutorials/how-to-create-a-digitalocean-space-and-api-key",children:"How To Create a DigitalOcean Space and API Key"}),"\u201d."]}),"\n",(0,s.jsxs)(n.p,{children:["When using ",(0,s.jsx)(n.a,{href:"/docs/companion",children:"Companion"})," as standalone, you can set these as\nenvironment variables:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'export COMPANION_AWS_KEY="xxx"\nexport COMPANION_AWS_SECRET="xxx"\nexport COMPANION_AWS_REGION="us-east-1"\nexport COMPANION_AWS_ENDPOINT="https://{region}.digitaloceanspaces.com"\nexport COMPANION_AWS_BUCKET="my-space-name"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"{region}"})," string will be replaced by the contents of the\n",(0,s.jsx)(n.code,{children:"COMPANION_AWS_REGION"})," environment variable."]}),"\n",(0,s.jsxs)(n.p,{children:["When using ",(0,s.jsx)(n.a,{href:"/docs/companion",children:"Companion"})," as an Express integration, configure the\n",(0,s.jsx)(n.code,{children:"s3"})," options:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const options = {\n\ts3: {\n\t\tkey: 'xxx',\n\t\tsecret: 'xxx',\n\t\tbucket: 'my-space-name',\n\t\tregion: 'us-east-1',\n\t\tendpoint: 'https://{region}.digitaloceanspaces.com',\n\t},\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"with-a-google-cloud-storage-bucket",children:"With a Google Cloud Storage bucket"}),"\n",(0,s.jsxs)(n.p,{children:["For the ",(0,s.jsx)(n.code,{children:"@uppy/aws-s3"})," plugin to be able to upload to a GCS bucket, it needs the\nInteroperability setting enabled. You can enable the Interoperability setting\nand\n",(0,s.jsx)(n.a,{href:"https://cloud.google.com/storage/docs/migrating#keys",children:"generate interoperable storage access keys"}),"\nby going to ",(0,s.jsx)(n.a,{href:"https://console.cloud.google.com/storage",children:"Google Cloud Storage"})," \xbb\nSettings \xbb Interoperability. Then set the environment variables for Companion\nlike this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'export COMPANION_AWS_ENDPOINT="https://storage.googleapis.com"\nexport COMPANION_AWS_BUCKET="YOUR-GCS-BUCKET-NAME"\nexport COMPANION_AWS_KEY="GOOGxxxxxxxxx" # The Access Key\nexport COMPANION_AWS_SECRET="YOUR-GCS-SECRET" # The Secret\n'})}),"\n",(0,s.jsx)(n.p,{children:"You do not need to configure the region with GCS."}),"\n",(0,s.jsxs)(n.p,{children:["You also need to configure CORS with their HTTP API. If you haven\u2019t done this\nalready, see\n",(0,s.jsx)(n.a,{href:"https://cloud.google.com/storage/docs/configuring-cors#Configuring-CORS-on-a-Bucket",children:"Configuring CORS on a Bucket"}),"\nin the GCS documentation, or follow the steps below to do it using Google\u2019s API\nplayground."]}),"\n",(0,s.jsx)(n.p,{children:"The JSON format consists of an array of CORS configuration objects. For\ninstance:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n\t"cors": [\n\t\t{\n\t\t\t"origin": ["https://my-app.com"],\n\t\t\t"method": ["GET", "POST"],\n\t\t\t"maxAgeSeconds": 3000\n\t\t},\n\t\t{\n\t\t\t"origin": ["*"],\n\t\t\t"method": ["GET"],\n\t\t\t"maxAgeSeconds": 3000\n\t\t}\n\t]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["When using presigned ",(0,s.jsx)(n.code,{children:"PUT"})," uploads, replace the ",(0,s.jsx)(n.code,{children:'"POST"'})," method by ",(0,s.jsx)(n.code,{children:'"PUT"'})," in\nthe first entry."]}),"\n",(0,s.jsxs)(n.p,{children:["If you have the ",(0,s.jsx)(n.a,{href:"https://cloud.google.com/storage/docs/gsutil",children:"gsutil"}),"\ncommand-line tool, you can apply this configuration using the\n",(0,s.jsx)(n.a,{href:"https://cloud.google.com/storage/docs/configuring-cors#configure-cors-bucket",children:"gsutil cors"}),"\ncommand."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"gsutil cors set THAT-FILE.json gs://BUCKET-NAME\n"})}),"\n",(0,s.jsx)(n.p,{children:"Otherwise, you can manually apply it through the OAuth playground:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Get a temporary API token from the\n",(0,s.jsx)(n.a,{href:"https://developers.google.com/oauthplayground/",children:"Google OAuth2.0 playground"})]}),"\n",(0,s.jsxs)(n.li,{children:["Select the ",(0,s.jsx)(n.code,{children:"Cloud Storage JSON API v1"})," \xbb ",(0,s.jsx)(n.code,{children:"devstorage.full_control"})," scope"]}),"\n",(0,s.jsxs)(n.li,{children:["Press ",(0,s.jsx)(n.code,{children:"Authorize APIs"})," and allow access"]}),"\n",(0,s.jsxs)(n.li,{children:["Click ",(0,s.jsx)(n.code,{children:"Step 3 - Configure request to API"})]}),"\n",(0,s.jsxs)(n.li,{children:["Configure it as follows:","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"HTTP Method: PATCH"}),"\n",(0,s.jsxs)(n.li,{children:["Request URI: ",(0,s.jsx)(n.code,{children:"https://www.googleapis.com/storage/v1/b/YOUR_BUCKET_NAME"})]}),"\n",(0,s.jsx)(n.li,{children:"Content-Type: application/json (should be the default)"}),"\n",(0,s.jsxs)(n.li,{children:["Press ",(0,s.jsx)(n.code,{children:"Enter request body"})," and input your CORS configuration"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Press ",(0,s.jsx)(n.code,{children:"Send the request"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"use-with-your-own-server",children:"Use with your own server"}),"\n",(0,s.jsxs)(n.p,{children:["The recommended approach is to integrate ",(0,s.jsx)(n.code,{children:"@uppy/aws-s3"})," with your own server.\nYou will need to do the following things:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Setup a bucket"}),"\n",(0,s.jsxs)(n.li,{children:["Create endpoints in your server. You can create them as edge functions (such\nas AWS Lambdas), inside Next.js as an API route, or wherever your server runs","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"POST"})," > ",(0,s.jsx)(n.code,{children:"/uppy/s3"}),": get upload parameters"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/transloadit/uppy/blob/main/examples/aws-nodejs/public/index.html",children:"Setup Uppy"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"use-with-companion",children:"Use with Companion"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"/docs/companion",children:"Companion"})," has S3 routes built-in for a plug-and-play\nexperience with Uppy."]}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["Generally it\u2019s better for access control, observability, and scaling to\nintegrate ",(0,s.jsx)(n.code,{children:"@uppy/aws-s3"})," with your own server. You may want to use\n",(0,s.jsx)(n.a,{href:"/docs/companion",children:"Companion"})," for creating, signing, and completing your S3\nuploads if you already need Companion for remote files (such as from Google\nDrive). Otherwise it\u2019s not worth the hosting effort."]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"{10} showLineNumbers",children:"import Uppy from '@uppy/core';\nimport Dashboard from '@uppy/dashboard';\nimport AwsS3 from '@uppy/aws-s3';\n\nimport '@uppy/core/dist/style.min.css';\nimport '@uppy/dashboard/dist/style.min.css';\n\nconst uppy = new Uppy.use(Dashboard, { inline: true, target: 'body' }).use(\n\tAwsS3,\n\t{ companionUrl: 'http://companion.uppy.io' },\n);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"@uppy/aws-s3"})," plugin has the following configurable options:"]}),"\n",(0,s.jsx)(n.h4,{id:"id",children:(0,s.jsx)(n.code,{children:"id"})}),"\n",(0,s.jsxs)(n.p,{children:["A unique identifier for this plugin (",(0,s.jsx)(n.code,{children:"string"}),", default: ",(0,s.jsx)(n.code,{children:"'AwsS3'"}),")."]}),"\n",(0,s.jsx)(n.h4,{id:"companionurl",children:(0,s.jsx)(n.code,{children:"companionUrl"})}),"\n",(0,s.jsxs)(n.p,{children:["Companion instance to use for signing S3 uploads (",(0,s.jsx)(n.code,{children:"string"}),", default: ",(0,s.jsx)(n.code,{children:"null"}),")."]}),"\n",(0,s.jsx)(n.h4,{id:"companionheaders",children:(0,s.jsx)(n.code,{children:"companionHeaders"})}),"\n",(0,s.jsxs)(n.p,{children:["Custom headers that should be sent along to ",(0,s.jsx)(n.a,{href:"/docs/companion",children:"Companion"})," on\nevery request (",(0,s.jsx)(n.code,{children:"Object"}),", default: ",(0,s.jsx)(n.code,{children:"{}"}),")."]}),"\n",(0,s.jsx)(n.h4,{id:"allowedmetafields",children:(0,s.jsx)(n.code,{children:"allowedMetaFields"})}),"\n",(0,s.jsxs)(n.p,{children:["Pass an array of field names to limit the metadata fields that will be added to\nupload as query parameters (",(0,s.jsx)(n.code,{children:"Array"}),", default: ",(0,s.jsx)(n.code,{children:"null"}),")."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Set this to ",(0,s.jsx)(n.code,{children:"['name']"})," to only send the ",(0,s.jsx)(n.code,{children:"name"})," field."]}),"\n",(0,s.jsxs)(n.li,{children:["Set this to ",(0,s.jsx)(n.code,{children:"null"})," (the default) to send ",(0,s.jsx)(n.em,{children:"all"})," metadata fields."]}),"\n",(0,s.jsxs)(n.li,{children:["Set this to an empty array ",(0,s.jsx)(n.code,{children:"[]"})," to not send any fields."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"getuploadparametersfile",children:(0,s.jsx)(n.code,{children:"getUploadParameters(file)"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["When using ",(0,s.jsx)(n.a,{href:"/docs/companion",children:"Companion"})," to sign S3 uploads, do not define this\noption."]})}),"\n",(0,s.jsxs)(n.p,{children:["A function that returns upload parameters for a file (",(0,s.jsx)(n.code,{children:"Promise"}),", default:\n",(0,s.jsx)(n.code,{children:"null"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["Parameters should be returned as an object, or as a ",(0,s.jsx)(n.code,{children:"Promise"})," that fulfills with\nan object, with keys ",(0,s.jsx)(n.code,{children:"{ method, url, fields, headers }"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"method"})," field is the HTTP method to be used for the upload. This should\nbe one of either ",(0,s.jsx)(n.code,{children:"PUT"})," or ",(0,s.jsx)(n.code,{children:"POST"}),", depending on the type of upload used."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"url"})," field is the URL to which the upload request will be sent. When\nusing a presigned PUT upload, this should be the URL to the S3 object with\nsigning parameters included in the query string. When using a POST upload with\na policy document, this should be the root URL of the bucket."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"fields"})," field is an object with form fields to send along with the upload\nrequest. For presigned PUT uploads, this should be left empty."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"headers"})," field is an object with request headers to send along with the\nupload request. When using a presigned PUT upload, it\u2019s a good idea to provide\n",(0,s.jsx)(n.code,{children:"headers['content-type']"}),". That will make sure that the request uses the same\ncontent-type that was used to generate the signature. Without it, the browser\nmay decide on a different content-type instead, causing S3 to reject the\nupload."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"timeout",children:(0,s.jsx)(n.code,{children:"timeout"})}),"\n",(0,s.jsxs)(n.p,{children:["When no upload progress events have been received for this amount of\nmilliseconds, assume the connection has an issue and abort the upload (",(0,s.jsx)(n.code,{children:"number"}),",\ndefault: ",(0,s.jsx)(n.code,{children:"30_000"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["This is passed through to ",(0,s.jsx)(n.a,{href:"/docs/xhr-upload#timeout-30-1000",children:"XHRUpload"}),"; see its\ndocumentation page for details. Set to ",(0,s.jsx)(n.code,{children:"0"})," to disable this check."]}),"\n",(0,s.jsx)(n.h4,{id:"limit",children:(0,s.jsx)(n.code,{children:"limit"})}),"\n",(0,s.jsxs)(n.p,{children:["Limit the amount of uploads going on at the same time (",(0,s.jsx)(n.code,{children:"number"}),", default: ",(0,s.jsx)(n.code,{children:"5"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["Setting this to ",(0,s.jsx)(n.code,{children:"0"})," means no limit on concurrent uploads, but we recommend a\nvalue between ",(0,s.jsx)(n.code,{children:"5"})," and ",(0,s.jsx)(n.code,{children:"20"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"getresponsedataresponsetext-response",children:(0,s.jsx)(n.code,{children:"getResponseData(responseText, response)"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This is an advanced option intended for use with ",(0,s.jsx)(n.em,{children:"almost"})," S3-compatible storage\nsolutions."]})}),"\n",(0,s.jsxs)(n.p,{children:["Customize response handling once an upload is completed. This passes the\nfunction through to @uppy/xhr-upload, see its\n",(0,s.jsx)(n.a,{href:"https://uppy.io/docs/xhr-upload/#getResponseData-responseText-response",children:"documentation"}),"\nfor API details."]}),"\n",(0,s.jsx)(n.p,{children:"This option is useful when uploading to an S3-like service that doesn\u2019t reply\nwith an XML document, but with something else such as JSON."}),"\n",(0,s.jsx)(n.h4,{id:"locale-",children:(0,s.jsx)(n.code,{children:"locale: {}"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n\tstrings: {\n\t\ttimedOut: 'Upload stalled for %{seconds} seconds, aborting.',\n\t},\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"frequently-asked-questions",children:"Frequently Asked Questions"}),"\n",(0,s.jsx)(n.h3,{id:"how-can-i-generate-a-presigned-url-server-side",children:"How can I generate a presigned URL server-side?"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"getUploadParameters"})," function can return a ",(0,s.jsx)(n.code,{children:"Promise"}),", so upload parameters\ncan be prepared server-side. That way, no private keys to the S3 bucket need to\nbe shared on the client. For example, there could be a PHP server endpoint that\nprepares a presigned URL for a file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uppy.use(AwsS3, {\n\tgetUploadParameters(file) {\n\t\t// Send a request to our PHP signing endpoint.\n\t\treturn fetch('/s3-sign.php', {\n\t\t\tmethod: 'post',\n\t\t\t// Send and receive JSON.\n\t\t\theaders: {\n\t\t\t\taccept: 'application/json',\n\t\t\t\t'content-type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tfilename: file.name,\n\t\t\t\tcontentType: file.type,\n\t\t\t}),\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\t// Parse the JSON response.\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\t// Return an object in the correct shape.\n\t\t\t\treturn {\n\t\t\t\t\tmethod: data.method,\n\t\t\t\t\turl: data.url,\n\t\t\t\t\tfields: data.fields,\n\t\t\t\t\t// Provide content type header required by S3\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': file.type,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t});\n\t},\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["See either the\n",(0,s.jsx)(n.a,{href:"https://github.com/transloadit/uppy/tree/HEAD/examples/aws-nodejs",children:"aws-nodejs"}),"\nor ",(0,s.jsx)(n.a,{href:"https://github.com/transloadit/uppy/tree/HEAD/examples/aws-php",children:"aws-php"}),"\nexamples in the uppy repository for a demonstration of how to implement handling\nof presigned URLs on both the server-side and client-side."]}),"\n",(0,s.jsx)(n.h3,{id:"how-can-i-retrieve-the-presigned-parameters-of-the-uploaded-file",children:"How can I retrieve the presigned parameters of the uploaded file?"}),"\n",(0,s.jsxs)(n.p,{children:["Once the file is uploaded, it\u2019s possible to retrieve the parameters that were\ngenerated in ",(0,s.jsx)(n.code,{children:"getUploadParameters(file)"})," via the ",(0,s.jsx)(n.code,{children:"file.meta"})," field:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uppy.on('upload-success', (file, data) => {\n\tconst s3Key = file.meta['key']; // the S3 object key of the uploaded file\n});\n"})})]})}function x(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);