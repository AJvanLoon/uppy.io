"use strict";(self.webpackChunkuppy_io=self.webpackChunkuppy_io||[]).push([[7390],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),u=p(n),h=i,c=u["".concat(s,".").concat(h)]||u[h]||m[h]||l;return n?a.createElement(c,o(o({ref:t},d),{},{components:n})):a.createElement(c,o({ref:t},d))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=h;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[u]="string"==typeof e?e:i,o[1]=r;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},21983:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>r,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const l={title:"Uppy 3.3 to 3.13: conditional S3 multipart, signing on the client, speedy handling of 10k files and much much more",date:new Date("2023-07-26T00:00:00.000Z"),authors:["murderlon","arturi","aduh95","mifi"],image:"/img/blog/3.4-3.13/single-file-mode.jpg",slug:"2023/07/3.3-3.13",published:!0},o=void 0,r={permalink:"/blog/2023/07/3.3-3.13",editUrl:"https://github.com/transloadit/uppy.io/tree/main/blog/2023-07-3.4-3.13.md",source:"@site/blog/2023-07-3.4-3.13.md",title:"Uppy 3.3 to 3.13: conditional S3 multipart, signing on the client, speedy handling of 10k files and much much more",description:"This is a big Uppy update post, covering releases from",date:"2023-07-26T00:00:00.000Z",formattedDate:"July 26, 2023",tags:[],readingTime:8.82,hasTruncateMarker:!0,authors:[{email:"merlijn@transloadit.com",name:"Merlijn Vos",id:"merlijn",tagline:"Developer",imageURL:"https://github.com/murderlon.png",key:"murderlon"},{email:"artur@transloadit.com",name:"Artur Paikin",id:"artur",tagline:"Developer",imageURL:"https://github.com/arturi.png",key:"arturi"},{email:"antoine@transloadit.com",name:"Antoine du Hamel",id:"aduh95",tagline:"Developer",imageURL:"https://github.com/aduh95.png",key:"aduh95"},{email:"mikael@transloadit.com",name:"Mikael Finstad",id:"mikael",tagline:"Developer",imageURL:"https://github.com/mifi.png",key:"mifi"}],frontMatter:{title:"Uppy 3.3 to 3.13: conditional S3 multipart, signing on the client, speedy handling of 10k files and much much more",date:"2023-07-26T00:00:00.000Z",authors:["murderlon","arturi","aduh95","mifi"],image:"/img/blog/3.4-3.13/single-file-mode.jpg",slug:"2023/07/3.3-3.13",published:!0},nextItem:{title:"New Uppy.io and docs",permalink:"/blog/2023-05-new-website"}},s={authorsImageUrls:[void 0,void 0,void 0,void 0]},p=[{value:"Amazon S3",id:"amazon-s3",level:2},{value:"Merging of the plugins",id:"merging-of-the-plugins",level:3},{value:"Conditional Multipart Explained",id:"conditional-multipart-explained",level:3},{value:"Signing on the client",id:"signing-on-the-client",level:3},{value:"Stability and bug fixes",id:"stability-and-bug-fixes",level:3},{value:"Core",id:"core",level:2},{value:"Transloadit",id:"transloadit",level:2},{value:"assemblyOptions",id:"assemblyoptions",level:3},{value:"Server-sent events",id:"server-sent-events",level:3},{value:"Bug fixes",id:"bug-fixes",level:3},{value:"Companion",id:"companion",level:2},{value:"Refresh tokens",id:"refresh-tokens",level:3},{value:"Bug fixes and improvements",id:"bug-fixes-and-improvements",level:3},{value:"Url",id:"url",level:2},{value:"Dashboard and Status Bar",id:"dashboard-and-status-bar",level:2},{value:"Status Bar",id:"status-bar",level:3},{value:"Locales",id:"locales",level:2},{value:"Uploaders",id:"uploaders",level:2},{value:"Miscellaneous",id:"miscellaneous",level:2}],d={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("img",{src:"/img/blog/3.4-3.13/single-file-mode.jpg",className:"border",alt:"Screenshot of the new Uppy website homepage"}),(0,i.kt)("p",null,"This is a big Uppy update post, covering releases from\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/transloadit/uppy/compare/uppy%403.4.0...uppy%403.13.0"},(0,i.kt)("inlineCode",{parentName:"a"},"3.3.0")," to ",(0,i.kt)("inlineCode",{parentName:"a"},"3.13.0")),"!"),(0,i.kt)("p",null,"In this issue: the long-awaited unified S3 plugin which can switch between\nregular and multipart uploads, improved performance when adding and validating\n10k+ files, and stability improvements and bug fixes. The Transloadit plugin is\nnow also easier to configure and leaner in bundle size, since we removed\n",(0,i.kt)("inlineCode",{parentName:"p"},"socket.io-client")," in favor of\n",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events"},"Server-Sent Events"),"."),(0,i.kt)("p",null,"Please make a cup of something tasty \u2615\ufe0f (in a non-spillable container), as this\nwill be quite a ride."),(0,i.kt)("h2",{id:"amazon-s3"},"Amazon S3"),(0,i.kt)("h3",{id:"merging-of-the-plugins"},"Merging of the plugins"),(0,i.kt)("p",null,"After years of separating regular non-multipart uploads and multipart uploads,\nwe are finally reuniting the two sibling plugins: ",(0,i.kt)("inlineCode",{parentName:"p"},"@uppy/aws-s3")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"@uppy/aws-s3-multpart"),". Here\u2019s the brief version of what you need to know, with\ndetails to follow in the next section:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@uppy/aws-s3-multipart")," is deprecated. You should use ",(0,i.kt)("inlineCode",{parentName:"li"},"@uppy/aws-s3")," and set\nthe ",(0,i.kt)("inlineCode",{parentName:"li"},"shouldUseMultipart: true")," option to get the same \u201cmultipart always\nenabled\u201d behavior. We plan to keep ",(0,i.kt)("inlineCode",{parentName:"li"},"@uppy/aws-s3-multipart")," around as an alias\nfor the next major cycle and add a warning at the install when Uppy 4.0.0 will\nbe released."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@uppy/aws-s3")," now hosts two plugins:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"the legacy one, untouched, to guarantee backward compatibility. We plan to\nget rid of it in the next major, we recommend moving away from it and report\nif you see something missing in the new plugin."),(0,i.kt)("li",{parentName:"ul"},"the new merged plugin, available if you pass\n",(0,i.kt)("a",{parentName:"li",href:"https://uppy.io/docs/aws-s3-multipart/#shouldusemultipartfile"},(0,i.kt)("inlineCode",{parentName:"a"},"shouldUseMultipart")),"\noption.")))),(0,i.kt)("p",null,"Our plan for this merge is to maintain the backward compatibility until the next\nmajor, while also providing forward compatibility so you can try our new plugin\nand give us some feedback before we remove the old code for good."),(0,i.kt)("h3",{id:"conditional-multipart-explained"},"Conditional Multipart Explained"),(0,i.kt)("p",null,"Multipart and \u201cregular\u201d uploads have different use cases. The advantages of\nmultipart uploads are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Improved throughput")," \u2013 You can upload parts in parallel to improve\nthroughput."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Quick recovery from any network issues")," \u2013 Smaller part size minimizes the\nimpact of restarting a failed upload due to a network error."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Pause and resume object uploads")," \u2013 You can upload object parts over time.\nAfter you initiate a multipart upload, there is no expiry; you must explicitly\ncomplete or stop the multipart upload."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Begin an upload before you know the final object size")," \u2013 You can upload an\nobject as you are creating it.")),(0,i.kt)("p",null,"However, the downside is ",(0,i.kt)("em",{parentName:"p"},"request overhead"),", as it needs to do creation,\nsigning, and completion requests besides the upload requests. For example, if\nyou are uploading files that are only a couple kilobytes with a 100ms roundtrip\nlatency, you are spending 400ms on overhead and only a few milliseconds on\nuploading. This really adds up if you upload a lot of small files."),(0,i.kt)("p",null,"So now you can use just one plugin, the ",(0,i.kt)("inlineCode",{parentName:"p"},"@uppy/aws-s3"),", and enable multipart\nconditionally, even per-file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"uppy.use(AwsS3, {\n    shouldUseMultipart(file) {\n        // Use multipart only for files larger than 100MiB.\n        return file.size > 100 * 2 ** 20;\n    },\n});\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"uppy.use(AwsS3, {\n    shouldUseMultipart: true,\n});\n")),(0,i.kt)("p",null,"Please see the new\n",(0,i.kt)("a",{parentName:"p",href:"https://uppy.io/docs/aws-s3-multipart/#shouldusemultipartfile"},(0,i.kt)("inlineCode",{parentName:"a"},"shouldUseMultipart: boolean | function")),"\noption for details."),(0,i.kt)("h3",{id:"signing-on-the-client"},"Signing on the client"),(0,i.kt)("p",null,"By default, when you upload to S3 with Uppy, every file, or every chunk in case\nof Multipart, needs to be signed on the server. For many small files or files\nwith many chunks this means a few additional requests per file/chunk of the\nupload."),(0,i.kt)("p",null,"To address this issue and speed up the uploads by roughly 20%, we are\nintroducing a new option: ",(0,i.kt)("inlineCode",{parentName:"p"},"getTemporarySecurityCredentials: boolean | function"),".\nWhen ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", both S3 and S3 Multipart uploads will be signed on the client using\nthe\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/STS/latest/APIReference/API_GetFederationToken.html"},"AWS Security Federation Token"),",\ncreated once per user (until it expires) on your backend rather than a unique\nsigned URL for every single chunk."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"You should opt-in into this only if you are comfortable giving end users direct\naccess to signing files for your bucket.")),(0,i.kt)("h3",{id:"stability-and-bug-fixes"},"Stability and bug fixes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We\u2019ve improved the internal handling of ",(0,i.kt)("inlineCode",{parentName:"li"},"RateLimitedQueue")," to make\n",(0,i.kt)("a",{parentName:"li",href:"https://github.com/transloadit/uppy/pull/4424"},"retries more robust")," and\nincreased\n",(0,i.kt)("a",{parentName:"li",href:"https://github.com/transloadit/uppy/pull/4542"},"priority of ",(0,i.kt)("inlineCode",{parentName:"a"},"abort")," and ",(0,i.kt)("inlineCode",{parentName:"a"},"complete")),"\nrequests."),(0,i.kt)("li",{parentName:"ul"},"While we were at it, we\u2019ve also fixed\n",(0,i.kt)("a",{parentName:"li",href:"https://github.com/transloadit/uppy/pull/4528"},"resuming in single-chunk uploads"),",\nand improved\n",(0,i.kt)("a",{parentName:"li",href:"https://github.com/transloadit/uppy/pull/4508"},"chunk size calculation"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/transloadit/uppy/pull/4526"},"Golden Retriever integration with S3 Multipart"),"\nwas fixed.")),(0,i.kt)("p",null,"Additionally, we\u2019ve disabled pause-resume buttons in the UI for remote S3\nMultipart uploads \u2014\xa0they are not supported on Companion, so the UI now reflects\nthat."),(0,i.kt)("h2",{id:"core"},"Core"),(0,i.kt)("p",null,"Performance of adding and uploading big batches of files has (yet again) been\ngreatly improved with refactors in both Uppy Core and Provider Views (that\u2019s\nwhat we internally call all remote UIs: Instagram, Unsplash, Dropbox)."),(0,i.kt)("p",null,"We\u2019ve been able to achieve this by\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/transloadit/uppy/pull/4402"},"refactoring out totals validation for Restrictions (maxTotalFileSize, maxNumberOfFiles)"),":\ninstead of doing it for each file, we perform the check at the end, after all\nthe files have been added/validated. This was confirmed to work with 10k+ files!\n\ud83d\ude80"),(0,i.kt)("img",{src:"/img/blog/3.4-3.13/10k-files.jpg",className:"border",alt:"Uppy UI with over 10k files selected from a remote source"}),(0,i.kt)("p",null,"We\u2019ve also fixed an issue with delayed throttled progress events, which could\nlead to incorrect progress."),(0,i.kt)("h2",{id:"transloadit"},"Transloadit"),(0,i.kt)("h3",{id:"assemblyoptions"},"assemblyOptions"),(0,i.kt)("p",null,"We\u2019ve introduced a new option called\n",(0,i.kt)("a",{parentName:"p",href:"https://uppy.io/docs/transloadit/#assemblyoptions"},(0,i.kt)("inlineCode",{parentName:"a"},"assemblyOptions: object | function")),",\nwhich replaces the ",(0,i.kt)("inlineCode",{parentName:"p"},"getAssemblyOptions"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"params")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"fields")," (those are now\ndeprecated and will be removed in the next major)."),(0,i.kt)("p",null,"Here\u2019s how you can use the new option as an object:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"uppy.use(Transloadit, {\n    assemblyOptions: {\n        params: {\n            auth: { key: 'key-from-transloadit' },\n            template_id: 'id-from-transloadit',\n            steps: {\n                // Overruling Template at runtime\n            },\n        },\n        signature: 'generated-signature',\n        fields: {\n            // Dynamic or static fields to send along\n        },\n    },\n});\n")),(0,i.kt)("p",null,"And here\u2019s an example with a function, to be able to set meta fields per-file,\nfor instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"uppy.use(Transloadit, {\n    assemblyOptions(file) {\n        return {\n            params: {\n                auth: { key: 'TRANSLOADIT_AUTH_KEY_HERE' },\n                template_id: 'xyz',\n            },\n            fields: {\n                caption: file.meta.caption,\n            },\n        };\n    },\n});\n")),(0,i.kt)("h3",{id:"server-sent-events"},"Server-sent events"),(0,i.kt)("p",null,"Historically Transloadit supported progress updates via Socket.io. It is a\nrobust and stable package, but came with a \u201cprice-tag\u201d in the form of bundle\nsize:\n",(0,i.kt)("a",{parentName:"p",href:"https://bundlephobia.com/package/socket.io-client@4.7.1"},"38.3 kB Minified"),". So\nit\u2019s been on our minds for a while to replace it with something more\nlightweight, without breaking backwards-compatibility for the older clients (so\nsimply removing Socket.io on the server in favor of plain WebSockets is not\ndesireable)."),(0,i.kt)("p",null,"The answer \u2014\n",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events"},"Server-sent events"),".\nIt\u2019s a simple low-overhead one-way connection from Transloadit servers to\n",(0,i.kt)("inlineCode",{parentName:"p"},"@uppy/transloadit"),". As was the case with Socket.io, we fall back to HTTP\npolling every 2 seconds if SSE connection fails for some reason."),(0,i.kt)("p",null,"Socket.io is still around in ",(0,i.kt)("inlineCode",{parentName:"p"},"@uppy/transloadit"),", but will be removed soon, once\nSSE proves itself in production."),(0,i.kt)("h3",{id:"bug-fixes"},"Bug fixes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Reset ",(0,i.kt)("inlineCode",{parentName:"li"},"tus")," key in the file on error, so retried files are re-uploaded."),(0,i.kt)("li",{parentName:"ul"},"Clean up event listener to prevent cancelled assemblies."),(0,i.kt)("li",{parentName:"ul"},"Make sure ",(0,i.kt)("inlineCode",{parentName:"li"},"fields")," is not nullish when there are no files in Assembly.")),(0,i.kt)("h2",{id:"companion"},"Companion"),(0,i.kt)("h3",{id:"refresh-tokens"},"Refresh tokens"),(0,i.kt)("p",null,"We\u2019ve\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/transloadit/uppy/pull/4448"},"implemented refresh tokens")," for\nDropbox and Google Drive to solve issued where tokens would expire in the middle\nof a long upload and then the upload would fail."),(0,i.kt)("p",null,"Here\u2019s how it\u2019s implemented in Companion:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We changed the logic when receiving a 401 from Companion, Uppy will now call a\nnew ",(0,i.kt)("inlineCode",{parentName:"li"},"/:provider/refresh-token")," endpoint which will give uppy a new access\ntoken."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"refresh_token")," is now stored inside uppy auth token along with ",(0,i.kt)("inlineCode",{parentName:"li"},"access_token"),"\n(encrypted JWT) for providers that give a refresh token (before only\n",(0,i.kt)("inlineCode",{parentName:"li"},"access_token")," was stored, now we store both as a ",(0,i.kt)("inlineCode",{parentName:"li"},"JSON.stringify"),"\u2019d\ndocument).")),(0,i.kt)("h3",{id:"bug-fixes-and-improvements"},"Bug fixes and improvements"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fixed a bug with non-ASCII metadata crashed Companion. The AWS SDK doesn\u2019t\nencode metadata by itself, so now we do it in Companion."),(0,i.kt)("li",{parentName:"ul"},"Switched from aws-sdk v2 to @aws-sdk/","*"," v3"),(0,i.kt)("li",{parentName:"ul"},"Upgraded Grant dependency"),(0,i.kt)("li",{parentName:"ul"},"We now send expire info for non-multipart uploads and added connection\nkeep-alive to Dropbox to improve connection stability"),(0,i.kt)("li",{parentName:"ul"},"Merged Provider and SearchProvider internal remote source classes."),(0,i.kt)("li",{parentName:"ul"},"Increased max limits for remote file list operations and fixed part listing in\nS3")),(0,i.kt)("h2",{id:"url"},"Url"),(0,i.kt)("p",null,"We\u2019ve upgraded the Url plugin to use ",(0,i.kt)("inlineCode",{parentName:"p"},"filename")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"Content-Disposition"),"\nheader of the file you are importing, instead of relying on the url (but kept\nthe latter as a fallback) (#4489). So now your files have proper names instead\nof ",(0,i.kt)("inlineCode",{parentName:"p"},"noname"),"."),(0,i.kt)("img",{src:"/img/blog/3.4-3.13/url-name.jpg",className:"border",alt:"Uppy UI with a file selected with the Url plugin"}),(0,i.kt)("h2",{id:"dashboard-and-status-bar"},"Dashboard and Status Bar"),(0,i.kt)("p",null,"Single File Mode has been improved to adapt to height of less than 400px \u2014 the\nUI turns back to grid in this case. We are also not using ",(0,i.kt)("inlineCode",{parentName:"p"},"fit: cover")," anymore\nto avoid cropping important parts of the image:"),(0,i.kt)("img",{src:"/img/blog/3.4-3.13/single-file-mode.jpg",className:"border",alt:"Uppy UI with single file"}),(0,i.kt)("p",null,"We\u2019ve also added an option to disable the Single File mode, as it can be\nunwanted in certain use cases:\n",(0,i.kt)("a",{parentName:"p",href:"https://uppy.io/docs/dashboard/#singlefilefullscreen"},(0,i.kt)("inlineCode",{parentName:"a"},"singleFileFullScreen")),"."),(0,i.kt)("p",null,"If you wrapped Uppy Dashboard in a ",(0,i.kt)("inlineCode",{parentName:"p"},"<form>")," element, it could be accidentally\nsubmitted when a user pressed Enter to save meta fields or entering urls. Now\nwe\u2019ve\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/transloadit/uppy/pull/4283"},"added a ",(0,i.kt)("inlineCode",{parentName:"a"},'form=""')," attribute, connected to an empty ",(0,i.kt)("inlineCode",{parentName:"a"},"<form>")),"\nin document root to prevent the outer form from being submitted."),(0,i.kt)("p",null,"A bug has been fixed that allowed clicking on buttons and links in Dashboard\n",(0,i.kt)("a",{parentName:"p",href:"https://uppy.io/docs/dashboard/#disabled"},"disabled mode"),"."),(0,i.kt)("p",null,"Range selection of remote files has been fixed, you can now shift+click to\nselect multiple files again. We\u2019ve added the ",(0,i.kt)("inlineCode",{parentName:"p"},"VirtualList")," component which is\nalready used in Uppy \u201cselected files\u201d screen to remote file lists. So now\nscrolling through 10k+ files is breeze \ud83c\udf2c\ufe0f"),(0,i.kt)("img",{src:"/img/blog/3.4-3.13/range-selection.jpg",className:"border",alt:"Dashboard UI with range selection"}),(0,i.kt)("h3",{id:"status-bar"},"Status Bar"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fixed ETA when Uppy recovers its state."),(0,i.kt)("li",{parentName:"ul"},"Remove throttled component to fix a bug where state would become shared\nbetween multiple status bars on a page.")),(0,i.kt)("h2",{id:"locales"},"Locales"),(0,i.kt)("p",null,"We\u2019ve added support for Hindi and Mexican Spanish. French, Spanish and Chinese\nlocales have been improved."),(0,i.kt)("h2",{id:"uploaders"},"Uploaders"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fixed an issue where sockets were opened right away, ignoring the\n",(0,i.kt)("inlineCode",{parentName:"li"},"RateLimitedQueue"),", which led to bugs in all plugins that handle remote\nuploads. Additionally, when file is removed (or all are canceled), we call\n",(0,i.kt)("inlineCode",{parentName:"li"},"controller.abort")," on queued requests."),(0,i.kt)("li",{parentName:"ul"},"Fixed a bug with sockets being closed, while the upload was still in progress."),(0,i.kt)("li",{parentName:"ul"},"In XHR Upload we\u2019ve added support for arrays in metadata and an\n",(0,i.kt)("inlineCode",{parentName:"li"},"'upload-stalled'")," event.")),(0,i.kt)("h2",{id:"miscellaneous"},"Miscellaneous"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@uppy/golden-retriever")," has been refactored refactor to modernize the\ncodebase."),(0,i.kt)("li",{parentName:"ul"},"We\u2019ve switched more non-critical errors to warnings."),(0,i.kt)("li",{parentName:"ul"},"Improved fallbacks for the drag & drop API."),(0,i.kt)("li",{parentName:"ul"},"The React Native example has been modernized and updated."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"uppy.resetProgress()")," in Core has been fixed.")),(0,i.kt)("p",null,"We hope you\u2019ve enjoyed this update posts and all the fixes and features we\u2019ve\nworked on! As always, please see the full changelog on GitHub:\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/transloadit/uppy/compare/uppy%403.4.0...uppy%403.13.0"},"3.4.0 \u2014 3.13.0"),"."))}m.isMDXComponent=!0}}]);