"use strict";(self.webpackChunkuppy_io=self.webpackChunkuppy_io||[]).push([[3543],{10705:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var i=t(85893),s=t(11151);const o={title:"Scaling Images on Rotation",date:new Date("2023-12-08T00:00:00.000Z"),authors:["evgenia","tim"],image:"/img/blog/3.4-3.13/single-file-mode.jpg",slug:"2023-10-25-image-editor",published:!0,toc_max_heading_level:3},a=void 0,r={permalink:"/blog/2023-10-25-image-editor",editUrl:"https://github.com/transloadit/uppy.io/tree/main/blog/2023-10-25-image-editor.md",source:"@site/blog/2023-10-25-image-editor.md",title:"Scaling Images on Rotation",description:"We recently released an \u201cimage scaling on rotation\u201d feature for Uppy\u2019s",date:"2023-12-08T00:00:00.000Z",formattedDate:"December 8, 2023",tags:[],readingTime:5.805,hasTruncateMarker:!0,authors:[{email:"lakesare@gmail.com",name:"Evgenia Karunus",id:"evgenia",tagline:"Developer",imageURL:"https://github.com/lakesare.png",key:"evgenia"},{email:"tim@transloadit.com",name:"Tim Koschuetzki",id:"tim",tagline:"Transloadit co-founder",imageURL:"https://github.com/tim-kos.png",key:"tim"}],frontMatter:{title:"Scaling Images on Rotation",date:"2023-12-08T00:00:00.000Z",authors:["evgenia","tim"],image:"/img/blog/3.4-3.13/single-file-mode.jpg",slug:"2023-10-25-image-editor",published:!0,toc_max_heading_level:3},unlisted:!1,nextItem:{title:"Uppy 3.3 to 3.13: conditional S3 multipart, signing on the client, speedy handling of 10k files and much much more",permalink:"/blog/2023/07/3.3-3.13"}},l={authorsImageUrls:[void 0,void 0]},c=[{value:"3 Steps",id:"3-steps",level:2},{value:"1. Trust your designer",id:"1-trust-your-designer",level:3},{value:"2. Find the <code>.scale()</code> function",id:"2-find-the-scale-function",level:3},{value:"3. Calculate the geometry",id:"3-calculate-the-geometry",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",code:"code",details:"details",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",source:"source",span:"span",strong:"strong",summary:"summary",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",video:"video",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["We recently released an \u201cimage scaling on rotation\u201d feature for Uppy\u2019s\n",(0,i.jsx)(n.a,{href:"https://uppy.io/docs/image-editor/",children:"Image Editor"}),", an often-requested feature\nthat we\u2019re super proud to be able to announce."]}),"\n",(0,i.jsx)(n.p,{children:"In this blog post, we\u2019ll be taking a peek behind the curtain, as we take a\ndetailed look into the development of this feature, and our thought-process\napproaching it."}),"\n",(0,i.jsx)(n.p,{children:"Before we start though, take a look below at a comparison between how Uppy\u2019s\nImage Editor used to handle image rotations, and how it handles them now."}),"\n\n  \n  \n  ",(0,i.jsxs)(n.table,{style:{},"textalign:":"",'"center"':"","}}":"",children:["\n  ",(0,i.jsxs)(n.thead,{children:["\n  ",(0,i.jsxs)(n.tr,{children:["\n    ",(0,i.jsx)(n.th,{colSpan:"{2}",children:"\n      Rotation\n    "}),"\n  "]}),(0,i.jsxs)(n.tr,{children:["\n    ",(0,i.jsx)(n.th,{children:"Without scaling"}),"\n    ",(0,i.jsx)(n.th,{children:"With scaling"}),"\n  "]}),"\n  "]}),(0,i.jsxs)(n.tbody,{children:["\n  ",(0,i.jsxs)(n.tr,{children:["\n  ",(0,i.jsxs)(n.td,{children:["\n    ",(0,i.jsxs)(n.video,{controls:!0,muted:!0,autoPlay:!0,children:["\n      ",(0,i.jsx)(n.source,{src:"/img/blog/2023-10-25-image-editor/without-scaling.mov",type:"video/mp4"}),"\n    "]}),"\n  "]}),(0,i.jsxs)(n.td,{children:["\n    ",(0,i.jsxs)(n.video,{controls:!0,muted:!0,autoPlay:!0,children:["\n      ",(0,i.jsx)(n.source,{src:"/img/blog/2023-10-25-image-editor/with-scaling.mov",type:"video/mp4"}),"\n    "]}),"\n  "]}),"\n  "]}),"\n  "]})]}),"\n",(0,i.jsx)(n.p,{children:"Without further ado, let\u2019s dive into some of the finer technical details, so\nyou can follow along and implement this feature into your own image editor."}),"\n",(0,i.jsx)(n.p,{children:"The above UI is present in many image editors - for example, the default image\neditors on iOS and Android both employ it. Often users expect this behaviour\ntoo, leading to some confusion when their images are left with ugly corners\nafter a rotation."}),"\n",(0,i.jsx)(n.p,{children:"We implemented this in Uppy\u2019s Image Editor last week, and the solution turned\nout to be non-trivial. Since this is a pretty ubiquitous task to solve for all\nimage editors, we decided to release our solution to the world and write out a\npost about it, instead of keeping it hidden away as part of internal notes."}),"\n",(0,i.jsx)(n.h2,{id:"3-steps",children:"3 Steps"}),"\n",(0,i.jsxs)(n.p,{children:["There are ",(0,i.jsx)(n.strong,{children:"3 steps"})," to our scaling implementation:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Ask your designer what scaling on rotation should look like"}),"\n",(0,i.jsxs)(n.li,{children:["Find the ",(0,i.jsx)(n.code,{children:".scale()"})," function"]}),"\n",(0,i.jsx)(n.li,{children:"Calculating the geometry"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"1-trust-your-designer",children:"1. Trust your designer"}),"\n",(0,i.jsx)(n.p,{children:"When I first approached this task, my gut-instinct was to go for the \u201crotated\nrectangle inscribed within another rectangle\u201d solution so that the largest-area\ninscription possible is achieved. This route turned out to be an unpleasant user\nexperience, so take this as an important lesson in trusting your designer, and\nconsulting them first on what the user might want."}),"\n",(0,i.jsx)(n.p,{children:"Alternatively, you can choose to trust our designer\u2019s advice by:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"always rotating the image around the center of the image (intersection of the\ndiagonals)"}),"\n",(0,i.jsx)(n.li,{children:"just enlarging the image to remove any empty corners"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"2-find-the-scale-function",children:["2. Find the ",(0,i.jsx)(n.code,{children:".scale()"})," function"]}),"\n",(0,i.jsxs)(n.p,{children:["To enlarge the image in a way that covers empty corners, we first need a scaling\nfunction. Uppy uses ",(0,i.jsx)(n.a,{href:"https://github.com/fengyuanchen/cropperjs",children:"cropperjs v1.x"}),"\nas an image editing library, which exposes the ",(0,i.jsx)(n.code,{children:"cropper.scale(scalingFactor)"}),"\nfunction. Most image editing libraries are likely to have a similar function,\nbut of course feel free to code one yourself if you feel up to the challenge."]}),"\n",(0,i.jsxs)(n.p,{children:["Importantly, the scaling function should\n",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Scaling_(geometry)#Uniform_scaling",children:"uniformly enlarge"}),"\nthe image ",(0,i.jsx)(n.em,{children:"around its center"}),", where the ",(0,i.jsx)(n.code,{children:"scalingFactor"})," is determined by\n",(0,i.jsx)(n.code,{children:"desiredHeight/oldHeight"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"3-calculate-the-geometry",children:"3. Calculate the geometry"}),"\n",(0,i.jsxs)(n.p,{children:["Now, we want to draw our before-rotation & after-rotation shapes on the same\npicture, and apply some trigonometry. If you need to brush up on the mathematics\nbehind this, we recommend watching the following Khan Academy lessons on\n",(0,i.jsx)(n.a,{href:"https://www.khanacademy.org/test-prep/praxis-math/praxis-math-lessons/gtp--praxis-math--lessons--geometry/a/gtp--praxis-math--article--angles--lesson",children:"how angles work"}),"\nand\n",(0,i.jsx)(n.a,{href:"https://www.khanacademy.org/math/geometry/hs-geo-trig/hs-geo-trig-ratios-intro/a/finding-trig-ratios-in-right-triangles",children:"how sines and cosines work"}),",\nas these cover everything you\u2019ll need to follow along."]}),"\n",(0,i.jsxs)(n.p,{children:["In the images below, we see what happens on rotation by default. To remove the\nempty corners, the user would have to drag around the edges of the cropbox. What\nwe can do instead is scale the image (in the directions shown by the <span\nstyle={{ color: ",(0,i.jsx)(n.code,{children:"rgb(127, 194, 65)"})," }}>green arrows) so that these\ncorners disappear."]}),"\n\n  \n  ",(0,i.jsxs)(n.table,{style:{},"background:":"","`rgb(250,":"","250,":"","250)`":"","}}":"",children:["\n  ",(0,i.jsxs)(n.thead,{children:["\n  ",(0,i.jsx)(n.tr,{children:(0,i.jsx)(n.th,{colSpan:"{2}",children:"What happens on rotation"})}),"\n  "]}),(0,i.jsxs)(n.tbody,{children:["\n  ",(0,i.jsxs)(n.tr,{children:["\n  ",(0,i.jsxs)(n.td,{width:"50%",children:["\n    ",(0,i.jsx)(n.img,{300:"",style:{},"maxwidth:":"","}}":"",src:"/img/blog/2023-10-25-image-editor/1a.png"}),"\n  "]}),(0,i.jsxs)(n.td,{width:"50%",children:["\n    ",(0,i.jsx)(n.img,{340:"",style:{},"maxwidth:":"","}}":"",src:"/img/blog/2023-10-25-image-editor/1b.png"}),"\n  "]}),"\n  "]}),"\n  "]})]}),"\n",(0,i.jsxs)(n.p,{children:["So, to cover up these checkered corners, we will need to scale the image. If we\ncover up the larger corner, the smaller corner will get covered up\nautomatically, so our code takes the form of\n",(0,i.jsx)(n.code,{children:"scale(Math.max(scalingFactor1, scalingFactor2))"}),". These two scaling factors are\ncalculated very similarly, so we\u2019ll only focus on calculating only one of them\nin this tutorial (although the full solution is given in the conclusion)."]}),"\n",(0,i.jsxs)(n.p,{children:["In the images below, the <span style={{ color: ",(0,i.jsx)(n.code,{children:"rgb(127, 194, 65)"})," }}>green\nrectangle represents the desired dimensions of our image after it\u2019s\nscaled. Our scaling function (and hopefully yours) is defined in such a way that\nif we have the image of height ",(0,i.jsx)(n.code,{children:"h"}),", and we want to scale it up to height ",(0,i.jsx)(n.code,{children:"H"}),", we\nneed to execute ",(0,i.jsx)(n.code,{children:".scale(H/h)"}),". Since we already know ",(0,i.jsx)(n.code,{children:"h"}),", as it\u2019s the height of\nour image, we only need to find ",(0,i.jsx)(n.code,{children:"H"})," to complete our scaling function."]}),"\n\n  \n  ",(0,i.jsxs)(n.table,{style:{},"background:":"",'"rgb(250,':"","250,":"",'250)"':"","}}":"",children:["\n  ",(0,i.jsxs)(n.thead,{children:["\n  ",(0,i.jsx)(n.tr,{children:(0,i.jsx)(n.th,{colSpan:"{2}",children:"We want to find H"})}),"\n  "]}),(0,i.jsxs)(n.tbody,{children:["\n  ",(0,i.jsxs)(n.tr,{children:["\n  ",(0,i.jsxs)(n.td,{width:"50%",children:["\n    ",(0,i.jsx)(n.img,{src:"/img/blog/2023-10-25-image-editor/2a.png"}),"\n  "]}),(0,i.jsxs)(n.td,{width:"50%",children:["\n    ",(0,i.jsx)(n.img,{src:"/img/blog/2023-10-25-image-editor/2b.png"}),"\n  "]}),"\n  "]}),"\n  "]})]}),"\n",(0,i.jsxs)(n.p,{children:["For the rest of the tutorial, the following steps are then automatic - as we\nknow all the angles in the image, we know the image\u2019s width and height, and we\nknow to find ",(0,i.jsx)(n.code,{children:"H"}),"."]}),"\n",(0,i.jsxs)(n.p,{0:"",style:{},"padding:":"","}}":"",children:["The easiest way to go about it, is to first annotate the image with all the\nrelevant angles. We\u2019ll be using ",(0,i.jsx)(n.span,{style:{},"color:":"","`rgb(26,":"","196,":"","213)`":"","}}":"",children:"blue "})," for the rotation angle\n ",(0,i.jsx)(n.code,{children:"\u03b1"}),", and ",(0,i.jsx)(n.span,{style:{},"color:":"","`rgb(224,":"","128,":"","193)`":"","}}":"",children:"pink "}),"\nfor ",(0,i.jsx)(n.code,{children:"90 - \u03b1"}),":"]}),"\n\n  ",(0,i.jsxs)(n.table,{style:{},"background:":"",'"rgb(250,':"","250,":"",'250)",':"","textalign:":"",'"center"':"","}}":"",children:["\n  ",(0,i.jsxs)(n.thead,{style:{},"display:":"",'"table",':"","width:":"",'"100%"':"","}}":"",children:["\n  ",(0,i.jsx)(n.tr,{children:(0,i.jsx)(n.th,{children:"Color all angles"})}),"\n  "]}),(0,i.jsxs)(n.tbody,{style:{},"display:":"",'"table",':"","width:":"",'"100%"':"","}}":"",children:["\n  ",(0,i.jsxs)(n.tr,{children:["\n  ",(0,i.jsxs)(n.td,{children:["\n    ",(0,i.jsx)(n.img,{500:"",style:{},"width:":"","}}":"",src:"/img/blog/2023-10-25-image-editor/3.png"}),"\n  "]}),"\n  "]}),"\n  "]})]}),"\n",(0,i.jsxs)(n.p,{children:["We can then find ",(0,i.jsx)(n.code,{children:"H"}),", by adding the two outer sides of these triangles."]}),"\n\n  \n  ",(0,i.jsxs)(n.table,{style:{},"background:":"",'"rgb(250,':"","250,":"",'250)"':"","}}":"",children:["\n  ",(0,i.jsxs)(n.thead,{children:["\n  ",(0,i.jsx)(n.tr,{children:(0,i.jsx)(n.th,{colSpan:"{2}",children:"Add two triangle sides: H = sin(\u03b1 - 90) * h + sin(\u03b1) * w"})}),"\n  "]}),(0,i.jsxs)(n.tbody,{children:["\n  ",(0,i.jsxs)(n.tr,{children:["\n  ",(0,i.jsxs)(n.td,{width:"50%",children:["\n    ",(0,i.jsx)(n.img,{src:"/img/blog/2023-10-25-image-editor/4a.png"}),"\n  "]}),(0,i.jsxs)(n.td,{width:"50%",children:["\n    ",(0,i.jsx)(n.img,{src:"/img/blog/2023-10-25-image-editor/4b.png"}),"\n  "]}),"\n  "]}),"\n  "]})]}),"\n",(0,i.jsxs)(n.p,{children:["So, now we have our desired ",(0,i.jsx)(n.code,{children:"H"}),"! We know one of our scaling factors is ",(0,i.jsx)(n.code,{children:"H/h"}),".\nNow, we just need to find our other scaling factor, which is ",(0,i.jsx)(n.code,{children:"W/w"}),". This follows\na similar process, and you can find the calculations as part of the full\nsolution below."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"scalingFactor\n= max(scalingFactor1, scalingFactor2)\n= max(H/h, W/w)\n= max(\n  (sin(\u03b1 - 90) * h + sin(\u03b1) * w) / h,\n  (sin(\u03b1) * h + sin(\u03b1 - 90) * w) / w\n)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"In Uppy, our code ended up looking like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function getScalingFactor(w, h, rotationAngle) {\n\tconst \u03b1 = Math.abs(toRadians(rotationAngle));\n\n\tconst scalingFactor = Math.max(\n\t\t(Math.sin(\u03b1) * w + Math.cos(\u03b1) * h) / h,\n\t\t(Math.sin(\u03b1) * h + Math.cos(\u03b1) * w) / w,\n\t);\n\n\treturn scalingFactor;\n}\nconst image = cropper.getImageData();\nconst scaleFactor = getScalingFactor(image.width, image.height, rotationAngle);\ncropper.scale(scaleFactor);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can see the full version\n",(0,i.jsx)(n.a,{href:"https://github.com/transloadit/uppy/blob/12e08ada02b9080bd5e1d19526bdf8a2010e62a1/packages/%40uppy/image-editor/src/utils/getScaleFactorThatRemovesDarkCorners.js",children:"on GitHub"}),"."]}),"\n",(0,i.jsxs)(n.details,{children:["\n  ",(0,i.jsx)(n.summary,{children:"Bonus content: our founder\u2019s (Tim Koschuetzki) initial scribbled notes with the solution"}),"\n  ",(0,i.jsx)(n.img,{src:"/img/blog/2023-10-25-image-editor/tim.jpg"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>a});var i=t(67294);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);